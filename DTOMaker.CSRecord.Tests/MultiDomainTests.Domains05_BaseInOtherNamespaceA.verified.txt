// <auto-generated>
// This file was generated by DTOMaker.CSRecord.
// NuGet: https://www.nuget.org/packages/DTOMaker.CSRecord
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.CSRecord;
using System;

#if NET8_0_OR_GREATER
namespace MyOrg.DomainA.CSRecord
{
    public partial record class MyBase : DTOMaker.Runtime.CSRecord.EntityBase, IMyBase, IEquatable<MyBase>
    {
        // Derived entities: 1
        // - MyDTO

        private static readonly MyBase _empty = new MyBase();
        public static new MyBase Empty => _empty;

        protected override int OnGetEntityId() => 2;

        public new static MyBase CreateFrom(MyBase source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.DomainB.CSRecord.MyDTO source2 => new MyOrg.DomainB.CSRecord.MyDTO(source2),
                _ => new MyOrg.DomainA.CSRecord.MyBase(source)
            };
        }

        public new static MyBase CreateFrom(MyOrg.DomainA.IMyBase source)
        {
            if (source is MyBase concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.DomainB.IMyDTO source2 => new MyOrg.DomainB.CSRecord.MyDTO(source2),
                _ => new MyOrg.DomainA.CSRecord.MyBase(source)
            };
        }

        public MyBase() { }
        public MyBase(IMyBase source) : base(source)
        {
        }

    }
}
#else
#warning This template targets .NET 8.0+
#endif
