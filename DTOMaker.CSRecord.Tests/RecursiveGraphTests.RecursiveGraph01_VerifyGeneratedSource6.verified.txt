// <auto-generated>
// This file was generated by DTOMaker.CSRecord.
// NuGet: https://www.nuget.org/packages/DTOMaker.CSRecord
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.CSRecord;
using System;

namespace MyOrg.Models.CSRecord
{
    public partial record Tree : DTOMaker.Runtime.CSRecord.EntityBase, ITree, IEquatable<Tree>
    {
        // Derived entities: 0

        public new const int EntityId = 7;

        private static Tree CreateEmpty()
        {
            var empty = new Tree();
            return empty;
        }
        private static readonly Tree _empty = CreateEmpty();
        public static Tree Empty => _empty;

        public new static Tree CreateFrom(Tree source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.CSRecord.Tree(source)
            };
        }

        public new static Tree CreateFrom(MyOrg.Models.ITree source)
        {
            if (source is Tree concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.CSRecord.Tree(source)
            };
        }

        protected override int OnGetEntityId() => EntityId;

        public Tree() { }
        public Tree(ITree source) : base(source)
        {
            _Left = source.Left is null ? null : MyOrg.Models.CSRecord.Tree.CreateFrom(source.Left);
            _Right = source.Right is null ? null : MyOrg.Models.CSRecord.Tree.CreateFrom(source.Right);
            _Node = source.Node is null ? null : MyOrg.Models.CSRecord.Node.CreateFrom(source.Node);
        }

        private MyOrg.Models.CSRecord.Tree? _Left;
        public MyOrg.Models.CSRecord.Tree? Left
        {
            get => _Left;
            init => _Left = value;
        }
        MyOrg.Models.ITree? ITree.Left => Left;

        private MyOrg.Models.CSRecord.Tree? _Right;
        public MyOrg.Models.CSRecord.Tree? Right
        {
            get => _Right;
            init => _Right = value;
        }
        MyOrg.Models.ITree? ITree.Right => Right;

        private MyOrg.Models.CSRecord.Node? _Node;
        public MyOrg.Models.CSRecord.Node? Node
        {
            get => _Node;
            init => _Node = value;
        }
        MyOrg.Models.INode? ITree.Node => Node;

    }
}
