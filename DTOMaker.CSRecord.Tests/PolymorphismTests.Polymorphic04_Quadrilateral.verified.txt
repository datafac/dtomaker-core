// <auto-generated>
// This file was generated by DTOMaker.CSRecord.
// NuGet: https://www.nuget.org/packages/DTOMaker.CSRecord
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.CSRecord;
using System;

namespace MyOrg.Models.CSRecord
{
    public partial record Quadrilateral : MyOrg.Models.CSRecord.Polygon, IQuadrilateral, IEquatable<Quadrilateral>
    {
        // Derived entities: 2
        // - Rectangle
        // - Square

        public new const int EntityId = 5;

        private static Quadrilateral CreateEmpty()
        {
            var empty = new Quadrilateral();
            return empty;
        }
        private static readonly Quadrilateral _empty = CreateEmpty();
        public static Quadrilateral Empty => _empty;

        public new static Quadrilateral CreateFrom(Quadrilateral source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.CSRecord.Rectangle source2 => new MyOrg.Models.CSRecord.Rectangle(source2),
                MyOrg.Models.CSRecord.Square source2 => new MyOrg.Models.CSRecord.Square(source2),
                _ => new MyOrg.Models.CSRecord.Quadrilateral(source)
            };
        }

        public new static Quadrilateral CreateFrom(MyOrg.Models.IQuadrilateral source)
        {
            if (source is Quadrilateral concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IRectangle source2 => new MyOrg.Models.CSRecord.Rectangle(source2),
                MyOrg.Models.ISquare source2 => new MyOrg.Models.CSRecord.Square(source2),
                _ => new MyOrg.Models.CSRecord.Quadrilateral(source)
            };
        }

        protected override int OnGetEntityId() => EntityId;

        public Quadrilateral() { }
        public Quadrilateral(IQuadrilateral source) : base(source)
        {
        }

    }
}
