// <auto-generated>
// This file was generated by DTOMaker.CSRecord.
// NuGet: https://www.nuget.org/packages/DTOMaker.CSRecord
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.CSRecord;
using System;

namespace MyOrg.Models.CSRecord
{
    public partial record Node : DTOMaker.Runtime.CSRecord.EntityBase, INode, IEquatable<Node>
    {
        // Derived entities: 5
        // - BooleanNode
        // - DoubleNode
        // - Int64Node
        // - NumericNode
        // - StringNode

        public new const int EntityId = 1;

        private static Node CreateEmpty()
        {
            var empty = new Node();
            return empty;
        }
        private static readonly Node _empty = CreateEmpty();
        public static Node Empty => _empty;

        public new static Node CreateFrom(Node source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.CSRecord.DoubleNode source2 => new MyOrg.Models.CSRecord.DoubleNode(source2),
                MyOrg.Models.CSRecord.Int64Node source2 => new MyOrg.Models.CSRecord.Int64Node(source2),
                MyOrg.Models.CSRecord.BooleanNode source2 => new MyOrg.Models.CSRecord.BooleanNode(source2),
                MyOrg.Models.CSRecord.NumericNode source2 => new MyOrg.Models.CSRecord.NumericNode(source2),
                MyOrg.Models.CSRecord.StringNode source2 => new MyOrg.Models.CSRecord.StringNode(source2),
                _ => new MyOrg.Models.CSRecord.Node(source)
            };
        }

        public new static Node CreateFrom(MyOrg.Models.INode source)
        {
            if (source is Node concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IDoubleNode source2 => new MyOrg.Models.CSRecord.DoubleNode(source2),
                MyOrg.Models.IInt64Node source2 => new MyOrg.Models.CSRecord.Int64Node(source2),
                MyOrg.Models.IBooleanNode source2 => new MyOrg.Models.CSRecord.BooleanNode(source2),
                MyOrg.Models.INumericNode source2 => new MyOrg.Models.CSRecord.NumericNode(source2),
                MyOrg.Models.IStringNode source2 => new MyOrg.Models.CSRecord.StringNode(source2),
                _ => new MyOrg.Models.CSRecord.Node(source)
            };
        }

        protected override int OnGetEntityId() => EntityId;

        public Node() { }
        public Node(INode source) : base(source)
        {
            _Key = source.Key;
        }

        private string _Key = string.Empty;
        public string Key
        {
            get => _Key;
            init => _Key = value;
        }

    }
}
