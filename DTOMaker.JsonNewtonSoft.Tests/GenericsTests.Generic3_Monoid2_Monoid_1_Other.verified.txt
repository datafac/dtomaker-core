// <auto-generated>
// This file was generated by DTOMaker.JsonNewtonSoft.
// NuGet: https://www.nuget.org/packages/DTOMaker.JsonNewtonSoft
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.JsonNewtonSoft;
using System;
using System.Linq;

namespace MyOrg.Models.JsonNewtonSoft
{
    public partial class Monoid_1_Other : DTOMaker.Runtime.JsonNewtonSoft.EntityBase, IMonoid<IOther>, IEquatable<Monoid_1_Other>
    {
        // Derived entities: 1
        // - MyDTO

        protected override int OnGetEntityId() => 1031;

        private static Monoid_1_Other CreateEmpty()
        {
            var empty = new Monoid_1_Other();
            empty.Freeze();
            return empty;
        }
        private static readonly Monoid_1_Other _empty = CreateEmpty();
        public static new Monoid_1_Other Empty => _empty;

        public new static Monoid_1_Other CreateFrom(Monoid_1_Other source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.JsonNewtonSoft.MyDTO source2 => new MyOrg.Models.JsonNewtonSoft.MyDTO(source2),
                _ => new MyOrg.Models.JsonNewtonSoft.Monoid_1_Other(source)
            };
        }

        public new static Monoid_1_Other CreateFrom(MyOrg.Models.IMonoid<IOther> source)
        {
            if (source is Monoid_1_Other concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IMyDTO source2 => new MyOrg.Models.JsonNewtonSoft.MyDTO(source2),
                _ => new MyOrg.Models.JsonNewtonSoft.Monoid_1_Other(source)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
            _Value?.Freeze();
        }

        protected override IEntityBase OnPartCopy() => new Monoid_1_Other(this);

        public Monoid_1_Other() { }
        public Monoid_1_Other(IMonoid<IOther> source) : base(source)
        {
            _Value = source.Value is null ? null : MyOrg.Models.JsonNewtonSoft.Other.CreateFrom(source.Value);
        }

        private MyOrg.Models.JsonNewtonSoft.Other? _Value;
        public MyOrg.Models.JsonNewtonSoft.Other? Value
        {
            get => _Value;
            set => _Value = IfNotFrozen(value);
        }
        MyOrg.Models.IOther? IMonoid<IOther>.Value
        {
            get => _Value;
            set => _Value = IfNotFrozen(value is null ? null : MyOrg.Models.JsonNewtonSoft.Other.CreateFrom(value));
        }


        public bool Equals(Monoid_1_Other? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Value != other.Value) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Monoid_1_Other other && Equals(other);
        public static bool operator ==(Monoid_1_Other? left, Monoid_1_Other? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Monoid_1_Other? left, Monoid_1_Other? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Value);
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
