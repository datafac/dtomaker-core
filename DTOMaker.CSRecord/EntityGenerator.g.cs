using System;
using System.Linq;
using DTOMaker.Gentime;
namespace DTOMaker.CSRecord;
#pragma warning disable CS0162 // Unreachable code detected
public sealed class EntityGenerator : EntityGeneratorBase
{
    public EntityGenerator(ILanguage language) : base(language) { }
    protected override void OnGenerate(ModelScopeEntity entity)
    {
Emit("// <auto-generated>");
Emit("// This file was generated by DTOMaker.CSRecord.");
Emit("// NuGet: https://www.nuget.org/packages/DTOMaker.CSRecord");
Emit("// Warning: Changes made to this file will be lost if re-generated.");
Emit("// </auto-generated>");
if(false) {
Emit("#pragma warning disable CS0618 // Type or member is obsolete");
Emit("#pragma warning disable CS0162 // Unreachable code detected");
}
Emit("#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required");
Emit("#nullable enable");
Emit("using DataFac.Memory;");
Emit("using DTOMaker.Runtime;");
Emit("using DTOMaker.Runtime.CSRecord;");
Emit("using System;");
Emit("");
Emit("#if NET8_0_OR_GREATER");
if (false) {
Emit("using T_MemberType_ = System.Int32;");
Emit("namespace T_MemberTypeNameSpace_");
Emit("{");
Emit("    public interface IT_MemberTypeName_ { }");
Emit("}");
Emit("namespace T_MemberTypeNameSpace_.CSRecord");
Emit("{");
Emit("    public record class T_MemberTypeName_ : EntityBase, IT_MemberTypeName_");
Emit("    {");
Emit("        private const int T_EntityId_ = 3;");
Emit("        private static readonly T_MemberTypeName_ _empty = new T_MemberTypeName_();");
Emit("        public static T_MemberTypeName_ Empty => _empty;");
Emit("        public static T_MemberTypeName_ CreateFrom(IT_MemberTypeName_ source) => throw new NotImplementedException();");
Emit("        public T_MemberTypeName_() { }");
Emit("        public T_MemberTypeName_(IT_MemberTypeName_ source) { }");
Emit("        protected override int OnGetEntityId() => T_EntityId_;");
Emit("    }");
Emit("}");
Emit("namespace T_BaseNameSpace_");
Emit("{");
Emit("    public interface IT_BaseName_ { }");
Emit("}");
Emit("namespace T_BaseNameSpace_.CSRecord");
Emit("{");
Emit("    public record class T_BaseName_ : EntityBase, IT_BaseName_, IEquatable<T_BaseName_>");
Emit("    {");
Emit("        private const int T_EntityId_ = 2;");
Emit("        private static readonly T_BaseName_ _empty = new T_BaseName_();");
Emit("        public static new T_BaseName_ Empty => _empty;");
Emit("        protected override int OnGetEntityId() => T_EntityId_;");
Emit("        public T_BaseName_() { }");
Emit("        public T_BaseName_(IT_BaseName_ source) : base(source) { }");
Emit("        public T_MemberType_ BaseField1 { get; set; }");
Emit("    }");
Emit("}");
Emit("namespace T_NameSpace_");
Emit("{");
Emit("    public interface IT_EntityName_ : T_BaseNameSpace_.IT_BaseName_");
Emit("    {");
Emit("        T_MemberType_? T_NullableScalarMemberName_ { get; }");
Emit("        T_MemberType_ T_RequiredScalarMemberName_ { get; }");
Emit("        ReadOnlyMemory<T_MemberType_> T_VectorMemberName_ { get; }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeName_? T_NullableEntityMemberName_ { get; }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeName_ T_RequiredEntityMemberName_ { get; }");
Emit("        Octets? T_NullableBinaryMemberName_ { get; }");
Emit("        Octets T_RequiredBinaryMemberName_ { get; }");
Emit("        string? T_NullableStringMemberName_ { get; }");
Emit("        string T_RequiredStringMemberName_ { get; }");
Emit("    }");
Emit("}");
}
Emit("namespace T_NameSpace_.CSRecord");
Emit("{");
    if (false) {
    }
Emit("    public partial record class T_EntityName_ : T_BaseNameSpace_.CSRecord.T_BaseName_, IT_EntityName_, IEquatable<T_EntityName_>");
Emit("    {");
Emit("        // Derived entities: T_DerivedEntityCount_");
        foreach (var derived in entity.DerivedEntities) {
        using var _ = NewScope(derived);
Emit("        // - T_EntityName_");
        }
        if (false) {
Emit("        private const string T_MemberObsoleteMessage_ = null;");
Emit("        private const bool T_MemberObsoleteIsError_ = false;");
Emit("        private const int T_MemberDefaultValue_ = 0;");
Emit("        private const int T_EntityId_ = 1;");
        }
Emit("");
Emit("        private static readonly T_EntityName_ _empty = new T_EntityName_();");
Emit("        public static new T_EntityName_ Empty => _empty;");
Emit("");
Emit("        protected override int OnGetEntityId() => T_EntityId_;");
Emit("");
Emit("        public new static T_EntityName_ CreateFrom(T_EntityName_ source)");
Emit("        {");
Emit("            if (source.IsFrozen) return source;");
Emit("            return source switch");
Emit("            {");
                foreach(var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight)) {
                using var _ = NewScope(derived);
Emit("                T_NameSpace_.CSRecord.T_EntityName_ source2 => new T_NameSpace_.CSRecord.T_EntityName_(source2),");
                }
Emit("                _ => new T_NameSpace_.CSRecord.T_EntityName_(source)");
Emit("            };");
Emit("        }");
Emit("");
Emit("        public new static T_EntityName_ CreateFrom(T_NameSpace_.IT_EntityName_ source)");
Emit("        {");
Emit("            if (source is T_EntityName_ concrete && concrete.IsFrozen) return concrete;");
Emit("            return source switch");
Emit("            {");
                foreach(var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight)) {
                using var _ = NewScope(derived);
Emit("                T_NameSpace_.IT_EntityName_ source2 => new T_NameSpace_.CSRecord.T_EntityName_(source2),");
                }
Emit("                _ => new T_NameSpace_.CSRecord.T_EntityName_(source)");
Emit("            };");
Emit("        }");
Emit("");
Emit("        public T_EntityName_() { }");
Emit("        public T_EntityName_(IT_EntityName_ source) : base(source)");
Emit("        {");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Scalar:
            if (member.IsNullable) {
Emit("            _T_NullableScalarMemberName_ = source.T_NullableScalarMemberName_;");
            } else {
Emit("            _T_RequiredScalarMemberName_ = source.T_RequiredScalarMemberName_;");
            }
            break;
            case MemberKind.Vector:
Emit("            _T_VectorMemberName_ = new ReadOnlyMemoryWrapper<T_MemberType_>(source.T_VectorMemberName_);");
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            _T_NullableEntityMemberName_ = source.T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.CSRecord.T_MemberTypeName_.CreateFrom(source.T_NullableEntityMemberName_);");
            } else {
Emit("            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.CSRecord.T_MemberTypeName_.CreateFrom(source.T_RequiredEntityMemberName_);");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            _T_NullableBinaryMemberName_ = source.T_NullableBinaryMemberName_;");
            } else {
Emit("            _T_RequiredBinaryMemberName_ = source.T_RequiredBinaryMemberName_;");
            }
            break;
            case MemberKind.String:
            if (member.IsNullable) {
Emit("            _T_NullableStringMemberName_ = source.T_NullableStringMemberName_;");
            } else {
Emit("            _T_RequiredStringMemberName_ = source.T_RequiredStringMemberName_;");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            } // foreach
Emit("        }");
Emit("");
        foreach (var member in entity.Members) {
        using var _ = NewScope(member);
        switch(member.Kind) {
        case MemberKind.Scalar:
        if (member.IsNullable) {
Emit("        private T_MemberType_? _T_NullableScalarMemberName_;");
        } else {
Emit("        private T_MemberType_ _T_RequiredScalarMemberName_ = T_MemberDefaultValue_;");
        }
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
        if (member.IsNullable) {
Emit("        public T_MemberType_? T_NullableScalarMemberName_");
Emit("        {");
Emit("            get => _T_NullableScalarMemberName_;");
Emit("            init => _T_NullableScalarMemberName_ = value;");
Emit("        }");
        } else {
Emit("        public T_MemberType_ T_RequiredScalarMemberName_");
Emit("        {");
Emit("            get => _T_RequiredScalarMemberName_;");
Emit("            init => _T_RequiredScalarMemberName_ = value;");
Emit("        }");
        }
        break;
        case MemberKind.Vector:
Emit("        private ReadOnlyMemoryWrapper<T_MemberType_> _T_VectorMemberName_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        public ReadOnlyMemory<T_MemberType_> T_VectorMemberName_");
Emit("        {");
Emit("            get => _T_VectorMemberName_.Memory;");
Emit("            init => _T_VectorMemberName_ = new ReadOnlyMemoryWrapper<T_MemberType_>(value);");
Emit("        }");
        break;
        case MemberKind.Entity:
        if (member.IsNullable) {
Emit("        private T_MemberTypeNameSpace_.CSRecord.T_MemberTypeName_? _T_NullableEntityMemberName_;");
Emit("        public T_MemberTypeNameSpace_.CSRecord.T_MemberTypeName_? T_NullableEntityMemberName_");
Emit("        {");
Emit("            get => _T_NullableEntityMemberName_;");
Emit("            init => _T_NullableEntityMemberName_ = value;");
Emit("        }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeName_? IT_EntityName_.T_NullableEntityMemberName_ => T_NullableEntityMemberName_;");
        } else {
Emit("        private T_MemberTypeNameSpace_.CSRecord.T_MemberTypeName_ _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.CSRecord.T_MemberTypeName_.Empty;");
Emit("        public T_MemberTypeNameSpace_.CSRecord.T_MemberTypeName_ T_RequiredEntityMemberName_");
Emit("        {");
Emit("            get => _T_RequiredEntityMemberName_;");
Emit("            init => _T_RequiredEntityMemberName_ = value;");
Emit("        }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeName_ IT_EntityName_.T_RequiredEntityMemberName_ => T_RequiredEntityMemberName_;");
        }
        break;
        case MemberKind.Binary:
        if (member.IsNullable) {
Emit("        private Octets? _T_NullableBinaryMemberName_;");
Emit("        public Octets? T_NullableBinaryMemberName_");
Emit("        {");
Emit("            get => _T_NullableBinaryMemberName_;");
Emit("            init => _T_NullableBinaryMemberName_ = value;");
Emit("        }");
        } else {
Emit("        private Octets _T_RequiredBinaryMemberName_ = Octets.Empty;");
Emit("        public Octets T_RequiredBinaryMemberName_");
Emit("        {");
Emit("            get => _T_RequiredBinaryMemberName_;");
Emit("            init => _T_RequiredBinaryMemberName_ = value;");
Emit("        }");
        }
        break;
        case MemberKind.String:
        if (member.IsNullable) {
Emit("        private string? _T_NullableStringMemberName_;");
Emit("        public string? T_NullableStringMemberName_");
Emit("        {");
Emit("            get => _T_NullableStringMemberName_;");
Emit("            init => _T_NullableStringMemberName_ = value;");
Emit("        }");
        } else {
Emit("        private string _T_RequiredStringMemberName_ = string.Empty;");
Emit("        public string T_RequiredStringMemberName_");
Emit("        {");
Emit("            get => _T_RequiredStringMemberName_;");
Emit("            init => _T_RequiredStringMemberName_ = value;");
Emit("        }");
        }
        break;
        default:
        Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
        break;
        } // switch
Emit("");
        }
Emit("    }");
Emit("}");
Emit("#else");
Emit("#warning This template targets .NET 8.0+");
Emit("#endif");
    }
}
