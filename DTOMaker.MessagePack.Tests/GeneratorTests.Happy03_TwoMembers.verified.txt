// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

namespace MyOrg.Models.MessagePack
{
    [MessagePackObject]
    public sealed partial class MyDTO : DTOMaker.Runtime.MessagePack.EntityBase, IMyDTO, IEquatable<MyDTO>
    {

        public new const int EntityKey = 1;

        private static MyDTO CreateEmpty()
        {
            var empty = new MyDTO();
            empty.Freeze();
            return empty;
        }
        private static readonly MyDTO _empty = CreateEmpty();
        public static MyDTO Empty => _empty;

        public new static MyDTO CreateFrom(MyDTO source)
        {
            if (source.IsFrozen)
                return source;
            else
                return new MyDTO(source);
        }

        public new static MyDTO CreateFrom(MyOrg.Models.IMyDTO source)
        {
            if (source is MyDTO concrete && concrete.IsFrozen)
                return concrete;
            else
                return new MyDTO(source);
        }

        public new static MyDTO CreateFrom(int entityKey, ReadOnlyMemory<byte> buffer)
        {
            if (entityKey == MyOrg.Models.MessagePack.MyDTO.EntityKey)
                return MessagePackSerializer.Deserialize<MyOrg.Models.MessagePack.MyDTO>(buffer, out var _);
            else
                throw new ArgumentOutOfRangeException(nameof(entityKey), entityKey, null);
        }

        protected override string OnGetEntityId() => EntityKey.ToString();

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override IFreezable OnPartCopy() => new MyDTO(this);

        [SerializationConstructor]
        public MyDTO() { }

        public MyDTO(MyDTO source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Field1 = source._Field1;
            _Field2 = source._Field2;
        }

        public MyDTO(IMyDTO source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Field1 = source.Field1;
            _Field2 = source.Field2;
        }

        [IgnoreMember]
        private Double _Field1 = default;
        [Key(1)]
        public Double Field1
        {
            get => _Field1;
            set => _Field1 = IfNotFrozen(value);
        }

        [IgnoreMember]
        private Int64 _Field2 = default;
        [Key(2)]
        public Int64 Field2
        {
            get => _Field2;
            set => _Field2 = IfNotFrozen(value);
        }


        public bool Equals(MyDTO? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Field1 != other.Field1) return false;
            if (_Field2 != other.Field2) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is MyDTO other && Equals(other);
        public static bool operator ==(MyDTO? left, MyDTO? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(MyDTO? left, MyDTO? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Field1);
            result.Add(_Field2);
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
