// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using DataFac.Runtime;
using MessagePack;
using System;

namespace MyOrg.Models.MessagePack
{
    [MessagePackObject]
    public partial class RightTriangle : Triangle, IRightTriangle, IFreezable
    {
        // Derived entities: 0

        public new const int EntityTag = 4;

        public new static RightTriangle Create(int entityTag, ReadOnlyMemory<byte> buffer)
        {
            int bytesRead;
            return entityTag switch
            {
                _ => throw new ArgumentOutOfRangeException(nameof(entityTag), entityTag, null)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
            // todo freezable members
        }

        protected override IFreezable OnPartCopy() => new RightTriangle(this);

        public RightTriangle() { }
        public RightTriangle(IRightTriangle source, bool frozen = false) : base(source, frozen)
        {
            _Length = source.Length;
            _Height = source.Height;
        }

        [IgnoreMember]
        private Double _Length = default;
        [Key(1)]
        public Double Length
        {
            get => _Length;
            set => _Length = IfNotFrozen(ref value);
        }

        [IgnoreMember]
        private Double _Height = default;
        [Key(2)]
        public Double Height
        {
            get => _Height;
            set => _Height = IfNotFrozen(ref value);
        }


        public bool Equals(RightTriangle? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_Length.Equals(other.Length)) return false;
            if (!_Height.Equals(other.Height)) return false;
            return true;
        }

        public override bool Equals(object? obj)
        {
            return obj is RightTriangle other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Length);
            result.Add(_Height);
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
