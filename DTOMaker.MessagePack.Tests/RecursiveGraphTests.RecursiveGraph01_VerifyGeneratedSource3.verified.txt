// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

namespace MyOrg.Models.MessagePack
{
    [MessagePackObject]
    [Union(BooleanNode.EntityId, typeof(BooleanNode))]
    [Union(DoubleNode.EntityId, typeof(DoubleNode))]
    [Union(Int64Node.EntityId, typeof(Int64Node))]
    [Union(StringNode.EntityId, typeof(StringNode))]
    public abstract partial class Node : DTOMaker.Runtime.MessagePack.EntityBase, INode, IEquatable<Node>
    {
        // Derived entities: 5
        // - BooleanNode
        // - DoubleNode
        // - Int64Node
        // - NumericNode (abstract)
        // - StringNode

        public new const int EntityId = 1;

        public new static Node CreateFrom(Node source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.MessagePack.DoubleNode source2 => new MyOrg.Models.MessagePack.DoubleNode(source2),
                MyOrg.Models.MessagePack.Int64Node source2 => new MyOrg.Models.MessagePack.Int64Node(source2),
                MyOrg.Models.MessagePack.BooleanNode source2 => new MyOrg.Models.MessagePack.BooleanNode(source2),
                MyOrg.Models.MessagePack.StringNode source2 => new MyOrg.Models.MessagePack.StringNode(source2),
                _ => throw new ArgumentException($"Unexpected type: {source.GetType().Name}", nameof(source))
            };
        }

        public new static Node CreateFrom(MyOrg.Models.INode source)
        {
            if (source is Node concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IDoubleNode source2 => new MyOrg.Models.MessagePack.DoubleNode(source2),
                MyOrg.Models.IInt64Node source2 => new MyOrg.Models.MessagePack.Int64Node(source2),
                MyOrg.Models.IBooleanNode source2 => new MyOrg.Models.MessagePack.BooleanNode(source2),
                MyOrg.Models.IStringNode source2 => new MyOrg.Models.MessagePack.StringNode(source2),
                _ => throw new ArgumentException($"Unexpected type: {source.GetType().Name}", nameof(source))
            };
        }

        public new static Node CreateFrom(int entityId, ReadOnlyMemory<byte> buffer)
        {
            return entityId switch
            {
                MyOrg.Models.MessagePack.BooleanNode.EntityId => buffer.DeserializeFromMessagePack<MyOrg.Models.MessagePack.BooleanNode>(),
                MyOrg.Models.MessagePack.DoubleNode.EntityId => buffer.DeserializeFromMessagePack<MyOrg.Models.MessagePack.DoubleNode>(),
                MyOrg.Models.MessagePack.Int64Node.EntityId => buffer.DeserializeFromMessagePack<MyOrg.Models.MessagePack.Int64Node>(),
                MyOrg.Models.MessagePack.StringNode.EntityId => buffer.DeserializeFromMessagePack<MyOrg.Models.MessagePack.StringNode>(),
                _ => throw new ArgumentOutOfRangeException(nameof(entityId), entityId, null)
            };
        }

        protected override int OnGetEntityId() => 1;

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected Node() { }

        protected Node(Node source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Key = source._Key;
        }

        public Node(INode source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Key = source.Key;
        }

        [IgnoreMember]
        private string _Key = string.Empty;
        [Key(1)]
        public string Key
        {
            get => _Key;
            set => _Key = IfNotFrozen(value);
        }


        public bool Equals(Node? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!string.Equals(_Key, other._Key)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Node other && Equals(other);
        public static bool operator ==(Node? left, Node? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Node? left, Node? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Key);
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
