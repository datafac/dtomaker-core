// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#nullable enable
using DataFac.Runtime;
using MessagePack;
using System;
using System.Runtime.CompilerServices;

namespace DTOMaker.Common.MessagePack
{
    [MessagePackObject]
    [Union(MyOrg.Models.Equilateral.EntityKey, typeof(MyOrg.Models.Equilateral))]
    [Union(MyOrg.Models.Rectangle.EntityKey, typeof(MyOrg.Models.Rectangle))]
    [Union(MyOrg.Models.RightTriangle.EntityKey, typeof(MyOrg.Models.RightTriangle))]
    [Union(MyOrg.Models.Square.EntityKey, typeof(MyOrg.Models.Square))]
    public abstract class EntityBase : IFreezable, IEquatable<EntityBase>
    {
        public static EntityBase Create(int entityKey, ReadOnlyMemory<byte> buffer)
        {
            return entityKey switch
            {
                MyOrg.Models.Equilateral.EntityKey => MessagePackSerializer.Deserialize<MyOrg.Models.Equilateral>(buffer, out _),
                MyOrg.Models.Rectangle.EntityKey => MessagePackSerializer.Deserialize<MyOrg.Models.Rectangle>(buffer, out _),
                MyOrg.Models.RightTriangle.EntityKey => MessagePackSerializer.Deserialize<MyOrg.Models.RightTriangle>(buffer, out _),
                MyOrg.Models.Square.EntityKey => MessagePackSerializer.Deserialize<MyOrg.Models.Square>(buffer, out _),
                _ => throw new ArgumentOutOfRangeException(nameof(entityKey), entityKey, null)
            };
        }

        public EntityBase() { }
        public EntityBase(object? notUsed, bool frozen)
        {
            _frozen = frozen;
        }
        [IgnoreMember]
        private volatile bool _frozen;
        [IgnoreMember]
        public bool IsFrozen => _frozen;
        protected virtual void OnFreeze() { }
        public void Freeze()
        {
            if (_frozen) return;
            _frozen = true;
            OnFreeze();
        }
        protected abstract IFreezable OnPartCopy();
        public IFreezable PartCopy() => OnPartCopy();

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void ThrowIsFrozenException(string? methodName) => throw new InvalidOperationException($"Cannot call {methodName} when frozen.");

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected ref T IfNotFrozen<T>(ref T value, [CallerMemberName] string? methodName = null)
        {
            if (_frozen) ThrowIsFrozenException(methodName);
            return ref value;
        }

        public bool Equals(EntityBase? other) => true;
        public override bool Equals(object? obj) => obj is EntityBase;
        public override int GetHashCode() => 0;
    }
}
