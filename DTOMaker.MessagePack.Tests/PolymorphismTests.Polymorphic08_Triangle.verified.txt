// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using DataFac.Runtime;
using MessagePack;
using System;

namespace MyOrg.Models.MessagePack
{
    [MessagePackObject]
    [Union(Equilateral.EntityTag, typeof(Equilateral))]
    [Union(RightTriangle.EntityTag, typeof(RightTriangle))]
    public abstract partial class Triangle { }
    public partial class Triangle : Polygon, ITriangle, IEquatable<Triangle>
    {
        // Derived entities: 2
        // - Equilateral
        // - RightTriangle

        public new const int EntityTag = 2;

        public new static Triangle Create(int entityTag, ReadOnlyMemory<byte> buffer)
        {
            return entityTag switch
            {
                Equilateral.EntityTag => MessagePackSerializer.Deserialize<Equilateral>(buffer, out var _),
                RightTriangle.EntityTag => MessagePackSerializer.Deserialize<RightTriangle>(buffer, out var _),
                _ => throw new ArgumentOutOfRangeException(nameof(entityTag), entityTag, null)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
            // todo freezable members
        }

        public Triangle() { }
        public Triangle(ITriangle source, bool frozen = false) : base(source, frozen)
        {
        }


        public bool Equals(Triangle? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Triangle other && Equals(other);
        public static bool operator ==(Triangle? left, Triangle? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Triangle? left, Triangle? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
