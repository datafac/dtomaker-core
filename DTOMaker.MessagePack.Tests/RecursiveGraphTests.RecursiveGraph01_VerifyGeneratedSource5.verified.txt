// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

namespace MyOrg.Models.MessagePack
{
    [MessagePackObject]
    public sealed partial class StringNode : MyOrg.Models.MessagePack.Node, IStringNode, IEquatable<StringNode>
    {

        public new const int EntityId = 2;

        private static StringNode CreateEmpty()
        {
            var empty = new StringNode();
            empty.Freeze();
            return empty;
        }
        private static readonly StringNode _empty = CreateEmpty();
        public static new StringNode Empty => _empty;

        public new static StringNode CreateFrom(StringNode source)
        {
            if (source.IsFrozen)
                return source;
            else
                return new StringNode(source);
        }

        public new static StringNode CreateFrom(MyOrg.Models.IStringNode source)
        {
            if (source is StringNode concrete && concrete.IsFrozen)
                return concrete;
            else
                return new StringNode(source);
        }

        public new static StringNode CreateFrom(int entityId, ReadOnlyMemory<byte> buffer)
        {
            if (entityId == MyOrg.Models.MessagePack.StringNode.EntityId)
                return MessagePackSerializer.Deserialize<MyOrg.Models.MessagePack.StringNode>(buffer, out var _);
            else
                throw new ArgumentOutOfRangeException(nameof(entityId), entityId, null);
        }

        protected override int OnGetEntityId() => 2;

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override IEntityBase OnPartCopy() => new StringNode(this);

        [SerializationConstructor]
        public StringNode() { }

        public StringNode(StringNode source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Value = source._Value;
        }

        public StringNode(IStringNode source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Value = source.Value;
        }

        [IgnoreMember]
        private string _Value = string.Empty;
        [Key(101)]
        public string Value
        {
            get => _Value;
            set => _Value = IfNotFrozen(value);
        }


        public bool Equals(StringNode? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!base.Equals(other)) return false;
            if (!string.Equals(_Value, other._Value)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is StringNode other && Equals(other);
        public static bool operator ==(StringNode? left, StringNode? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(StringNode? left, StringNode? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Value);
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
