// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

namespace MyOrg.Models.MessagePack
{
    [MessagePackObject]
    public sealed partial class Equilateral : MyOrg.Models.MessagePack.Triangle, IEquilateral, IEquatable<Equilateral>
    {

        public new const int EntityKey = 3;

        public new static Equilateral CreateFrom(Equilateral source)
        {
            if (source.IsFrozen)
                return source;
            else
                return new Equilateral(source);
        }

        public new static Equilateral CreateFrom(MyOrg.Models.IEquilateral source)
        {
            if (source is Equilateral concrete && concrete.IsFrozen)
                return concrete;
            else
                return new Equilateral(source);
        }

        public new static Equilateral CreateFrom(int entityKey, ReadOnlyMemory<byte> buffer)
        {
            if (entityKey == MyOrg.Models.MessagePack.Equilateral.EntityKey)
                return MessagePackSerializer.Deserialize<MyOrg.Models.MessagePack.Equilateral>(buffer, out var _);
            else
                throw new ArgumentOutOfRangeException(nameof(entityKey), entityKey, null);
        }

        protected override string OnGetEntityId() => EntityKey.ToString();

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override IFreezable OnPartCopy() => new Equilateral(this);

        [SerializationConstructor]
        public Equilateral() { }

        public Equilateral(Equilateral source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Length = source._Length;
        }

        public Equilateral(IEquilateral source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Length = source.Length;
        }

        [IgnoreMember]
        private Double _Length = default;
        [Key(201)]
        public Double Length
        {
            get => _Length;
            set => _Length = IfNotFrozen(ref value);
        }


        public bool Equals(Equilateral? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Length != other.Length) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Equilateral other && Equals(other);
        public static bool operator ==(Equilateral? left, Equilateral? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Equilateral? left, Equilateral? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Length);
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
