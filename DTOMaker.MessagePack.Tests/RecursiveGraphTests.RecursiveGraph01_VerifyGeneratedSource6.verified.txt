// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

namespace MyOrg.Models.MessagePack
{
    [MessagePackObject]
    public sealed partial class Tree : DTOMaker.Runtime.MessagePack.EntityBase, ITree, IEquatable<Tree>
    {

        public new const int EntityKey = 10;

        private static Tree CreateEmpty()
        {
            var empty = new Tree();
            empty.Freeze();
            return empty;
        }
        private static readonly Tree _empty = CreateEmpty();
        public static Tree Empty => _empty;

        public new static Tree CreateFrom(Tree source)
        {
            if (source.IsFrozen)
                return source;
            else
                return new Tree(source);
        }

        public new static Tree CreateFrom(MyOrg.Models.ITree source)
        {
            if (source is Tree concrete && concrete.IsFrozen)
                return concrete;
            else
                return new Tree(source);
        }

        public new static Tree CreateFrom(int entityKey, ReadOnlyMemory<byte> buffer)
        {
            if (entityKey == MyOrg.Models.MessagePack.Tree.EntityKey)
                return MessagePackSerializer.Deserialize<MyOrg.Models.MessagePack.Tree>(buffer, out var _);
            else
                throw new ArgumentOutOfRangeException(nameof(entityKey), entityKey, null);
        }

        protected override string OnGetEntityId() => EntityKey.ToString();

        protected override void OnFreeze()
        {
            base.OnFreeze();
            _Left?.Freeze();
            _Right?.Freeze();
            _Node?.Freeze();
        }

        protected override IFreezable OnPartCopy() => new Tree(this);

        [SerializationConstructor]
        public Tree() { }

        public Tree(Tree source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Left = source._Left is null ? null : MyOrg.Models.MessagePack.Tree.CreateFrom(source._Left);
            _Right = source._Right is null ? null : MyOrg.Models.MessagePack.Tree.CreateFrom(source._Right);
            _Node = source._Node is null ? null : MyOrg.Models.MessagePack.Node.CreateFrom(source._Node);
        }

        public Tree(ITree source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Left = source.Left is null ? null : MyOrg.Models.MessagePack.Tree.CreateFrom(source.Left);
            _Right = source.Right is null ? null : MyOrg.Models.MessagePack.Tree.CreateFrom(source.Right);
            _Node = source.Node is null ? null : MyOrg.Models.MessagePack.Node.CreateFrom(source.Node);
        }

        [IgnoreMember]
        private MyOrg.Models.MessagePack.Tree? _Left;
        [Key(1)]
        public MyOrg.Models.MessagePack.Tree? Left
        {
            get => _Left;
            set => _Left = IfNotFrozen(value);
        }
        MyOrg.Models.ITree? ITree.Left
        {
            get => _Left;
            set
            {
                ThrowIfFrozen();
                _Left = value is null ? null : MyOrg.Models.MessagePack.Tree.CreateFrom(value);
            }
        }

        [IgnoreMember]
        private MyOrg.Models.MessagePack.Tree? _Right;
        [Key(2)]
        public MyOrg.Models.MessagePack.Tree? Right
        {
            get => _Right;
            set => _Right = IfNotFrozen(value);
        }
        MyOrg.Models.ITree? ITree.Right
        {
            get => _Right;
            set
            {
                ThrowIfFrozen();
                _Right = value is null ? null : MyOrg.Models.MessagePack.Tree.CreateFrom(value);
            }
        }

        [IgnoreMember]
        private MyOrg.Models.MessagePack.Node? _Node;
        [Key(3)]
        public MyOrg.Models.MessagePack.Node? Node
        {
            get => _Node;
            set => _Node = IfNotFrozen(value);
        }
        MyOrg.Models.INode? ITree.Node
        {
            get => _Node;
            set
            {
                ThrowIfFrozen();
                _Node = value is null ? null : MyOrg.Models.MessagePack.Node.CreateFrom(value);
            }
        }


        public bool Equals(Tree? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Left != other.Left) return false;
            if (_Right != other.Right) return false;
            if (_Node != other.Node) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Tree other && Equals(other);
        public static bool operator ==(Tree? left, Tree? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Tree? left, Tree? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Left?.GetHashCode() ?? 0);
            result.Add(_Right?.GetHashCode() ?? 0);
            result.Add(_Node?.GetHashCode() ?? 0);
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
