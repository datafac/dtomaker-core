// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

namespace MyOrg.Models.MessagePack
{
    [MessagePackObject]
    [Union(MyDTO.EntityId, typeof(MyDTO))]
    public abstract partial class Monoid_1_Decimal : DTOMaker.Runtime.MessagePack.EntityBase, IMonoid<Decimal>, IEquatable<Monoid_1_Decimal>
    {
        // Derived entities: 1
        // - MyDTO

        public new const int EntityId = 10048;

        public new static Monoid_1_Decimal CreateFrom(Monoid_1_Decimal source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.MessagePack.MyDTO source2 => new MyOrg.Models.MessagePack.MyDTO(source2),
                _ => throw new ArgumentException($"Unexpected type: {source.GetType().Name}", nameof(source))
            };
        }

        public new static Monoid_1_Decimal CreateFrom(MyOrg.Models.IMonoid<Decimal> source)
        {
            if (source is Monoid_1_Decimal concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IMyDTO source2 => new MyOrg.Models.MessagePack.MyDTO(source2),
                _ => throw new ArgumentException($"Unexpected type: {source.GetType().Name}", nameof(source))
            };
        }

        public new static Monoid_1_Decimal CreateFrom(int entityId, ReadOnlyMemory<byte> buffer)
        {
            return entityId switch
            {
                MyOrg.Models.MessagePack.MyDTO.EntityId => MessagePackSerializer.Deserialize<MyOrg.Models.MessagePack.MyDTO>(buffer, out var _),
                _ => throw new ArgumentOutOfRangeException(nameof(entityId), entityId, null)
            };
        }

        protected override int OnGetEntityId() => 10048;

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected Monoid_1_Decimal() { }

        protected Monoid_1_Decimal(Monoid_1_Decimal source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Value = source._Value;
        }

        public Monoid_1_Decimal(IMonoid<Decimal> source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Value = source.Value;
        }

        [IgnoreMember]
        private Decimal _Value = default;
        [Key(1)]
        public Decimal Value
        {
            get => _Value;
            set => _Value = IfNotFrozen(value);
        }


        public bool Equals(Monoid_1_Decimal? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Value != other.Value) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Monoid_1_Decimal other && Equals(other);
        public static bool operator ==(Monoid_1_Decimal? left, Monoid_1_Decimal? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Monoid_1_Decimal? left, Monoid_1_Decimal? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Value);
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
