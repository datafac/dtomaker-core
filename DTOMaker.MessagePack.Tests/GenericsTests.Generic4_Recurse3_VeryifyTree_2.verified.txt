// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

namespace MyOrg.Models.MessagePack
{
    [MessagePackObject]
    [Union(MyTree.EntityId, typeof(MyTree))]
    public abstract partial class Tree_2_String_Octets : DTOMaker.Runtime.MessagePack.EntityBase, ITree<String, Octets>, IEquatable<Tree_2_String_Octets>
    {
        // Derived entities: 1
        // - MyTree

        public new const int EntityId = 10365494;

        public new static Tree_2_String_Octets CreateFrom(Tree_2_String_Octets source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.MessagePack.MyTree source2 => new MyOrg.Models.MessagePack.MyTree(source2),
                _ => throw new ArgumentException($"Unexpected type: {source.GetType().Name}", nameof(source))
            };
        }

        public new static Tree_2_String_Octets CreateFrom(MyOrg.Models.ITree<String, Octets> source)
        {
            if (source is Tree_2_String_Octets concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IMyTree source2 => new MyOrg.Models.MessagePack.MyTree(source2),
                _ => throw new ArgumentException($"Unexpected type: {source.GetType().Name}", nameof(source))
            };
        }

        public new static Tree_2_String_Octets CreateFrom(int entityId, ReadOnlyMemory<byte> buffer)
        {
            return entityId switch
            {
                MyOrg.Models.MessagePack.MyTree.EntityId => MessagePackSerializer.Deserialize<MyOrg.Models.MessagePack.MyTree>(buffer, out var _),
                _ => throw new ArgumentOutOfRangeException(nameof(entityId), entityId, null)
            };
        }

        protected override int OnGetEntityId() => 10365494;

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected Tree_2_String_Octets() { }

        protected Tree_2_String_Octets(Tree_2_String_Octets source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Count = source._Count;
            _Key = source._Key;
            _Value = source._Value;
        }

        public Tree_2_String_Octets(ITree<String, Octets> source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            _Count = source.Count;
            _Key = source.Key;
            _Value = source.Value.Memory;
        }

        [IgnoreMember]
        private Int32 _Count = default;
        [Key(1)]
        public Int32 Count
        {
            get => _Count;
            set => _Count = IfNotFrozen(value);
        }

        [IgnoreMember]
        private string _Key = string.Empty;
        [Key(2)]
        public string Key
        {
            get => _Key;
            set => _Key = IfNotFrozen(value);
        }

        [IgnoreMember]
        private ReadOnlyMemory<byte> _Value = ReadOnlyMemory<byte>.Empty;
        [Key(3)]
        public ReadOnlyMemory<byte> Value
        {
            get => _Value;
            set => _Value = IfNotFrozen(value);
        }
        Octets ITree<String, Octets>.Value
        {
            get => Octets.UnsafeWrap(_Value);
        }


        public bool Equals(Tree_2_String_Octets? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Count != other.Count) return false;
            if (!string.Equals(_Key, other._Key)) return false;
            if (!BinaryValuesAreEqual(_Value, other. _Value)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Tree_2_String_Octets other && Equals(other);
        public static bool operator ==(Tree_2_String_Octets? left, Tree_2_String_Octets? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Tree_2_String_Octets? left, Tree_2_String_Octets? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Count);
            result.Add(_Key);
            var span_Value = _Value.Span;
            result.Add(span_Value.Length);
#if NET8_0_OR_GREATER
            result.AddBytes(span_Value);
#else
            for (int i = 0; i < span_Value.Length; i++)
            {
                result.Add(span_Value[i]);
            }
#endif
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
