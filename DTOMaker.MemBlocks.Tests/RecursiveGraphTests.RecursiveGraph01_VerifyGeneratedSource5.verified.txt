// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;
using DataFac.Storage;

namespace MyOrg.Models.MemBlocks
{
    public partial class StringNode : MyOrg.Models.MemBlocks.Node, IStringNode, IEquatable<StringNode>
    {
        // Derived entities: 0

        private const int ClassHeight = 2;
        private const int BlockLength = 256;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;

        public new const string EntityId = "MyOrg.Models.StringNode";

        public new static StringNode CreateFrom(StringNode source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.StringNode(source)
            };
        }

        public new static StringNode CreateFrom(MyOrg.Models.IStringNode source)
        {
            if (source is StringNode concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.StringNode(source)
            };
        }

        public new static StringNode CreateFrom(ReadOnlyMemory<byte> buffer)
        {
            var entityId = DataFac.MemBlocks.Protocol.ParseEntityId(buffer);
            var buffers = DataFac.MemBlocks.Protocol.SplitBuffers(buffer);
            return entityId switch
            {
                _ => new MyOrg.Models.MemBlocks.StringNode(buffers)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override void OnGetBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnGetBuffers(buffers);
            var block = IsFrozen ? _readonlyBlock : _writableBlock.ToArray();
            buffers[ClassHeight - 1] = block;
        }
        protected override void OnLoadBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnLoadBuffers(buffers);
            ReadOnlyMemory<byte> source = buffers[ClassHeight - 1];
            if (source.Length > BlockLength)
            {
                source.Slice(0, BlockLength).CopyTo(_writableBlock);
            }
            else
            {
                source.CopyTo(_writableBlock);
            }
        }

        protected override IFreezable OnPartCopy() => new StringNode(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0   256        String  LE    Value
        // ------------------------------------------------------------

        public StringNode()
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
        }

        public StringNode(StringNode source) : base(source)
        {
            _writableBlock = source._readonlyBlock.ToArray();
            _readonlyBlock = _writableBlock;
        }

        public StringNode(IStringNode source) : base(source)
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
            this.Value = source.Value;
        }

        public StringNode(ReadOnlyMemory<byte>[] buffers) : base(buffers)
        {
            ReadOnlyMemory<byte> source = buffers[ClassHeight - 1];
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source; // todo? keep extra?
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.CopyTo(memory);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
        }

        public String Value
        {
            get
            {
                return Codec_String_LE.ReadFromSpan(_readonlyBlock.Slice(0, 256).Span);
            }

            set
            {
                ThrowIfFrozen();
                Codec_String_LE.WriteToSpan(_writableBlock.Slice(0, 256).Span, value);
            }
        }


        public bool Equals(StringNode? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyBlock.Span.SequenceEqual(other._readonlyBlock.Span)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is StringNode other && Equals(other);
        public static bool operator ==(StringNode? left, StringNode? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(StringNode? left, StringNode? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_readonlyBlock.Length);
#if NET8_0_OR_GREATER
            result.AddBytes(_readonlyBlock.Span);
#else
            var byteSpan = _readonlyBlock.Span;
            for (int i = 0; i < byteSpan.Length; i++)
            {
                result.Add(byteSpan[i]);
            }
#endif
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
