// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using DataFac.Memory;
using DataFac.Storage;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;

namespace MyOrg.Models.MemBlocks
{
    public partial class Pair_2_Int64_String : DTOMaker.Runtime.MemBlocks.EntityBase, IPair<Int64, String>, IEquatable<Pair_2_Int64_String>
    {
        // Derived entities: 1
        // - MyDTO2

        private const long BlockStructureCode = 129L;
        private const int ClassHeight = 1;
        private const int BlockLength = 128;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        private static readonly BlockHeader _header = BlockHeader.CreateNew(10362316, BlockStructureCode);

        public new static Pair_2_Int64_String CreateFrom(Pair_2_Int64_String source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.MemBlocks.MyDTO2 source2 => new MyOrg.Models.MemBlocks.MyDTO2(source2),
                _ => new MyOrg.Models.MemBlocks.Pair_2_Int64_String(source)
            };
        }

        public new static Pair_2_Int64_String CreateFrom(MyOrg.Models.IPair<Int64, String> source)
        {
            if (source is Pair_2_Int64_String concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IMyDTO2 source2 => new MyOrg.Models.MemBlocks.MyDTO2(source2),
                _ => new MyOrg.Models.MemBlocks.Pair_2_Int64_String(source)
            };
        }

        public new static Pair_2_Int64_String CreateFrom(ReadOnlySequence<byte> buffers)
        {
            SourceBlocks blocks = SourceBlocks.ParseFrom(buffers);
            return blocks.Header.EntityId switch
            {
                2 => new MyOrg.Models.MemBlocks.MyDTO2(blocks),
                _ => new MyOrg.Models.MemBlocks.Pair_2_Int64_String(blocks)
            };
        }

        protected override int OnGetEntityId() => 10362316;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override ReadOnlySequenceBuilder<byte> OnSequenceBuilder(ReadOnlySequenceBuilder<byte> builder) => base.OnSequenceBuilder(builder).Append(_readonlyLocalBlock);
        protected override IEntityBase OnPartCopy() => new Pair_2_Int64_String(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
            await Item2_Pack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
            await Item2_Unpack(dataStore);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0     8        Int64   LE    Item1
        //     2    64    64        String  LE    Item2
        // ------------------------------------------------------------

        protected Pair_2_Int64_String(BlockHeader header) : base(header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }
        public Pair_2_Int64_String() : base(_header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }

        protected Pair_2_Int64_String(BlockHeader header, Pair_2_Int64_String source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            this.Item1 = source.Item1;
            _Item2 = source._Item2;
        }
        public Pair_2_Int64_String(Pair_2_Int64_String source) : this(_header, source) { }

        protected Pair_2_Int64_String(BlockHeader header, IPair<Int64, String> source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            this.Item1 = source.Item1;
            _Item2 = source.Item2;
        }
        public Pair_2_Int64_String(IPair<Int64, String> source) : this(_header, source) { }

        protected Pair_2_Int64_String(BlockHeader header, SourceBlocks sourceBlocks) : base(header, sourceBlocks)
        {
            var sourceBlock = sourceBlocks.Blocks.Span[ClassHeight];
            if (sourceBlock.Length < BlockLength)
            {
                // source too small - allocate new
                _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
                sourceBlock.CopyTo(_writableLocalBlock);
            }
            else
            {
                _readonlyLocalBlock = sourceBlock;
                _writableLocalBlock = Memory<byte>.Empty;
            }
        }
        internal Pair_2_Int64_String(SourceBlocks sourceBlocks) : this(_header, sourceBlocks) { }
        public Pair_2_Int64_String(ReadOnlySequence<byte> buffers) : this(_header, SourceBlocks.ParseFrom(buffers)) { }

        public Int64 Item1
        {
            get => Codec_Int64_LE.ReadFromSpan(_readonlyLocalBlock.Slice(0, 8).Span);
            set => Codec_Int64_LE.WriteToSpan(_writableLocalBlock.Slice(0, 8).Span, IfNotFrozen(value));
        }

        private async ValueTask Item2_Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = default;
            var buffer = System.Text.Encoding.UTF8.GetBytes(_Item2);
            blobId = await dataStore.PutBlob(buffer);
            blobId.WriteTo(_writableLocalBlock.Slice(64, 64).Span);
        }
        private async ValueTask Item2_Unpack(IDataStore dataStore)
        {
            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(64, 64));
            var blob = await dataStore.GetBlob(blobId);
#if NET8_0_OR_GREATER
            _Item2 = blob is null ? string.Empty : System.Text.Encoding.UTF8.GetString(blob.Value.Span);
#else
            _Item2 = blob is null ? string.Empty : System.Text.Encoding.UTF8.GetString(blob.Value.ToArray());
#endif
        }
        private string _Item2 = string.Empty;
        public string Item2
        {
            get => IfUnpacked(_Item2);
            set => _Item2 = IfNotFrozen(value);
        }


        public bool Equals(Pair_2_Int64_String? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyLocalBlock.Span.SequenceEqual(other._readonlyLocalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is Pair_2_Int64_String other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(Pair_2_Int64_String? left, Pair_2_Int64_String? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Pair_2_Int64_String? left, Pair_2_Int64_String? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
