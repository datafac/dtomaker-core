// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;
using DataFac.Storage;

namespace MyOrg.Models.MemBlocks
{
    public partial class Header : DTOMaker.Runtime.MemBlocks.EntityBase, IHeader, IEquatable<Header>
    {
        // Derived entities: 0

        private const long BlockStructureCode = 97L;
        private const int ClassHeight = 1;
        private const int BlockOffset = 64;
        private const int BlockLength = 64;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        public new const string EntityId = "01234567-89ab-cdef-0123-456789abcdef";
        private static readonly Guid EntityGuid = new Guid("01234567-89ab-cdef-0123-456789abcdef");
        private static readonly BlockHeader _header = BlockHeader.CreateNew(BlockStructureCode, EntityGuid);

        public new static Header CreateFrom(Header source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.Header(source)
            };
        }

        public new static Header CreateFrom(MyOrg.Models.IHeader source)
        {
            if (source is Header concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.Header(source)
            };
        }

        public new static Header CreateFrom(ReadOnlyMemory<byte> buffer)
        {
            BlockHeader header = BlockHeader.ParseFrom(buffer);
            string entityIdStr = header.EntityGuid.ToString("D");
            return entityIdStr switch
            {
                _ => new MyOrg.Models.MemBlocks.Header(buffer)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;

        protected override IFreezable OnPartCopy() => new Header(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0     1        Byte    LE    MarkerByte0
        //     2     1     1        Byte    LE    MarkerByte1
        //     3     2     1        Byte    LE    HeaderMajorVersion
        //     4     3     1        Byte    LE    HeaderMinorVersion
        //     5     4     1        Byte    LE    SpareByte0
        //     6     5     1        Byte    LE    SpareByte1
        //     7     6     1        Byte    LE    SpareByte2
        //     8     7     1        Byte    LE    SpareByte3
        //     9     8     1        Byte    LE    ClassHeight
        //    10     9     1        Byte    LE    BlockSize1
        //    11    10     1        Byte    LE    BlockSize2
        //    12    11     1        Byte    LE    BlockSize3
        //    13    12     1        Byte    LE    BlockSize4
        //    14    13     1        Byte    LE    BlockSize5
        //    15    14     1        Byte    LE    BlockSize6
        //    16    15     1        Byte    LE    BlockSize7
        //    17    16    16        Guid    LE    EntityGuid
        //    18    32    16        Guid    LE    SpareGuid0
        //    19    48    16        Guid    LE    SpareGuid1
        // ------------------------------------------------------------

        protected Header(BlockHeader header) : base(header)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }
        public Header() : base(_header)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected Header(BlockHeader header, Header source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }
        public Header(Header source) : base(_header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected Header(BlockHeader header, IHeader source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
            this.MarkerByte0 = source.MarkerByte0;
            this.MarkerByte1 = source.MarkerByte1;
            this.HeaderMajorVersion = source.HeaderMajorVersion;
            this.HeaderMinorVersion = source.HeaderMinorVersion;
            this.SpareByte0 = source.SpareByte0;
            this.SpareByte1 = source.SpareByte1;
            this.SpareByte2 = source.SpareByte2;
            this.SpareByte3 = source.SpareByte3;
            this.ClassHeight = source.ClassHeight;
            this.BlockSize1 = source.BlockSize1;
            this.BlockSize2 = source.BlockSize2;
            this.BlockSize3 = source.BlockSize3;
            this.BlockSize4 = source.BlockSize4;
            this.BlockSize5 = source.BlockSize5;
            this.BlockSize6 = source.BlockSize6;
            this.BlockSize7 = source.BlockSize7;
            this.EntityGuid = source.EntityGuid;
            this.SpareGuid0 = source.SpareGuid0;
            this.SpareGuid1 = source.SpareGuid1;
        }

        public Header(IHeader source) : base(_header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
            this.MarkerByte0 = source.MarkerByte0;
            this.MarkerByte1 = source.MarkerByte1;
            this.HeaderMajorVersion = source.HeaderMajorVersion;
            this.HeaderMinorVersion = source.HeaderMinorVersion;
            this.SpareByte0 = source.SpareByte0;
            this.SpareByte1 = source.SpareByte1;
            this.SpareByte2 = source.SpareByte2;
            this.SpareByte3 = source.SpareByte3;
            this.ClassHeight = source.ClassHeight;
            this.BlockSize1 = source.BlockSize1;
            this.BlockSize2 = source.BlockSize2;
            this.BlockSize3 = source.BlockSize3;
            this.BlockSize4 = source.BlockSize4;
            this.BlockSize5 = source.BlockSize5;
            this.BlockSize6 = source.BlockSize6;
            this.BlockSize7 = source.BlockSize7;
            this.EntityGuid = source.EntityGuid;
            this.SpareGuid0 = source.SpareGuid0;
            this.SpareGuid1 = source.SpareGuid1;
        }

        protected Header(BlockHeader header, ReadOnlyMemory<byte> buffer) : base(header, buffer)
        {
            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);
            _writableLocalBlock = Memory<byte>.Empty;
        }
        public Header(ReadOnlyMemory<byte> buffer) : base(_header, buffer)
        {
            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);
            _writableLocalBlock = Memory<byte>.Empty;
        }

        public Byte MarkerByte0
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(0, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(0, 1).Span, IfNotFrozen(value));
        }

        public Byte MarkerByte1
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(1, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(1, 1).Span, IfNotFrozen(value));
        }

        public Byte HeaderMajorVersion
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(2, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(2, 1).Span, IfNotFrozen(value));
        }

        public Byte HeaderMinorVersion
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(3, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(3, 1).Span, IfNotFrozen(value));
        }

        public Byte SpareByte0
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(4, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(4, 1).Span, IfNotFrozen(value));
        }

        public Byte SpareByte1
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(5, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(5, 1).Span, IfNotFrozen(value));
        }

        public Byte SpareByte2
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(6, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(6, 1).Span, IfNotFrozen(value));
        }

        public Byte SpareByte3
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(7, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(7, 1).Span, IfNotFrozen(value));
        }

        public Byte ClassHeight
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(8, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(8, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize1
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(9, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(9, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize2
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(10, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(10, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize3
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(11, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(11, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize4
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(12, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(12, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize5
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(13, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(13, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize6
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(14, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(14, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize7
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(15, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(15, 1).Span, IfNotFrozen(value));
        }

        public Guid EntityGuid
        {
            get => Codec_Guid_LE.ReadFromSpan(_readonlyLocalBlock.Slice(16, 16).Span);
            set => Codec_Guid_LE.WriteToSpan(_writableLocalBlock.Slice(16, 16).Span, IfNotFrozen(value));
        }

        public Guid SpareGuid0
        {
            get => Codec_Guid_LE.ReadFromSpan(_readonlyLocalBlock.Slice(32, 16).Span);
            set => Codec_Guid_LE.WriteToSpan(_writableLocalBlock.Slice(32, 16).Span, IfNotFrozen(value));
        }

        public Guid SpareGuid1
        {
            get => Codec_Guid_LE.ReadFromSpan(_readonlyLocalBlock.Slice(48, 16).Span);
            set => Codec_Guid_LE.WriteToSpan(_writableLocalBlock.Slice(48, 16).Span, IfNotFrozen(value));
        }


        public bool Equals(Header? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!_readonlyTotalBlock.Span.SequenceEqual(other._readonlyTotalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is Header other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(Header? left, Header? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Header? left, Header? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
