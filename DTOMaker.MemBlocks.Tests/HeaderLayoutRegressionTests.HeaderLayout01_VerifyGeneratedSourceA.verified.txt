// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;
using DataFac.Storage;

namespace MyOrg.Models.MemBlocks
{
    public partial class Header : DTOMaker.Runtime.MemBlocks.EntityBase, IHeader, IEquatable<Header>
    {
        // Derived entities: 0

        private const int ClassHeight = 1;
        private const int BlockLength = 64;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;

        public new const string EntityId = "MyOrg.Models.Header";

        public new static Header CreateFrom(Header source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.Header(source)
            };
        }

        public new static Header CreateFrom(MyOrg.Models.IHeader source)
        {
            if (source is Header concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.Header(source)
            };
        }

        public new static Header CreateFrom(ReadOnlyMemory<byte> buffer)
        {
            var entityId = DataFac.MemBlocks.Protocol.ParseEntityId(buffer);
            var buffers = DataFac.MemBlocks.Protocol.SplitBuffers(buffer);
            return entityId switch
            {
                _ => new MyOrg.Models.MemBlocks.Header(buffers)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override void OnGetBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnGetBuffers(buffers);
            var block = IsFrozen ? _readonlyBlock : _writableBlock.ToArray();
            buffers[ClassHeight - 1] = block;
        }
        protected override void OnLoadBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnLoadBuffers(buffers);
            ReadOnlyMemory<byte> source = buffers[ClassHeight - 1];
            if (source.Length > BlockLength)
            {
                source.Slice(0, BlockLength).CopyTo(_writableBlock);
            }
            else
            {
                source.CopyTo(_writableBlock);
            }
        }

        protected override IFreezable OnPartCopy() => new Header(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0     1        Byte    LE    HeaderMajorVersion
        //     2     1     1        Byte    LE    HeaderMinorVersion
        //     3     2     1        Byte    LE    HeaderBlockSize
        //     4     3     1        Byte    LE    ClassHeight
        //     5     4     1        Byte    LE    BlockSize1
        //     6     5     1        Byte    LE    BlockSize2
        //     7     6     1        Byte    LE    BlockSize3
        //     8     7     1        Byte    LE    BlockSize4
        //     9     8     1        Byte    LE    BlockSize5
        //    10     9     1        Byte    LE    BlockSize6
        //    11    10     1        Byte    LE    BlockSize7
        //    12    11     1        Byte    LE    BlockSize8
        //    13    12     4        Int32   LE    Spare1
        //    14    16    16        Guid    LE    EntityGuid
        //    15    32    16        Guid    LE    Spare2
        //    16    48    16        Guid    LE    Spare3
        // ------------------------------------------------------------

        public Header()
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
        }

        public Header(Header source) : base(source)
        {
            _writableBlock = source._readonlyBlock.ToArray();
            _readonlyBlock = _writableBlock;
        }

        public Header(IHeader source) : base(source)
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
            this.HeaderMajorVersion = source.HeaderMajorVersion;
            this.HeaderMinorVersion = source.HeaderMinorVersion;
            this.HeaderBlockSize = source.HeaderBlockSize;
            this.ClassHeight = source.ClassHeight;
            this.BlockSize1 = source.BlockSize1;
            this.BlockSize2 = source.BlockSize2;
            this.BlockSize3 = source.BlockSize3;
            this.BlockSize4 = source.BlockSize4;
            this.BlockSize5 = source.BlockSize5;
            this.BlockSize6 = source.BlockSize6;
            this.BlockSize7 = source.BlockSize7;
            this.BlockSize8 = source.BlockSize8;
            this.Spare1 = source.Spare1;
            this.EntityGuid = source.EntityGuid;
            this.Spare2 = source.Spare2;
            this.Spare3 = source.Spare3;
        }

        public Header(ReadOnlyMemory<byte>[] buffers) : base(buffers)
        {
            ReadOnlyMemory<byte> source = buffers[ClassHeight - 1];
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source; // todo? keep extra?
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.CopyTo(memory);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
        }

        public Byte HeaderMajorVersion
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(0, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(0, 1).Span, IfNotFrozen(value));
        }

        public Byte HeaderMinorVersion
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(1, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(1, 1).Span, IfNotFrozen(value));
        }

        public Byte HeaderBlockSize
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(2, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(2, 1).Span, IfNotFrozen(value));
        }

        public Byte ClassHeight
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(3, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(3, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize1
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(4, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(4, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize2
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(5, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(5, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize3
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(6, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(6, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize4
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(7, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(7, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize5
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(8, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(8, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize6
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(9, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(9, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize7
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(10, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(10, 1).Span, IfNotFrozen(value));
        }

        public Byte BlockSize8
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(11, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(11, 1).Span, IfNotFrozen(value));
        }

        public Int32 Spare1
        {
            get => Codec_Int32_LE.ReadFromSpan(_readonlyBlock.Slice(12, 4).Span);
            set => Codec_Int32_LE.WriteToSpan(_writableBlock.Slice(12, 4).Span, IfNotFrozen(value));
        }

        public Guid EntityGuid
        {
            get => Codec_Guid_LE.ReadFromSpan(_readonlyBlock.Slice(16, 16).Span);
            set => Codec_Guid_LE.WriteToSpan(_writableBlock.Slice(16, 16).Span, IfNotFrozen(value));
        }

        public Guid Spare2
        {
            get => Codec_Guid_LE.ReadFromSpan(_readonlyBlock.Slice(32, 16).Span);
            set => Codec_Guid_LE.WriteToSpan(_writableBlock.Slice(32, 16).Span, IfNotFrozen(value));
        }

        public Guid Spare3
        {
            get => Codec_Guid_LE.ReadFromSpan(_readonlyBlock.Slice(48, 16).Span);
            set => Codec_Guid_LE.WriteToSpan(_writableBlock.Slice(48, 16).Span, IfNotFrozen(value));
        }


        public bool Equals(Header? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyBlock.Span.SequenceEqual(other._readonlyBlock.Span)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Header other && Equals(other);
        public static bool operator ==(Header? left, Header? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Header? left, Header? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_readonlyBlock.Length);
#if NET8_0_OR_GREATER
            result.AddBytes(_readonlyBlock.Span);
#else
            var byteSpan = _readonlyBlock.Span;
            for (int i = 0; i < byteSpan.Length; i++)
            {
                result.Add(byteSpan[i]);
            }
#endif
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
