// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using DataFac.Memory;
using DataFac.Storage;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;

namespace MyOrg.Models.MemBlocks
{
    public partial class Tree_2_String_Octets : DTOMaker.Runtime.MemBlocks.EntityBase, ITree<String, Octets>, IEquatable<Tree_2_String_Octets>
    {
        // Derived entities: 1
        // - MyTree

        private const long BlockStructureCode = 161L;
        private const int ClassHeight = 1;
        private const int BlockLength = 512;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        private static readonly BlockHeader _header = BlockHeader.CreateNew(10365494, BlockStructureCode);

        public new static Tree_2_String_Octets CreateFrom(Tree_2_String_Octets source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.MemBlocks.MyTree source2 => new MyOrg.Models.MemBlocks.MyTree(source2),
                _ => new MyOrg.Models.MemBlocks.Tree_2_String_Octets(source)
            };
        }

        public new static Tree_2_String_Octets CreateFrom(MyOrg.Models.ITree<String, Octets> source)
        {
            if (source is Tree_2_String_Octets concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IMyTree source2 => new MyOrg.Models.MemBlocks.MyTree(source2),
                _ => new MyOrg.Models.MemBlocks.Tree_2_String_Octets(source)
            };
        }

        public new static Tree_2_String_Octets CreateFrom(ReadOnlySequence<byte> buffers)
        {
            SourceBlocks blocks = SourceBlocks.ParseFrom(buffers);
            return blocks.Header.EntityId switch
            {
                2 => new MyOrg.Models.MemBlocks.MyTree(blocks),
                _ => new MyOrg.Models.MemBlocks.Tree_2_String_Octets(blocks)
            };
        }

        protected override int OnGetEntityId() => 10365494;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override ReadOnlySequenceBuilder<byte> OnSequenceBuilder(ReadOnlySequenceBuilder<byte> builder) => base.OnSequenceBuilder(builder).Append(_readonlyLocalBlock);
        protected override IFreezable OnPartCopy() => new Tree_2_String_Octets(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
            _Left?.Freeze();
            _Right?.Freeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
            await Key_Pack(dataStore);
            await Value_Pack(dataStore);
            await Left_Pack(dataStore);
            await Right_Pack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
            await Key_Unpack(dataStore);
            await Value_Unpack(dataStore);
            await Left_Unpack(dataStore, depth);
            await Right_Unpack(dataStore, depth);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0     4        Int32   LE    Count
        //     2    64    64        String  LE    Key
        //     3   128    64        Octets  LE    Value
        //     4   192    64        Tree_2_String_Octets LE    Left
        //     5   256    64        Tree_2_String_Octets LE    Right
        // ------------------------------------------------------------

        protected Tree_2_String_Octets(BlockHeader header) : base(header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }
        public Tree_2_String_Octets() : base(_header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }

        protected Tree_2_String_Octets(BlockHeader header, Tree_2_String_Octets source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            this.Count = source.Count;
            _Key = source._Key;
            _Value = source._Value;
            _Left = source._Left;
            _Right = source._Right;
        }
        public Tree_2_String_Octets(Tree_2_String_Octets source) : this(_header, source) { }

        protected Tree_2_String_Octets(BlockHeader header, ITree<String, Octets> source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            this.Count = source.Count;
            _Key = source.Key;
            _Value = source.Value;
            _Left = source.Left is null ? null : MyOrg.Models.MemBlocks.Tree_2_String_Octets.CreateFrom(source.Left);
            _Right = source.Right is null ? null : MyOrg.Models.MemBlocks.Tree_2_String_Octets.CreateFrom(source.Right);
        }
        public Tree_2_String_Octets(ITree<String, Octets> source) : this(_header, source) { }

        protected Tree_2_String_Octets(BlockHeader header, SourceBlocks sourceBlocks) : base(header, sourceBlocks)
        {
            var sourceBlock = sourceBlocks.Blocks.Span[ClassHeight];
            if (sourceBlock.Length < BlockLength)
            {
                // source too small - allocate new
                _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
                sourceBlock.CopyTo(_writableLocalBlock);
            }
            else
            {
                _readonlyLocalBlock = sourceBlock;
                _writableLocalBlock = Memory<byte>.Empty;
            }
        }
        internal Tree_2_String_Octets(SourceBlocks sourceBlocks) : this(_header, sourceBlocks) { }
        public Tree_2_String_Octets(ReadOnlySequence<byte> buffers) : this(_header, SourceBlocks.ParseFrom(buffers)) { }

        public Int32 Count
        {
            get => Codec_Int32_LE.ReadFromSpan(_readonlyLocalBlock.Slice(0, 4).Span);
            set => Codec_Int32_LE.WriteToSpan(_writableLocalBlock.Slice(0, 4).Span, IfNotFrozen(value));
        }

        private async ValueTask Key_Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = default;
            var buffer = System.Text.Encoding.UTF8.GetBytes(_Key);
            blobId = await dataStore.PutBlob(buffer);
            blobId.WriteTo(_writableLocalBlock.Slice(64, 64).Span);
        }
        private async ValueTask Key_Unpack(IDataStore dataStore)
        {
            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(64, 64));
            var blob = await dataStore.GetBlob(blobId);
#if NET8_0_OR_GREATER
            _Key = blob is null ? string.Empty : System.Text.Encoding.UTF8.GetString(blob.Value.Span);
#else
            _Key = blob is null ? string.Empty : System.Text.Encoding.UTF8.GetString(blob.Value.ToArray());
#endif
        }
        private string _Key = string.Empty;
        public string Key
        {
            get => IfUnpacked(_Key);
            set => _Key = IfNotFrozen(value);
        }

        private async ValueTask Value_Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = default;
            var buffer = _Value.Memory;
            blobId = await dataStore.PutBlob(buffer);
            blobId.WriteTo(_writableLocalBlock.Slice(128, 64).Span);
        }
        private async ValueTask Value_Unpack(IDataStore dataStore)
        {
            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(128, 64));
            var blob = await dataStore.GetBlob(blobId);
            _Value = blob is null ? Octets.Empty : Octets.UnsafeWrap(blob.Value);

        }
        private Octets _Value = Octets.Empty;
        public Octets Value
        {
            get => IfUnpacked(_Value);
            set => _Value = IfNotFrozen(value);
        }

        private async ValueTask Left_Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = default;
            if (_Left is not null)
            {
                await _Left.Pack(dataStore);
                var buffer = _Left.GetBuffers();
                blobId = await dataStore.PutBlob(buffer.Compact());
            }
            blobId.WriteTo(_writableLocalBlock.Slice(192, 64).Span);
        }
        private async ValueTask Left_Unpack(IDataStore dataStore, int depth)
        {
            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(192, 64));
            var blob = await dataStore.GetBlob(blobId);
            _Left = null;
            if (blob is not null)
            {
                _Left = MyOrg.Models.MemBlocks.Tree_2_String_Octets.CreateFrom(new ReadOnlySequence<byte>(blob.Value));
                await _Left.Unpack(dataStore, depth - 1);
            }
        }
        private MyOrg.Models.MemBlocks.Tree_2_String_Octets? _Left;
        public MyOrg.Models.MemBlocks.Tree_2_String_Octets? Left
        {
            get => IfUnpacked(_Left);
            set => _Left = IfNotFrozen(value);
        }
        MyOrg.Models.ITree<String, Octets>? ITree<String, Octets>.Left
        {
            get => IfUnpacked(_Left);
            set => _Left = IfNotFrozen(value is null ? null :  MyOrg.Models.MemBlocks.Tree_2_String_Octets.CreateFrom(value));
        }

        private async ValueTask Right_Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = default;
            if (_Right is not null)
            {
                await _Right.Pack(dataStore);
                var buffer = _Right.GetBuffers();
                blobId = await dataStore.PutBlob(buffer.Compact());
            }
            blobId.WriteTo(_writableLocalBlock.Slice(256, 64).Span);
        }
        private async ValueTask Right_Unpack(IDataStore dataStore, int depth)
        {
            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(256, 64));
            var blob = await dataStore.GetBlob(blobId);
            _Right = null;
            if (blob is not null)
            {
                _Right = MyOrg.Models.MemBlocks.Tree_2_String_Octets.CreateFrom(new ReadOnlySequence<byte>(blob.Value));
                await _Right.Unpack(dataStore, depth - 1);
            }
        }
        private MyOrg.Models.MemBlocks.Tree_2_String_Octets? _Right;
        public MyOrg.Models.MemBlocks.Tree_2_String_Octets? Right
        {
            get => IfUnpacked(_Right);
            set => _Right = IfNotFrozen(value);
        }
        MyOrg.Models.ITree<String, Octets>? ITree<String, Octets>.Right
        {
            get => IfUnpacked(_Right);
            set => _Right = IfNotFrozen(value is null ? null :  MyOrg.Models.MemBlocks.Tree_2_String_Octets.CreateFrom(value));
        }


        public bool Equals(Tree_2_String_Octets? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyLocalBlock.Span.SequenceEqual(other._readonlyLocalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is Tree_2_String_Octets other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(Tree_2_String_Octets? left, Tree_2_String_Octets? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Tree_2_String_Octets? left, Tree_2_String_Octets? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
