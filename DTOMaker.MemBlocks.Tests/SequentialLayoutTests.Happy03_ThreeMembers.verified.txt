// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using DataFac.Memory;
using DataFac.Runtime;
namespace MyOrg.Models.MemBlocks
{
    public sealed partial class MyDTO { }
    public partial class MyDTO : EntityBase, IMyDTO, IFreezable
    {
        // Derived entities: 0

        private const int ClassHeight = 1;
        private const int BlockLength = 32;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;

        protected override int OnGetClassHeight() => ClassHeight;
        protected override void OnGetBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnGetBuffers(buffers);
            var block = IsFrozen ? _readonlyBlock : _writableBlock.ToArray();
            buffers[ClassHeight - 1] = block;
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0     8        Double  LE    Field1
        //     2     8     1        Boolean LE    Field2
        //     3    16     8        Int64   LE    Field3
        // ------------------------------------------------------------

        public MyDTO()
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
        }

        public MyDTO(MyDTO source, bool frozen = false) : base(source, frozen)
        {
            _writableBlock = source._writableBlock.ToArray();
            _readonlyBlock = _writableBlock;
        }

        public MyDTO(IMyDTO source, bool frozen = false) : base(source, frozen)
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
            this.Field1 = source.Field1;
            this.Field2 = source.Field2;
            this.Field3 = source.Field3;
        }

        public MyDTO(ReadOnlyMemory<ReadOnlyMemory<byte>> buffers) : base(buffers)
        {
            ReadOnlyMemory<byte> source = buffers.Span[ClassHeight - 1];
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source.Slice(0, BlockLength);
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.Span.CopyTo(memory.Span);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
        }

        public Double Field1
        {
            get
            {
                return (Double)Codec_Double_LE.ReadFromSpan(_readonlyBlock.Slice(0, 8).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Double_LE.WriteToSpan(_writableBlock.Slice(0, 8).Span, value);
            }
        }

        public Boolean Field2
        {
            get
            {
                return (Boolean)Codec_Boolean_LE.ReadFromSpan(_readonlyBlock.Slice(8, 1).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Boolean_LE.WriteToSpan(_writableBlock.Slice(8, 1).Span, value);
            }
        }

        public Int64 Field3
        {
            get
            {
                return (Int64)Codec_Int64_LE.ReadFromSpan(_readonlyBlock.Slice(16, 8).Span);
            }

            set
            {
                ThrowExceptionIfFrozen();
                Codec_Int64_LE.WriteToSpan(_writableBlock.Slice(16, 8).Span, value);
            }
        }

    }
}
