// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DataFac.Memory;
using DataFac.Storage;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;

namespace MyOrg.Models.MemBlocks
{
    public partial class MyDTO : DTOMaker.Runtime.MemBlocks.EntityBase, IMyDTO, IEquatable<MyDTO>
    {
        // Derived entities: 0

        private const long BlockStructureCode = 113L;
        private const int ClassHeight = 1;
        private const int BlockLength = 128;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        public new const string EntityId = "01234567-89ab-cdef-0123-456789abcdef";
        private static readonly Guid EntityGuid = new Guid("01234567-89ab-cdef-0123-456789abcdef");
        private static readonly BlockHeader _header = BlockHeader.CreateNew(BlockStructureCode, EntityGuid);

        public new static MyDTO CreateFrom(MyDTO source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.MyDTO(source)
            };
        }

        public new static MyDTO CreateFrom(MyOrg.Models.IMyDTO source)
        {
            if (source is MyDTO concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.MyDTO(source)
            };
        }

        public new static MyDTO CreateFrom(ReadOnlySequence<byte> buffers)
        {
            ReadOnlyMemory<byte> buffer = buffers.Slice(0, 64).Compact();
            BlockHeader header = BlockHeader.ParseFrom(buffer);
            string entityIdStr = header.EntityGuid.ToString("D");
            return entityIdStr switch
            {
                _ => new MyOrg.Models.MemBlocks.MyDTO(buffers)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override ReadOnlySequenceBuilder<byte> OnSequenceBuilder(ReadOnlySequenceBuilder<byte> builder) => base.OnSequenceBuilder(builder).Append(_readonlyLocalBlock);
        protected override IFreezable OnPartCopy() => new MyDTO(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0     1        Boolean LE    Field1
        //     2     1     1        SByte   LE    Field2
        //     3     2     1        Byte    LE    Field3
        //     4     4     2        Int16   LE    Field4
        //     5     6     2        UInt16  LE    Field5
        //     6     8     2        Char    LE    Field6
        //     7    10     2        Half    LE    Field7
        //     8    12     4        Int32   LE    Field8
        //     9    16     4        UInt32  LE    Field9
        //    10    20     4        Single  LE    Field10
        //    11    24     8        Int64   LE    Field11
        //    12    32     8        UInt64  LE    Field12
        //    13    40     8        Double  LE    Field13
        //    14    48    16        Guid    LE    Field14
        //    15    64    16        Int128  LE    Field15
        //    16    80    16        UInt128 LE    Field16
        //    17    96    16        Decimal LE    Field17
        // ------------------------------------------------------------

        protected MyDTO(BlockHeader header) : base(header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }
        public MyDTO() : base(_header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }

        protected MyDTO(BlockHeader header, MyDTO source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }
        public MyDTO(MyDTO source) : base(_header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }

        protected MyDTO(BlockHeader header, IMyDTO source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            this.Field1 = source.Field1;
            this.Field2 = source.Field2;
            this.Field3 = source.Field3;
            this.Field4 = source.Field4;
            this.Field5 = source.Field5;
            this.Field6 = source.Field6;
            this.Field7 = source.Field7;
            this.Field8 = source.Field8;
            this.Field9 = source.Field9;
            this.Field10 = source.Field10;
            this.Field11 = source.Field11;
            this.Field12 = source.Field12;
            this.Field13 = source.Field13;
            this.Field14 = source.Field14;
            this.Field15 = source.Field15;
            this.Field16 = source.Field16;
            this.Field17 = source.Field17;
        }

        public MyDTO(IMyDTO source) : base(_header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            this.Field1 = source.Field1;
            this.Field2 = source.Field2;
            this.Field3 = source.Field3;
            this.Field4 = source.Field4;
            this.Field5 = source.Field5;
            this.Field6 = source.Field6;
            this.Field7 = source.Field7;
            this.Field8 = source.Field8;
            this.Field9 = source.Field9;
            this.Field10 = source.Field10;
            this.Field11 = source.Field11;
            this.Field12 = source.Field12;
            this.Field13 = source.Field13;
            this.Field14 = source.Field14;
            this.Field15 = source.Field15;
            this.Field16 = source.Field16;
            this.Field17 = source.Field17;
        }

        protected MyDTO(BlockHeader header, SourceBlocks sourceBlocks) : base(header, sourceBlocks)
        {
            var sourceBlock = sourceBlocks.GetBlock(ClassHeight);
            if (sourceBlock.Length < BlockLength)
            {
                // source too short - allocate new
                Memory<byte> memory = new byte[BlockLength];
                sourceBlock.CopyTo(memory);
                _readonlyLocalBlock = memory;
            }
            else
            {
                _readonlyLocalBlock = sourceBlock;
            }
            _writableLocalBlock = Memory<byte>.Empty;
        }
        public MyDTO(ReadOnlySequence<byte> buffers) : this(_header, SourceBlocks.ParseFrom(buffers))
        {
        }

        public Boolean Field1
        {
            get => Codec_Boolean_LE.ReadFromSpan(_readonlyLocalBlock.Slice(0, 1).Span);
            set => Codec_Boolean_LE.WriteToSpan(_writableLocalBlock.Slice(0, 1).Span, IfNotFrozen(value));
        }

        public SByte Field2
        {
            get => Codec_SByte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(1, 1).Span);
            set => Codec_SByte_LE.WriteToSpan(_writableLocalBlock.Slice(1, 1).Span, IfNotFrozen(value));
        }

        public Byte Field3
        {
            get => Codec_Byte_LE.ReadFromSpan(_readonlyLocalBlock.Slice(2, 1).Span);
            set => Codec_Byte_LE.WriteToSpan(_writableLocalBlock.Slice(2, 1).Span, IfNotFrozen(value));
        }

        public Int16 Field4
        {
            get => Codec_Int16_LE.ReadFromSpan(_readonlyLocalBlock.Slice(4, 2).Span);
            set => Codec_Int16_LE.WriteToSpan(_writableLocalBlock.Slice(4, 2).Span, IfNotFrozen(value));
        }

        public UInt16 Field5
        {
            get => Codec_UInt16_LE.ReadFromSpan(_readonlyLocalBlock.Slice(6, 2).Span);
            set => Codec_UInt16_LE.WriteToSpan(_writableLocalBlock.Slice(6, 2).Span, IfNotFrozen(value));
        }

        public Char Field6
        {
            get => Codec_Char_LE.ReadFromSpan(_readonlyLocalBlock.Slice(8, 2).Span);
            set => Codec_Char_LE.WriteToSpan(_writableLocalBlock.Slice(8, 2).Span, IfNotFrozen(value));
        }

        public Half Field7
        {
            get => Codec_Half_LE.ReadFromSpan(_readonlyLocalBlock.Slice(10, 2).Span);
            set => Codec_Half_LE.WriteToSpan(_writableLocalBlock.Slice(10, 2).Span, IfNotFrozen(value));
        }

        public Int32 Field8
        {
            get => Codec_Int32_LE.ReadFromSpan(_readonlyLocalBlock.Slice(12, 4).Span);
            set => Codec_Int32_LE.WriteToSpan(_writableLocalBlock.Slice(12, 4).Span, IfNotFrozen(value));
        }

        public UInt32 Field9
        {
            get => Codec_UInt32_LE.ReadFromSpan(_readonlyLocalBlock.Slice(16, 4).Span);
            set => Codec_UInt32_LE.WriteToSpan(_writableLocalBlock.Slice(16, 4).Span, IfNotFrozen(value));
        }

        public Single Field10
        {
            get => Codec_Single_LE.ReadFromSpan(_readonlyLocalBlock.Slice(20, 4).Span);
            set => Codec_Single_LE.WriteToSpan(_writableLocalBlock.Slice(20, 4).Span, IfNotFrozen(value));
        }

        public Int64 Field11
        {
            get => Codec_Int64_LE.ReadFromSpan(_readonlyLocalBlock.Slice(24, 8).Span);
            set => Codec_Int64_LE.WriteToSpan(_writableLocalBlock.Slice(24, 8).Span, IfNotFrozen(value));
        }

        public UInt64 Field12
        {
            get => Codec_UInt64_LE.ReadFromSpan(_readonlyLocalBlock.Slice(32, 8).Span);
            set => Codec_UInt64_LE.WriteToSpan(_writableLocalBlock.Slice(32, 8).Span, IfNotFrozen(value));
        }

        public Double Field13
        {
            get => Codec_Double_LE.ReadFromSpan(_readonlyLocalBlock.Slice(40, 8).Span);
            set => Codec_Double_LE.WriteToSpan(_writableLocalBlock.Slice(40, 8).Span, IfNotFrozen(value));
        }

        public Guid Field14
        {
            get => Codec_Guid_LE.ReadFromSpan(_readonlyLocalBlock.Slice(48, 16).Span);
            set => Codec_Guid_LE.WriteToSpan(_writableLocalBlock.Slice(48, 16).Span, IfNotFrozen(value));
        }

        public Int128 Field15
        {
            get => Codec_Int128_LE.ReadFromSpan(_readonlyLocalBlock.Slice(64, 16).Span);
            set => Codec_Int128_LE.WriteToSpan(_writableLocalBlock.Slice(64, 16).Span, IfNotFrozen(value));
        }

        public UInt128 Field16
        {
            get => Codec_UInt128_LE.ReadFromSpan(_readonlyLocalBlock.Slice(80, 16).Span);
            set => Codec_UInt128_LE.WriteToSpan(_writableLocalBlock.Slice(80, 16).Span, IfNotFrozen(value));
        }

        public Decimal Field17
        {
            get => Codec_Decimal_LE.ReadFromSpan(_readonlyLocalBlock.Slice(96, 16).Span);
            set => Codec_Decimal_LE.WriteToSpan(_writableLocalBlock.Slice(96, 16).Span, IfNotFrozen(value));
        }


        public bool Equals(MyDTO? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyLocalBlock.Span.SequenceEqual(other._readonlyLocalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is MyDTO other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(MyDTO? left, MyDTO? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(MyDTO? left, MyDTO? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
