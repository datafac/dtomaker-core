// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DataFac.Memory;
using DataFac.Storage;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;

namespace MyOrg.Models.MemBlocks
{
    public partial class MyDTO : DTOMaker.Runtime.MemBlocks.EntityBase, IMyDTO, IEquatable<MyDTO>
    {
        // Derived entities: 0

        private const long BlockStructureCode = 129L;
        private const int ClassHeight = 1;
        private const int BlockOffset = 64;
        private const int BlockLength = 256;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        public new const string EntityId = "01234567-89ab-cdef-0123-456789abcdef";
        private static readonly Guid EntityGuid = new Guid("01234567-89ab-cdef-0123-456789abcdef");
        private static readonly BlockHeader _header = BlockHeader.CreateNew(BlockStructureCode, EntityGuid);

        public new static MyDTO CreateFrom(MyDTO source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.MyDTO(source)
            };
        }

        public new static MyDTO CreateFrom(MyOrg.Models.IMyDTO source)
        {
            if (source is MyDTO concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.MyDTO(source)
            };
        }

        public new static MyDTO CreateFrom(ReadOnlyMemory<byte> buffer)
        {
            BlockHeader header = BlockHeader.ParseFrom(buffer);
            string entityIdStr = header.EntityGuid.ToString("D");
            return entityIdStr switch
            {
                _ => new MyOrg.Models.MemBlocks.MyDTO(buffer)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;

        protected override IFreezable OnPartCopy() => new MyDTO(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
            FamilyName_Pack();
            GivenNames_Pack();
            OtherNames_Pack();
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
            FamilyName_Unpack();
            GivenNames_Unpack();
            OtherNames_Unpack();
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0    64        String  LE    FamilyName
        //     2    64    64        String  LE    GivenNames
        //     3   128    64        String  LE    OtherNames
        // ------------------------------------------------------------

        protected MyDTO(BlockHeader header) : base(header)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }
        public MyDTO() : base(_header)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected MyDTO(BlockHeader header, MyDTO source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }
        public MyDTO(MyDTO source) : base(_header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected MyDTO(BlockHeader header, IMyDTO source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
            _FamilyName = source.FamilyName;
            _GivenNames = source.GivenNames;
            _OtherNames = source.OtherNames;
        }

        public MyDTO(IMyDTO source) : base(_header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
            _FamilyName = source.FamilyName;
            _GivenNames = source.GivenNames;
            _OtherNames = source.OtherNames;
        }

        protected MyDTO(BlockHeader header, ReadOnlyMemory<byte> buffer) : base(header, buffer)
        {
            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);
            _writableLocalBlock = Memory<byte>.Empty;
        }
        public MyDTO(ReadOnlyMemory<byte> buffer) : base(_header, buffer)
        {
            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);
            _writableLocalBlock = Memory<byte>.Empty;
        }

        private void FamilyName_Pack()
        {
            Codec_Memory_NE.WriteToSpan(_writableLocalBlock.Slice(0, 64),
                System.Text.Encoding.UTF8.GetBytes(_FamilyName));
        }
        private void FamilyName_Unpack()
        {
            ReadOnlyMemory<byte>? memory = Codec_Memory_NE.ReadFromMemory(_readonlyLocalBlock.Slice(0, 64));
#if NET8_0_OR_GREATER
            _FamilyName = memory is null ? string.Empty : System.Text.Encoding.UTF8.GetString(memory.Value.Span);
#else
            _FamilyName = memory is null ? string.Empty : System.Text.Encoding.UTF8.GetString(memory.Value.ToArray());
#endif
        }
        private string _FamilyName = string.Empty;
        public string FamilyName
        {
            get => IfUnpacked(_FamilyName);
            set => _FamilyName = IfNotFrozen(value);
        }

        private void GivenNames_Pack()
        {
            Codec_Memory_NE.WriteToSpan(_writableLocalBlock.Slice(64, 64),
                System.Text.Encoding.UTF8.GetBytes(_GivenNames));
        }
        private void GivenNames_Unpack()
        {
            ReadOnlyMemory<byte>? memory = Codec_Memory_NE.ReadFromMemory(_readonlyLocalBlock.Slice(64, 64));
#if NET8_0_OR_GREATER
            _GivenNames = memory is null ? string.Empty : System.Text.Encoding.UTF8.GetString(memory.Value.Span);
#else
            _GivenNames = memory is null ? string.Empty : System.Text.Encoding.UTF8.GetString(memory.Value.ToArray());
#endif
        }
        private string _GivenNames = string.Empty;
        public string GivenNames
        {
            get => IfUnpacked(_GivenNames);
            set => _GivenNames = IfNotFrozen(value);
        }

        private void OtherNames_Pack()
        {
            Codec_Memory_NE.WriteToSpan(_writableLocalBlock.Slice(128, 64),
                _OtherNames is null ? (ReadOnlyMemory<byte>?)null : System.Text.Encoding.UTF8.GetBytes(_OtherNames));
        }
        private void OtherNames_Unpack()
        {
            ReadOnlyMemory<byte>? memory = Codec_Memory_NE.ReadFromMemory(_readonlyLocalBlock.Slice(128, 64));
#if NET8_0_OR_GREATER
            _OtherNames = memory is null ? null : System.Text.Encoding.UTF8.GetString(memory.Value.Span);
#else
            _OtherNames = memory is null ? null : System.Text.Encoding.UTF8.GetString(memory.Value.ToArray());
#endif
        }
        private string? _OtherNames;
        public string? OtherNames
        {
            get => IfUnpacked(_OtherNames);
            set => _OtherNames = IfNotFrozen(value);
        }


        public bool Equals(MyDTO? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!_readonlyTotalBlock.Span.SequenceEqual(other._readonlyTotalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is MyDTO other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(MyDTO? left, MyDTO? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(MyDTO? left, MyDTO? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
