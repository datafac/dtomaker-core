// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using System;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using DataFac.Memory;
using DataFac.Runtime;
namespace MyOrg.Models.MemBlocks
{
    public sealed partial class MyDTO : EntityBase, IMyDTO, IFreezable
    {
        private const int BlockLength = 8;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;

        protected override void OnGetBuffers(ImmutableArray<ReadOnlyMemory<byte>>.Builder builder)
        {
            base.OnGetBuffers(builder);
            var block = IsFrozen() ? _readonlyBlock : _writableBlock.ToArray();
            builder.Add(block);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0     1     8  Byte    LE    Values
        // ------------------------------------------------------------

        public MyDTO()
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
        }

        public MyDTO(MyDTO source, bool frozen = false) : base(source, frozen)
        {
            _writableBlock = source._writableBlock.ToArray();
            _readonlyBlock = _writableBlock;
        }

        public MyDTO(IMyDTO source, bool frozen = false) : base(source, frozen)
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
            this.Values = source.Values;
        }

        public MyDTO(ImmutableArray<ReadOnlyMemory<byte>> buffers) : base(buffers.Slice(0, buffers.Length - 1))
        {
            ReadOnlyMemory<byte> source = buffers[buffers.Length - 1];
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source.Slice(0, BlockLength);
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.Span.CopyTo(memory.Span);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
        }

        public ReadOnlyMemory<Byte> Values
        {
            get
            {
                var sourceSpan = _readonlyBlock.Slice(0, 1 * 8).Span;
                return MemoryMarshal.Cast<byte, Byte>(sourceSpan).ToArray(); // todo alloc!
            }

            set
            {
                ThrowExceptionIfFrozen();
                var targetSpan = _writableBlock.Slice(0, 1 * 8).Span;
                targetSpan.Clear();
                value.Span.CopyTo(MemoryMarshal.Cast<byte, Byte>(targetSpan));
            }
        }

    }
}
