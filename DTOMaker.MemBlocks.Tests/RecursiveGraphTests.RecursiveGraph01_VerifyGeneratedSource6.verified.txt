// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;
namespace MyOrg.Models.MemBlocks
{
    public partial class Tree : DTOMaker.Runtime.MemBlocks.EntityBase, ITree, IEquatable<Tree>
    {
        // Derived entities: 0

        private const int ClassHeight = 1;
        private const int BlockLength = 256;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;

        public new const string EntityId = "MyOrg.Models.Tree";

        public new static Tree CreateFrom(Tree source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.Tree(source)
            };
        }

        public new static Tree CreateFrom(MyOrg.Models.ITree source)
        {
            if (source is Tree concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.Tree(source)
            };
        }

        public new static Tree CreateFrom(string entityId, ReadOnlyMemory<ReadOnlyMemory<byte>> buffers)
        {
            return entityId switch
            {
                _ => throw new ArgumentOutOfRangeException(nameof(entityId), entityId, null)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override void OnGetBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnGetBuffers(buffers);
            var block = IsFrozen ? _readonlyBlock : _writableBlock.ToArray();
            buffers[ClassHeight - 1] = block;
        }
        protected override void OnLoadBuffers(ReadOnlyMemory<ReadOnlyMemory<byte>> buffers)
        {
            base.OnLoadBuffers(buffers);
            ReadOnlyMemory<byte> source = buffers.Span[ClassHeight - 1];
            if (source.Length > BlockLength)
            {
                source.Slice(0, BlockLength).CopyTo(_writableBlock);
            }
            else
            {
                source.CopyTo(_writableBlock);
            }
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0    64        Tree    LE    Left
        //     2    64    64        Tree    LE    Right
        //     3   128    64        Node    LE    Node
        // ------------------------------------------------------------

        public Tree()
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
        }

        public Tree(Tree source) : base(source)
        {
            _writableBlock = source._readonlyBlock.ToArray();
            _readonlyBlock = _writableBlock;
        }

        public Tree(ITree source) : base(source)
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
            this.Left = source.Left;
            this.Right = source.Right;
            this.Node = source.Node;
        }

        public Tree(ReadOnlyMemory<ReadOnlyMemory<byte>> buffers) : base(buffers)
        {
            ReadOnlyMemory<byte> source = buffers.Span[ClassHeight - 1];
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source.Slice(0, BlockLength);
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.Span.CopyTo(memory.Span);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
        }

        private MyOrg.Models.MemBlocks.Tree? _Left;
        public MyOrg.Models.MemBlocks.Tree? Left
        {
            get => _Left;
            set
            {
                ThrowIfFrozen();
                _Left = value;
            }
        }
        MyOrg.Models.ITree? ITree.Left
        {
            get => _Left;
            set
            {
                ThrowIfFrozen();
                _Left = value is null ? null : MyOrg.Models.MemBlocks.Tree.CreateFrom(value);
            }
        }
        private MyOrg.Models.MemBlocks.Tree? _Right;
        public MyOrg.Models.MemBlocks.Tree? Right
        {
            get => _Right;
            set
            {
                ThrowIfFrozen();
                _Right = value;
            }
        }
        MyOrg.Models.ITree? ITree.Right
        {
            get => _Right;
            set
            {
                ThrowIfFrozen();
                _Right = value is null ? null : MyOrg.Models.MemBlocks.Tree.CreateFrom(value);
            }
        }
        private MyOrg.Models.MemBlocks.Node? _Node;
        public MyOrg.Models.MemBlocks.Node? Node
        {
            get => _Node;
            set
            {
                ThrowIfFrozen();
                _Node = value;
            }
        }
        MyOrg.Models.INode? ITree.Node
        {
            get => _Node;
            set
            {
                ThrowIfFrozen();
                _Node = value is null ? null : MyOrg.Models.MemBlocks.Node.CreateFrom(value);
            }
        }

        public bool Equals(Tree? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyBlock.Span.SequenceEqual(other._readonlyBlock.Span)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Tree other && Equals(other);
        public static bool operator ==(Tree? left, Tree? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Tree? left, Tree? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
#if NET8_0_OR_GREATER
            result.AddBytes(_readonlyBlock.Span);
#else
            var byteSpan = _readonlyBlock.Span;
            result.Add(byteSpan.Length);
            for (int i = 0; i < byteSpan.Length; i++)
            {
                result.Add(byteSpan[i]);
            }
#endif
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
