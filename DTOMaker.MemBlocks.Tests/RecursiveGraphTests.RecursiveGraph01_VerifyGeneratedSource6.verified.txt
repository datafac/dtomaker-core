// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;
using DataFac.Storage;

namespace MyOrg.Models.MemBlocks
{
    public partial class Tree : DTOMaker.Runtime.MemBlocks.EntityBase, ITree, IEquatable<Tree>
    {
        // Derived entities: 0

        private const int ClassHeight = 1;
        private const int BlockLength = 256;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;

        public new const string EntityId = "MyOrg.Models.Tree";

        public new static Tree CreateFrom(Tree source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.Tree(source)
            };
        }

        public new static Tree CreateFrom(MyOrg.Models.ITree source)
        {
            if (source is Tree concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.Tree(source)
            };
        }

        public new static Tree CreateFrom(string entityId, ReadOnlyMemory<byte> buffer)
        {
            var buffers = DataFac.MemBlocks.Protocol.SplitBuffers(buffer);
            return entityId switch
            {
                _ => new MyOrg.Models.MemBlocks.Tree(buffers)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override void OnGetBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnGetBuffers(buffers);
            var block = IsFrozen ? _readonlyBlock : _writableBlock.ToArray();
            buffers[ClassHeight - 1] = block;
        }
        protected override void OnLoadBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnLoadBuffers(buffers);
            ReadOnlyMemory<byte> source = buffers[ClassHeight - 1];
            if (source.Length > BlockLength)
            {
                source.Slice(0, BlockLength).CopyTo(_writableBlock);
            }
            else
            {
                source.CopyTo(_writableBlock);
            }
        }

        protected override IFreezable OnPartCopy() => new Tree(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
            Left_CheckIsPacked();
            _Left?.Freeze();
            Right_CheckIsPacked();
            _Right?.Freeze();
            Node_CheckIsPacked();
            _Node?.Freeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
            await Left_Pack(dataStore);
            await Right_Pack(dataStore);
            await Node_Pack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore)
        {
            await base.OnUnpack(dataStore);
            await Left_Unpack(dataStore);
            await Right_Unpack(dataStore);
            await Node_Unpack(dataStore);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0    64        Tree    LE    Left
        //     2    64    64        Tree    LE    Right
        //     3   128    64        Node    LE    Node
        // ------------------------------------------------------------

        public Tree()
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
        }

        public Tree(Tree source) : base(source)
        {
            _writableBlock = source._readonlyBlock.ToArray();
            _readonlyBlock = _writableBlock;
        }

        public Tree(ITree source) : base(source)
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
            _Left = source.Left is null ? null : MyOrg.Models.MemBlocks.Tree.CreateFrom(source.Left);
            _Right = source.Right is null ? null : MyOrg.Models.MemBlocks.Tree.CreateFrom(source.Right);
            _Node = source.Node is null ? null : MyOrg.Models.MemBlocks.Node.CreateFrom(source.Node);
        }

        public Tree(ReadOnlyMemory<byte>[] buffers) : base(buffers)
        {
            ReadOnlyMemory<byte> source = buffers[ClassHeight - 1];
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source; // todo? keep extra?
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.CopyTo(memory);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
        }

        private volatile bool _Left_isPacked = false;
        private volatile bool _Left_isUnpacked = false;
        private void Left_CheckIsPacked() => ThrowIfNotPacked(_Left_isPacked);
        private async ValueTask Left_Pack(IDataStore dataStore)
        {
            if (_Left_isPacked) return;
            BlobIdV1 blobId = default;
            if (_Left is not null)
            {
                await _Left.Pack(dataStore);
                var buffer = _Left.GetBuffer();
                var blob = BlobData.UnsafeWrap(buffer);
                blobId = await dataStore.PutBlob(blob, false);
            }
            Codec_BlobId_NE.WriteToSpan(_writableBlock.Slice(0, 64).Span, blobId);
            _Left_isPacked = true;
        }
        private async ValueTask Left_Unpack(IDataStore dataStore)
        {
            if (_Left_isUnpacked) return;
            BlobIdV1 blobId = Codec_BlobId_NE.ReadFromSpan(_readonlyBlock.Slice(0, 64).Span);
            if (blobId.IsEmpty)
            {
                _Left = null;
            }
            else
            {
                BlobData? blob = await dataStore.GetBlob(blobId);
                if (blob is null) throw new InvalidDataException($"BlobIdV0 '{blobId}' not found!");
                string entityId = DataFac.MemBlocks.Protocol.ParseEntityId(blob.Value.Memory);
                _Left = MyOrg.Models.MemBlocks.Tree.CreateFrom(entityId, blob.Value.Memory);
            }
            _Left_isUnpacked = true;
        }
        private MyOrg.Models.MemBlocks.Tree? _Left;
        public MyOrg.Models.MemBlocks.Tree? Left
        {
            get => _Left;
            set
            {
                ThrowIfFrozen();
                _Left = value is null ? null : value.IsFrozen ? value : MyOrg.Models.MemBlocks.Tree.CreateFrom(value);
                _Left_isPacked = false;
            }
        }
        MyOrg.Models.ITree? ITree.Left
        {
            get => _Left;
            set
            {
                ThrowIfFrozen();
                _Left = value is null ? null : MyOrg.Models.MemBlocks.Tree.CreateFrom(value);
                _Left_isPacked = false;
            }
        }
        private volatile bool _Right_isPacked = false;
        private volatile bool _Right_isUnpacked = false;
        private void Right_CheckIsPacked() => ThrowIfNotPacked(_Right_isPacked);
        private async ValueTask Right_Pack(IDataStore dataStore)
        {
            if (_Right_isPacked) return;
            BlobIdV1 blobId = default;
            if (_Right is not null)
            {
                await _Right.Pack(dataStore);
                var buffer = _Right.GetBuffer();
                var blob = BlobData.UnsafeWrap(buffer);
                blobId = await dataStore.PutBlob(blob, false);
            }
            Codec_BlobId_NE.WriteToSpan(_writableBlock.Slice(64, 64).Span, blobId);
            _Right_isPacked = true;
        }
        private async ValueTask Right_Unpack(IDataStore dataStore)
        {
            if (_Right_isUnpacked) return;
            BlobIdV1 blobId = Codec_BlobId_NE.ReadFromSpan(_readonlyBlock.Slice(64, 64).Span);
            if (blobId.IsEmpty)
            {
                _Right = null;
            }
            else
            {
                BlobData? blob = await dataStore.GetBlob(blobId);
                if (blob is null) throw new InvalidDataException($"BlobIdV0 '{blobId}' not found!");
                string entityId = DataFac.MemBlocks.Protocol.ParseEntityId(blob.Value.Memory);
                _Right = MyOrg.Models.MemBlocks.Tree.CreateFrom(entityId, blob.Value.Memory);
            }
            _Right_isUnpacked = true;
        }
        private MyOrg.Models.MemBlocks.Tree? _Right;
        public MyOrg.Models.MemBlocks.Tree? Right
        {
            get => _Right;
            set
            {
                ThrowIfFrozen();
                _Right = value is null ? null : value.IsFrozen ? value : MyOrg.Models.MemBlocks.Tree.CreateFrom(value);
                _Right_isPacked = false;
            }
        }
        MyOrg.Models.ITree? ITree.Right
        {
            get => _Right;
            set
            {
                ThrowIfFrozen();
                _Right = value is null ? null : MyOrg.Models.MemBlocks.Tree.CreateFrom(value);
                _Right_isPacked = false;
            }
        }
        private volatile bool _Node_isPacked = false;
        private volatile bool _Node_isUnpacked = false;
        private void Node_CheckIsPacked() => ThrowIfNotPacked(_Node_isPacked);
        private async ValueTask Node_Pack(IDataStore dataStore)
        {
            if (_Node_isPacked) return;
            BlobIdV1 blobId = default;
            if (_Node is not null)
            {
                await _Node.Pack(dataStore);
                var buffer = _Node.GetBuffer();
                var blob = BlobData.UnsafeWrap(buffer);
                blobId = await dataStore.PutBlob(blob, false);
            }
            Codec_BlobId_NE.WriteToSpan(_writableBlock.Slice(128, 64).Span, blobId);
            _Node_isPacked = true;
        }
        private async ValueTask Node_Unpack(IDataStore dataStore)
        {
            if (_Node_isUnpacked) return;
            BlobIdV1 blobId = Codec_BlobId_NE.ReadFromSpan(_readonlyBlock.Slice(128, 64).Span);
            if (blobId.IsEmpty)
            {
                _Node = null;
            }
            else
            {
                BlobData? blob = await dataStore.GetBlob(blobId);
                if (blob is null) throw new InvalidDataException($"BlobIdV0 '{blobId}' not found!");
                string entityId = DataFac.MemBlocks.Protocol.ParseEntityId(blob.Value.Memory);
                _Node = MyOrg.Models.MemBlocks.Node.CreateFrom(entityId, blob.Value.Memory);
            }
            _Node_isUnpacked = true;
        }
        private MyOrg.Models.MemBlocks.Node? _Node;
        public MyOrg.Models.MemBlocks.Node? Node
        {
            get => _Node;
            set
            {
                ThrowIfFrozen();
                _Node = value is null ? null : value.IsFrozen ? value : MyOrg.Models.MemBlocks.Node.CreateFrom(value);
                _Node_isPacked = false;
            }
        }
        MyOrg.Models.INode? ITree.Node
        {
            get => _Node;
            set
            {
                ThrowIfFrozen();
                _Node = value is null ? null : MyOrg.Models.MemBlocks.Node.CreateFrom(value);
                _Node_isPacked = false;
            }
        }

        public bool Equals(Tree? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyBlock.Span.SequenceEqual(other._readonlyBlock.Span)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Tree other && Equals(other);
        public static bool operator ==(Tree? left, Tree? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Tree? left, Tree? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_readonlyBlock.Length);
#if NET8_0_OR_GREATER
            result.AddBytes(_readonlyBlock.Span);
#else
            var byteSpan = _readonlyBlock.Span;
            for (int i = 0; i < byteSpan.Length; i++)
            {
                result.Add(byteSpan[i]);
            }
#endif
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
