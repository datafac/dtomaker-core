// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;
using DataFac.Storage;

namespace MyOrg.Models.MemBlocks
{
    public partial class Tree : DTOMaker.Runtime.MemBlocks.EntityBase, ITree, IEquatable<Tree>
    {
        // Derived entities: 0

        private const long BlockSignatureCode = 89980L;
        private const long BlockStructureCode = 129L;
        private const int ClassHeight = 1;
        private const int BlockOffset = 64;
        private const int BlockLength = 256;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        public new const string EntityId = "01234567-89ab-cdef-0206-456789abcdef";
        private static readonly Guid EntityGuid = new Guid("01234567-89ab-cdef-0206-456789abcdef");
        private static readonly BlockStructure _structure = new BlockStructure(BlockSignatureCode, BlockStructureCode, EntityGuid);

        public new static Tree CreateFrom(Tree source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.Tree(source)
            };
        }

        public new static Tree CreateFrom(MyOrg.Models.ITree source)
        {
            if (source is Tree concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.Tree(source)
            };
        }

        public new static Tree CreateFrom(ReadOnlyMemory<byte> buffer)
        {
            BlockStructure thatStructure = new BlockStructure(buffer.Span);
            string entityIdStr = thatStructure.EntityGuid.ToString("D");
            return entityIdStr switch
            {
                _ => new MyOrg.Models.MemBlocks.Tree(buffer)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;

        protected override IFreezable OnPartCopy() => new Tree(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
            _Left?.Freeze();
            _Right?.Freeze();
            _Node?.Freeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
            await Left_Pack(dataStore);
            await Right_Pack(dataStore);
            await Node_Pack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
            await Left_Unpack(dataStore, depth);
            await Right_Unpack(dataStore, depth);
            await Node_Unpack(dataStore, depth);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0    64        Tree    LE    Left
        //     2    64    64        Tree    LE    Right
        //     3   128    64        Node    LE    Node
        // ------------------------------------------------------------

        protected Tree(BlockStructure structure) : base(structure)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        public Tree() : base(_structure)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected Tree(BlockStructure structure, Tree source) : base(structure, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        public Tree(Tree source) : base(_structure, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected Tree(BlockStructure structure, ITree source) : base(structure, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
            _Left = source.Left is null ? null : MyOrg.Models.MemBlocks.Tree.CreateFrom(source.Left);
            _Right = source.Right is null ? null : MyOrg.Models.MemBlocks.Tree.CreateFrom(source.Right);
            _Node = source.Node is null ? null : MyOrg.Models.MemBlocks.Node.CreateFrom(source.Node);
        }

        public Tree(ITree source) : base(_structure, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
            _Left = source.Left is null ? null : MyOrg.Models.MemBlocks.Tree.CreateFrom(source.Left);
            _Right = source.Right is null ? null : MyOrg.Models.MemBlocks.Tree.CreateFrom(source.Right);
            _Node = source.Node is null ? null : MyOrg.Models.MemBlocks.Node.CreateFrom(source.Node);
        }

        protected Tree(BlockStructure structure, ReadOnlyMemory<byte> buffer) : base(structure, buffer)
        {
            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);
            _writableLocalBlock = Memory<byte>.Empty;
        }
        public Tree(ReadOnlyMemory<byte> buffer) : base(_structure, buffer)
        {
            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);
            _writableLocalBlock = Memory<byte>.Empty;
        }

        private async ValueTask Left_Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = default;
            if (_Left is not null)
            {
                await _Left.Pack(dataStore);
                var buffer = _Left.GetBuffer();
                var blob = BlobData.UnsafeWrap(buffer);
                blobId = await dataStore.PutBlob(blob);
            }
            Codec_BlobId_NE.WriteToSpan(_writableLocalBlock.Slice(0, 64).Span, blobId);
        }
        private async ValueTask Left_Unpack(IDataStore dataStore, int depth)
        {
            _Left = null;
            BlobIdV1 blobId = Codec_BlobId_NE.ReadFromSpan(_readonlyLocalBlock.Slice(0, 64).Span);
            if (!blobId.IsEmpty)
            {
                BlobData? blob = await dataStore.GetBlob(blobId);
                if (blob is null) throw new InvalidDataException($"Blob not found: {blobId}");
                _Left = MyOrg.Models.MemBlocks.Tree.CreateFrom(blob.Value.Memory);
                await _Left.Unpack(dataStore, depth - 1);
            }
        }
        private MyOrg.Models.MemBlocks.Tree? _Left;
        public MyOrg.Models.MemBlocks.Tree? Left
        {
            get => IfUnpacked(_Left);
            set => _Left = IfNotFrozen(value);
        }
        MyOrg.Models.ITree? ITree.Left
        {
            get => IfUnpacked(_Left);
            set => _Left = IfNotFrozen(value is null ? null : MyOrg.Models.MemBlocks.Tree.CreateFrom(value));
        }

        private async ValueTask Right_Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = default;
            if (_Right is not null)
            {
                await _Right.Pack(dataStore);
                var buffer = _Right.GetBuffer();
                var blob = BlobData.UnsafeWrap(buffer);
                blobId = await dataStore.PutBlob(blob);
            }
            Codec_BlobId_NE.WriteToSpan(_writableLocalBlock.Slice(64, 64).Span, blobId);
        }
        private async ValueTask Right_Unpack(IDataStore dataStore, int depth)
        {
            _Right = null;
            BlobIdV1 blobId = Codec_BlobId_NE.ReadFromSpan(_readonlyLocalBlock.Slice(64, 64).Span);
            if (!blobId.IsEmpty)
            {
                BlobData? blob = await dataStore.GetBlob(blobId);
                if (blob is null) throw new InvalidDataException($"Blob not found: {blobId}");
                _Right = MyOrg.Models.MemBlocks.Tree.CreateFrom(blob.Value.Memory);
                await _Right.Unpack(dataStore, depth - 1);
            }
        }
        private MyOrg.Models.MemBlocks.Tree? _Right;
        public MyOrg.Models.MemBlocks.Tree? Right
        {
            get => IfUnpacked(_Right);
            set => _Right = IfNotFrozen(value);
        }
        MyOrg.Models.ITree? ITree.Right
        {
            get => IfUnpacked(_Right);
            set => _Right = IfNotFrozen(value is null ? null : MyOrg.Models.MemBlocks.Tree.CreateFrom(value));
        }

        private async ValueTask Node_Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = default;
            if (_Node is not null)
            {
                await _Node.Pack(dataStore);
                var buffer = _Node.GetBuffer();
                var blob = BlobData.UnsafeWrap(buffer);
                blobId = await dataStore.PutBlob(blob);
            }
            Codec_BlobId_NE.WriteToSpan(_writableLocalBlock.Slice(128, 64).Span, blobId);
        }
        private async ValueTask Node_Unpack(IDataStore dataStore, int depth)
        {
            _Node = null;
            BlobIdV1 blobId = Codec_BlobId_NE.ReadFromSpan(_readonlyLocalBlock.Slice(128, 64).Span);
            if (!blobId.IsEmpty)
            {
                BlobData? blob = await dataStore.GetBlob(blobId);
                if (blob is null) throw new InvalidDataException($"Blob not found: {blobId}");
                _Node = MyOrg.Models.MemBlocks.Node.CreateFrom(blob.Value.Memory);
                await _Node.Unpack(dataStore, depth - 1);
            }
        }
        private MyOrg.Models.MemBlocks.Node? _Node;
        public MyOrg.Models.MemBlocks.Node? Node
        {
            get => IfUnpacked(_Node);
            set => _Node = IfNotFrozen(value);
        }
        MyOrg.Models.INode? ITree.Node
        {
            get => IfUnpacked(_Node);
            set => _Node = IfNotFrozen(value is null ? null : MyOrg.Models.MemBlocks.Node.CreateFrom(value));
        }


        public bool Equals(Tree? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!_readonlyTotalBlock.Span.SequenceEqual(other._readonlyTotalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is Tree other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(Tree? left, Tree? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Tree? left, Tree? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
