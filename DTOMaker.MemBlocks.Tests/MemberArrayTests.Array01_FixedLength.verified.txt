// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using DataFac.Memory;
using DataFac.Runtime;
namespace MyOrg.Models.MemBlocks
{
    public sealed partial class MyDTO { }
    public partial class MyDTO : EntityBase, IMyDTO, IFreezable
    {
        private const int ClassHeight = 1;
        private const int BlockLength = 64;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;

        protected override int OnGetClassHeight() => ClassHeight;
        protected override void OnGetBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnGetBuffers(buffers);
            var block = IsFrozen ? _readonlyBlock : _writableBlock.ToArray();
            buffers[ClassHeight - 1] = block;
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0     8     8  Double  LE    Values
        // ------------------------------------------------------------

        public MyDTO()
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
        }

        public MyDTO(MyDTO source, bool frozen = false) : base(source, frozen)
        {
            _writableBlock = source._writableBlock.ToArray();
            _readonlyBlock = _writableBlock;
        }

        public MyDTO(IMyDTO source, bool frozen = false) : base(source, frozen)
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
            this.Values = source.Values;
        }

        public MyDTO(ReadOnlyMemory<ReadOnlyMemory<byte>> buffers) : base(buffers)
        {
            ReadOnlyMemory<byte> source = buffers.Span[ClassHeight - 1];
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source.Slice(0, BlockLength);
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.Span.CopyTo(memory.Span);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
        }

        public ReadOnlyMemory<Double> Values
        {
            get
            {
                var sourceSpan = _readonlyBlock.Slice(0, 8 * 8).Span;
                if (BitConverter.IsLittleEndian != false)
                {
                    // endian match
                    return MemoryMarshal.Cast<byte, Double>(sourceSpan).ToArray(); // todo alloc!
                }
                else
                {
                    // endian mismatch - decode each element
                    var target = new Double[8]; // todo alloc!
                    Span<Double> targetSpan = target.AsSpan();
                    for (int i = 0; i < 8; i++)
                    {
                        var elementSpan = sourceSpan.Slice(8 * i, 8);
                        targetSpan[i] = Codec_Double_LE.ReadFromSpan(elementSpan);
                    }
                    return target;
                }
            }

            set
            {
                ThrowExceptionIfFrozen();
                var targetSpan = _writableBlock.Slice(0, 8 * 8).Span;
                targetSpan.Clear();
                if (BitConverter.IsLittleEndian != false)
                {
                    // endian match
                    value.Span.CopyTo(MemoryMarshal.Cast<byte, Double>(targetSpan));
                }
                else
                {
                    // endian mismatch - encode each element
                    var sourceSpan = value.Span;
                    for (int i = 0; i < sourceSpan.Length; i++)
                    {
                        var elementSpan = targetSpan.Slice(8 * i, 8);
                        Codec_Double_LE.WriteToSpan(elementSpan, sourceSpan[i]);
                    }
                }
            }
        }

    }
}
