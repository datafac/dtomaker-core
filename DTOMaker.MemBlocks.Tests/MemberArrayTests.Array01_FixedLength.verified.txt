// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using DataFac.Memory;
using DataFac.Runtime;
namespace MyOrg.Models.MemBlocks
{
    public sealed partial class MyDTO : IMyDTO, IFreezable
    {
        private const int BlockLength = 64;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;
        public ReadOnlyMemory<byte> Block => _frozen ? _readonlyBlock : _writableBlock.ToArray();

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0     8     8  Double  LE    Values
        // ------------------------------------------------------------

        public MyDTO() => _readonlyBlock = _writableBlock = new byte[BlockLength];

        public MyDTO(ReadOnlySpan<byte> source, bool frozen)
        {
            Memory<byte> memory = new byte[BlockLength];
            if (source.Length <= BlockLength)
                source.CopyTo(memory.Span);
            else
                source.Slice(0, BlockLength).CopyTo(memory.Span);
            _readonlyBlock = memory;
            _writableBlock = memory;
            _frozen = frozen;
        }

        public MyDTO(ReadOnlyMemory<byte> source)
        {
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source.Slice(0, BlockLength);
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.Slice(0, BlockLength).Span.CopyTo(memory.Span);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
            _frozen = true;
        }
        // todo move to base
        private volatile bool _frozen = false;
        public bool IsFrozen() => _frozen;
        public IFreezable PartCopy() => new MyDTO(this);

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void ThrowIsFrozenException(string? methodName) => throw new InvalidOperationException($"Cannot call {methodName} when frozen.");

        public void Freeze()
        {
            if (_frozen) return;
            _frozen = true;
            // todo freeze base
            // todo freeze model type refs
        }

        public MyDTO(MyDTO source)
        {
            // todo base ctor
            // todo freezable members
            _writableBlock = source._writableBlock.ToArray();
            _readonlyBlock = _writableBlock;
            _frozen = false;
        }

        public MyDTO(IMyDTO source) : this(ReadOnlySpan<byte>.Empty, false)
        {
            // todo base ctor
            // todo freezable members
            this.Values = source.Values;
        }

        public ReadOnlyMemory<Double> Values
        {
            get
            {
                var sourceSpan = _readonlyBlock.Slice(0, 8 * 8).Span;
                if (BitConverter.IsLittleEndian != false)
                {
                    // endian match
                    return MemoryMarshal.Cast<byte, Double>(sourceSpan).ToArray(); // todo alloc!
                }
                else
                {
                    // endian mismatch - decode each element
                    var target = new Double[8]; // todo alloc!
                    Span<Double> targetSpan = target.AsSpan();
                    for (int i = 0; i < 8; i++)
                    {
                        var elementSpan = sourceSpan.Slice(8 * i, 8);
                        targetSpan[i] = Codec_Double_LE.ReadFromSpan(elementSpan);
                    }
                    return target;
                }
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Values));
                var targetSpan = _writableBlock.Slice(0, 8 * 8).Span;
                targetSpan.Clear();
                if (BitConverter.IsLittleEndian != false)
                {
                    // endian match
                    value.Span.CopyTo(MemoryMarshal.Cast<byte, Double>(targetSpan));
                }
                else
                {
                    // endian mismatch - encode each element
                    var sourceSpan = value.Span;
                    for (int i = 0; i < sourceSpan.Length; i++)
                    {
                        var elementSpan = targetSpan.Slice(8 * i, 8);
                        Codec_Double_LE.WriteToSpan(elementSpan, sourceSpan[i]);
                    }
                }
            }
        }

    }
}
