// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;
using DataFac.Storage;

namespace MyOrg.Models.MemBlocks
{
    public partial class NumericNode : MyOrg.Models.MemBlocks.Node, INumericNode, IEquatable<NumericNode>
    {
        // Derived entities: 2
        // - DoubleNode
        // - Int64Node

        private const long BlockSignatureCode = 89980L;
        private const long BlockStructureCode = 66L;
        private const int ClassHeight = 2;
        private const int BlockOffset = 128;
        private const int BlockLength = 0;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        public new const string EntityId = "01234567-89ab-cdef-0202-456789abcdef";
        private static readonly Guid EntityGuid = new Guid("01234567-89ab-cdef-0202-456789abcdef");
        private static readonly BlockStructure _structure = new BlockStructure(BlockSignatureCode, BlockStructureCode, EntityGuid);

        public new static NumericNode CreateFrom(NumericNode source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.MemBlocks.DoubleNode source2 => new MyOrg.Models.MemBlocks.DoubleNode(source2),
                MyOrg.Models.MemBlocks.Int64Node source2 => new MyOrg.Models.MemBlocks.Int64Node(source2),
                _ => new MyOrg.Models.MemBlocks.NumericNode(source)
            };
        }

        public new static NumericNode CreateFrom(MyOrg.Models.INumericNode source)
        {
            if (source is NumericNode concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IDoubleNode source2 => new MyOrg.Models.MemBlocks.DoubleNode(source2),
                MyOrg.Models.IInt64Node source2 => new MyOrg.Models.MemBlocks.Int64Node(source2),
                _ => new MyOrg.Models.MemBlocks.NumericNode(source)
            };
        }

        public new static NumericNode CreateFrom(ReadOnlyMemory<byte> buffer)
        {
            BlockStructure thatStructure = new BlockStructure(buffer.Span);
            string entityIdStr = thatStructure.EntityGuid.ToString("D");
            return entityIdStr switch
            {
                MyOrg.Models.MemBlocks.DoubleNode.EntityId => new MyOrg.Models.MemBlocks.DoubleNode(buffer),
                MyOrg.Models.MemBlocks.Int64Node.EntityId => new MyOrg.Models.MemBlocks.Int64Node(buffer),
                _ => new MyOrg.Models.MemBlocks.NumericNode(buffer)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;

        protected override IFreezable OnPartCopy() => new NumericNode(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        // ------------------------------------------------------------

        protected NumericNode(BlockStructure structure) : base(structure)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        public NumericNode() : base(_structure)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected NumericNode(BlockStructure structure, NumericNode source) : base(structure, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        public NumericNode(NumericNode source) : base(_structure, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected NumericNode(BlockStructure structure, INumericNode source) : base(structure, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        public NumericNode(INumericNode source) : base(_structure, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected NumericNode(BlockStructure structure, ReadOnlyMemory<byte> buffer) : base(structure, buffer)
        {
            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);
            _writableLocalBlock = Memory<byte>.Empty;
        }
        public NumericNode(ReadOnlyMemory<byte> buffer) : base(_structure, buffer)
        {
            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);
            _writableLocalBlock = Memory<byte>.Empty;
        }


        public bool Equals(NumericNode? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!_readonlyTotalBlock.Span.SequenceEqual(other._readonlyTotalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is NumericNode other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(NumericNode? left, NumericNode? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(NumericNode? left, NumericNode? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
