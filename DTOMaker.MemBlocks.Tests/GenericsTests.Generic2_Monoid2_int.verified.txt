// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using DataFac.Memory;
using DataFac.Storage;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;

namespace MyOrg.Models.MemBlocks
{
    public partial class Monoid_1_Int32 : DTOMaker.Runtime.MemBlocks.EntityBase, IMonoid<Int32>, IEquatable<Monoid_1_Int32>
    {
        // Derived entities: 1
        // - MyDTO

        private const long BlockStructureCode = 49L;
        private const int ClassHeight = 1;
        private const int BlockLength = 4;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        private static readonly BlockHeader _header = BlockHeader.CreateNew(10039, BlockStructureCode);

        public new static Monoid_1_Int32 CreateFrom(Monoid_1_Int32 source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.MemBlocks.MyDTO source2 => new MyOrg.Models.MemBlocks.MyDTO(source2),
                _ => new MyOrg.Models.MemBlocks.Monoid_1_Int32(source)
            };
        }

        public new static Monoid_1_Int32 CreateFrom(MyOrg.Models.IMonoid<Int32> source)
        {
            if (source is Monoid_1_Int32 concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IMyDTO source2 => new MyOrg.Models.MemBlocks.MyDTO(source2),
                _ => new MyOrg.Models.MemBlocks.Monoid_1_Int32(source)
            };
        }

        public new static Monoid_1_Int32 CreateFrom(ReadOnlySequence<byte> buffers)
        {
            SourceBlocks blocks = SourceBlocks.ParseFrom(buffers);
            return blocks.Header.EntityId switch
            {
                2 => new MyOrg.Models.MemBlocks.MyDTO(blocks),
                _ => new MyOrg.Models.MemBlocks.Monoid_1_Int32(blocks)
            };
        }

        protected override int OnGetEntityId() => 10039;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override ReadOnlySequenceBuilder<byte> OnSequenceBuilder(ReadOnlySequenceBuilder<byte> builder) => base.OnSequenceBuilder(builder).Append(_readonlyLocalBlock);
        protected override IFreezable OnPartCopy() => new Monoid_1_Int32(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0     4        Int32   LE    Value
        // ------------------------------------------------------------

        protected Monoid_1_Int32(BlockHeader header) : base(header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }
        public Monoid_1_Int32() : base(_header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }

        protected Monoid_1_Int32(BlockHeader header, Monoid_1_Int32 source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            this.Value = source.Value;
        }
        public Monoid_1_Int32(Monoid_1_Int32 source) : this(_header, source) { }

        protected Monoid_1_Int32(BlockHeader header, IMonoid<Int32> source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            this.Value = source.Value;
        }
        public Monoid_1_Int32(IMonoid<Int32> source) : this(_header, source) { }

        protected Monoid_1_Int32(BlockHeader header, SourceBlocks sourceBlocks) : base(header, sourceBlocks)
        {
            var sourceBlock = sourceBlocks.Blocks.Span[ClassHeight];
            if (sourceBlock.Length < BlockLength)
            {
                // source too small - allocate new
                _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
                sourceBlock.CopyTo(_writableLocalBlock);
            }
            else
            {
                _readonlyLocalBlock = sourceBlock;
                _writableLocalBlock = Memory<byte>.Empty;
            }
        }
        internal Monoid_1_Int32(SourceBlocks sourceBlocks) : this(_header, sourceBlocks) { }
        public Monoid_1_Int32(ReadOnlySequence<byte> buffers) : this(_header, SourceBlocks.ParseFrom(buffers)) { }

        public Int32 Value
        {
            get => Codec_Int32_LE.ReadFromSpan(_readonlyLocalBlock.Slice(0, 4).Span);
            set => Codec_Int32_LE.WriteToSpan(_writableLocalBlock.Slice(0, 4).Span, IfNotFrozen(value));
        }


        public bool Equals(Monoid_1_Int32? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyLocalBlock.Span.SequenceEqual(other._readonlyLocalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is Monoid_1_Int32 other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(Monoid_1_Int32? left, Monoid_1_Int32? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Monoid_1_Int32? left, Monoid_1_Int32? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
