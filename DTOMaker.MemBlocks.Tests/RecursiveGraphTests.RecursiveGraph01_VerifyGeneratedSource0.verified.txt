// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;
using DataFac.Storage;

namespace MyOrg.Models.MemBlocks
{
    public partial class BooleanNode : MyOrg.Models.MemBlocks.Node, IBooleanNode, IEquatable<BooleanNode>
    {
        // Derived entities: 0

        private const long BlockSignatureCode = 89980L;
        private const long BlockStructureCode = 2L;
        private const int ClassHeight = 2;
        private const int BlockOffset = 128;
        private const int BlockLength = 1;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        public new const string EntityId = "01234567-89ab-cdef-0205-456789abcdef";
        private static readonly Guid EntityGuid = new Guid("01234567-89ab-cdef-0205-456789abcdef");
        private static readonly BlockStructure _structure = new BlockStructure(BlockSignatureCode, BlockStructureCode, EntityGuid);

        public new static BooleanNode CreateFrom(BooleanNode source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.BooleanNode(source)
            };
        }

        public new static BooleanNode CreateFrom(MyOrg.Models.IBooleanNode source)
        {
            if (source is BooleanNode concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.MemBlocks.BooleanNode(source)
            };
        }

        public new static BooleanNode CreateFrom(ReadOnlyMemory<byte> buffer)
        {
            BlockStructure thatStructure = new BlockStructure(buffer.Span);
            string entityIdStr = thatStructure.EntityGuid.ToString("D");
            return entityIdStr switch
            {
                _ => new MyOrg.Models.MemBlocks.BooleanNode(buffer)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;

        protected override IFreezable OnPartCopy() => new BooleanNode(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0     1        Boolean LE    Value
        // ------------------------------------------------------------

        protected BooleanNode(BlockStructure structure) : base(structure)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        public BooleanNode() : base(_structure)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected BooleanNode(BlockStructure structure, BooleanNode source) : base(structure, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        public BooleanNode(BooleanNode source) : base(_structure, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected BooleanNode(BlockStructure structure, IBooleanNode source) : base(structure, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
            this.Value = source.Value;
        }

        public BooleanNode(IBooleanNode source) : base(_structure, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
            this.Value = source.Value;
        }

        protected BooleanNode(BlockStructure structure, ReadOnlyMemory<byte> buffer) : base(structure, buffer)
        {
            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);
            _writableLocalBlock = Memory<byte>.Empty;
        }
        public BooleanNode(ReadOnlyMemory<byte> buffer) : base(_structure, buffer)
        {
            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);
            _writableLocalBlock = Memory<byte>.Empty;
        }

        public Boolean Value
        {
            get => Codec_Boolean_LE.ReadFromSpan(_readonlyLocalBlock.Slice(0, 1).Span);
            set => Codec_Boolean_LE.WriteToSpan(_writableLocalBlock.Slice(0, 1).Span, IfNotFrozen(value));
        }


        public bool Equals(BooleanNode? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!_readonlyTotalBlock.Span.SequenceEqual(other._readonlyTotalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is BooleanNode other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(BooleanNode? left, BooleanNode? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(BooleanNode? left, BooleanNode? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
