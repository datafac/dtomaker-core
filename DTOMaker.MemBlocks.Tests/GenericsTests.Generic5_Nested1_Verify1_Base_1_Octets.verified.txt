// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using DataFac.Memory;
using DataFac.Storage;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;

namespace MyOrg.Models.MemBlocks
{
    public partial class Base_1_Octets : DTOMaker.Runtime.MemBlocks.EntityBase, IBase<Octets>, IEquatable<Base_1_Octets>
    {
        // Derived entities: 2
        // - MyPoco1
        // - Poco_2_String_Octets

        private const long BlockStructureCode = 113L;
        private const int ClassHeight = 1;
        private const int BlockLength = 64;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        private static readonly BlockHeader _header = BlockHeader.CreateNew(112199, BlockStructureCode);

        public new static Base_1_Octets CreateFrom(Base_1_Octets source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.MemBlocks.MyPoco1 source2 => new MyOrg.Models.MemBlocks.MyPoco1(source2),
                MyOrg.Models.MemBlocks.Poco_2_String_Octets source2 => new MyOrg.Models.MemBlocks.Poco_2_String_Octets(source2),
                _ => new MyOrg.Models.MemBlocks.Base_1_Octets(source)
            };
        }

        public new static Base_1_Octets CreateFrom(MyOrg.Models.IBase<Octets> source)
        {
            if (source is Base_1_Octets concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IMyPoco1 source2 => new MyOrg.Models.MemBlocks.MyPoco1(source2),
                MyOrg.Models.IPoco<String, Octets> source2 => new MyOrg.Models.MemBlocks.Poco_2_String_Octets(source2),
                _ => new MyOrg.Models.MemBlocks.Base_1_Octets(source)
            };
        }

        public new static Base_1_Octets CreateFrom(ReadOnlySequence<byte> buffers)
        {
            SourceBlocks blocks = SourceBlocks.ParseFrom(buffers);
            return blocks.Header.EntityId switch
            {
                1 => new MyOrg.Models.MemBlocks.MyPoco1(blocks),
                116661594 => new MyOrg.Models.MemBlocks.Poco_2_String_Octets(blocks),
                _ => new MyOrg.Models.MemBlocks.Base_1_Octets(blocks)
            };
        }

        protected override int OnGetEntityId() => 112199;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override ReadOnlySequenceBuilder<byte> OnSequenceBuilder(ReadOnlySequenceBuilder<byte> builder) => base.OnSequenceBuilder(builder).Append(_readonlyLocalBlock);
        protected override IFreezable OnPartCopy() => new Base_1_Octets(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
            await Value_Pack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
            await Value_Unpack(dataStore);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0    64        Octets  LE    Value
        // ------------------------------------------------------------

        protected Base_1_Octets(BlockHeader header) : base(header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }
        public Base_1_Octets() : base(_header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }

        protected Base_1_Octets(BlockHeader header, Base_1_Octets source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            _Value = source._Value;
        }
        public Base_1_Octets(Base_1_Octets source) : this(_header, source) { }

        protected Base_1_Octets(BlockHeader header, IBase<Octets> source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            _Value = source.Value;
        }
        public Base_1_Octets(IBase<Octets> source) : this(_header, source) { }

        protected Base_1_Octets(BlockHeader header, SourceBlocks sourceBlocks) : base(header, sourceBlocks)
        {
            var sourceBlock = sourceBlocks.Blocks.Span[ClassHeight];
            if (sourceBlock.Length < BlockLength)
            {
                // source too small - allocate new
                _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
                sourceBlock.CopyTo(_writableLocalBlock);
            }
            else
            {
                _readonlyLocalBlock = sourceBlock;
                _writableLocalBlock = Memory<byte>.Empty;
            }
        }
        internal Base_1_Octets(SourceBlocks sourceBlocks) : this(_header, sourceBlocks) { }
        public Base_1_Octets(ReadOnlySequence<byte> buffers) : this(_header, SourceBlocks.ParseFrom(buffers)) { }

        private async ValueTask Value_Pack(IDataStore dataStore)
        {
            var buffer = _Value.AsMemory();
            BlobIdV1 blobId = await dataStore.PutBlob(buffer);
            blobId.WriteTo(_writableLocalBlock.Slice(0, 64).Span);
        }
        private async ValueTask Value_Unpack(IDataStore dataStore)
        {
            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(0, 64));
            var blob = await dataStore.GetBlob(blobId);
            _Value = blob is null ? Octets.Empty : Octets.UnsafeWrap(blob.Value);

        }
        private Octets _Value = Octets.Empty;
        public Octets Value
        {
            get => IfUnpacked(_Value);
            set => _Value = IfNotFrozen(value);
        }


        public bool Equals(Base_1_Octets? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyLocalBlock.Span.SequenceEqual(other._readonlyLocalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is Base_1_Octets other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(Base_1_Octets? left, Base_1_Octets? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Base_1_Octets? left, Base_1_Octets? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
