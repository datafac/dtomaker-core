// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DataFac.Memory;
using DataFac.Storage;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;

namespace MyOrg.Models.MemBlocks
{
    public partial class Node : DTOMaker.Runtime.MemBlocks.EntityBase, INode, IEquatable<Node>
    {
        // Derived entities: 5
        // - BooleanNode
        // - DoubleNode
        // - Int64Node
        // - NumericNode
        // - StringNode

        private const long BlockStructureCode = 65L;
        private const int ClassHeight = 1;
        private const int BlockLength = 16;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        public new const string EntityId = "01234567-89ab-cdef-0123-456789abcdef";
        private static readonly Guid EntityGuid = new Guid("01234567-89ab-cdef-0123-456789abcdef");
        private static readonly BlockHeader _header = BlockHeader.CreateNew(BlockStructureCode, EntityGuid);

        public new static Node CreateFrom(Node source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.MemBlocks.DoubleNode source2 => new MyOrg.Models.MemBlocks.DoubleNode(source2),
                MyOrg.Models.MemBlocks.Int64Node source2 => new MyOrg.Models.MemBlocks.Int64Node(source2),
                MyOrg.Models.MemBlocks.BooleanNode source2 => new MyOrg.Models.MemBlocks.BooleanNode(source2),
                MyOrg.Models.MemBlocks.NumericNode source2 => new MyOrg.Models.MemBlocks.NumericNode(source2),
                MyOrg.Models.MemBlocks.StringNode source2 => new MyOrg.Models.MemBlocks.StringNode(source2),
                _ => new MyOrg.Models.MemBlocks.Node(source)
            };
        }

        public new static Node CreateFrom(MyOrg.Models.INode source)
        {
            if (source is Node concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IDoubleNode source2 => new MyOrg.Models.MemBlocks.DoubleNode(source2),
                MyOrg.Models.IInt64Node source2 => new MyOrg.Models.MemBlocks.Int64Node(source2),
                MyOrg.Models.IBooleanNode source2 => new MyOrg.Models.MemBlocks.BooleanNode(source2),
                MyOrg.Models.INumericNode source2 => new MyOrg.Models.MemBlocks.NumericNode(source2),
                MyOrg.Models.IStringNode source2 => new MyOrg.Models.MemBlocks.StringNode(source2),
                _ => new MyOrg.Models.MemBlocks.Node(source)
            };
        }

        public new static Node CreateFrom(ReadOnlySequence<byte> buffers)
        {
            ReadOnlyMemory<byte> buffer = buffers.Slice(0, 64).Compact();
            BlockHeader header = BlockHeader.ParseFrom(buffer);
            string entityIdStr = header.EntityGuid.ToString("D");
            return entityIdStr switch
            {
                MyOrg.Models.MemBlocks.BooleanNode.EntityId => new MyOrg.Models.MemBlocks.BooleanNode(buffers),
                MyOrg.Models.MemBlocks.DoubleNode.EntityId => new MyOrg.Models.MemBlocks.DoubleNode(buffers),
                MyOrg.Models.MemBlocks.Int64Node.EntityId => new MyOrg.Models.MemBlocks.Int64Node(buffers),
                MyOrg.Models.MemBlocks.NumericNode.EntityId => new MyOrg.Models.MemBlocks.NumericNode(buffers),
                MyOrg.Models.MemBlocks.StringNode.EntityId => new MyOrg.Models.MemBlocks.StringNode(buffers),
                _ => new MyOrg.Models.MemBlocks.Node(buffers)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override ReadOnlySequenceBuilder<byte> OnSequenceBuilder(ReadOnlySequenceBuilder<byte> builder) => base.OnSequenceBuilder(builder).Append(_readonlyLocalBlock);
        protected override IFreezable OnPartCopy() => new Node(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
            Key_Pack();
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
            Key_Unpack();
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //     1     0    16        String  LE    Key
        // ------------------------------------------------------------

        protected Node(BlockHeader header) : base(header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }
        public Node() : base(_header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }

        protected Node(BlockHeader header, Node source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }
        public Node(Node source) : base(_header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }

        protected Node(BlockHeader header, INode source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            _Key = source.Key;
        }

        public Node(INode source) : base(_header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            _Key = source.Key;
        }

        protected Node(BlockHeader header, SourceBlocks sourceBlocks) : base(header, sourceBlocks)
        {
            var sourceBlock = sourceBlocks.GetBlock(ClassHeight);
            if (sourceBlock.Length < BlockLength)
            {
                // source too short - allocate new
                Memory<byte> memory = new byte[BlockLength];
                sourceBlock.CopyTo(memory);
                _readonlyLocalBlock = memory;
            }
            else
            {
                _readonlyLocalBlock = sourceBlock;
            }
            _writableLocalBlock = Memory<byte>.Empty;
        }
        public Node(ReadOnlySequence<byte> buffers) : this(_header, SourceBlocks.ParseFrom(buffers))
        {
        }

        private void Key_Pack()
        {
            Codec_Memory_NE.WriteToSpan(_writableLocalBlock.Slice(0, 16),
                System.Text.Encoding.UTF8.GetBytes(_Key));
        }
        private void Key_Unpack()
        {
            ReadOnlyMemory<byte>? memory = Codec_Memory_NE.ReadFromMemory(_readonlyLocalBlock.Slice(0, 16));
#if NET8_0_OR_GREATER
            _Key = memory is null ? string.Empty : System.Text.Encoding.UTF8.GetString(memory.Value.Span);
#else
            _Key = memory is null ? string.Empty : System.Text.Encoding.UTF8.GetString(memory.Value.ToArray());
#endif
        }
        private string _Key = string.Empty;
        public string Key
        {
            get => IfUnpacked(_Key);
            set => _Key = IfNotFrozen(value);
        }


        public bool Equals(Node? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyLocalBlock.Span.SequenceEqual(other._readonlyLocalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is Node other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(Node? left, Node? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Node? left, Node? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
