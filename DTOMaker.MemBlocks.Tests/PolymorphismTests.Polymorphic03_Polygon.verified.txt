// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;
using DataFac.Storage;

namespace MyOrg.Models.MemBlocks
{
    public partial class Polygon : DTOMaker.Runtime.MemBlocks.EntityBase, IPolygon, IEquatable<Polygon>
    {
        // Derived entities: 6
        // - Equilateral
        // - Quadrilateral
        // - Rectangle
        // - RightTriangle
        // - Square
        // - Triangle

        private const long BlockStructureCode = 1L;
        private const int ClassHeight = 1;
        private const int BlockOffset = 64;
        private const int BlockLength = 0;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        public new const string EntityId = "01234567-89ab-cdef-0123-456789abcdef";
        private static readonly Guid EntityGuid = new Guid("01234567-89ab-cdef-0123-456789abcdef");
        private static readonly BlockHeader _header = BlockHeader.CreateNew(BlockStructureCode, EntityGuid);

        public new static Polygon CreateFrom(Polygon source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.MemBlocks.Equilateral source2 => new MyOrg.Models.MemBlocks.Equilateral(source2),
                MyOrg.Models.MemBlocks.Rectangle source2 => new MyOrg.Models.MemBlocks.Rectangle(source2),
                MyOrg.Models.MemBlocks.RightTriangle source2 => new MyOrg.Models.MemBlocks.RightTriangle(source2),
                MyOrg.Models.MemBlocks.Square source2 => new MyOrg.Models.MemBlocks.Square(source2),
                MyOrg.Models.MemBlocks.Quadrilateral source2 => new MyOrg.Models.MemBlocks.Quadrilateral(source2),
                MyOrg.Models.MemBlocks.Triangle source2 => new MyOrg.Models.MemBlocks.Triangle(source2),
                _ => new MyOrg.Models.MemBlocks.Polygon(source)
            };
        }

        public new static Polygon CreateFrom(MyOrg.Models.IPolygon source)
        {
            if (source is Polygon concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IEquilateral source2 => new MyOrg.Models.MemBlocks.Equilateral(source2),
                MyOrg.Models.IRectangle source2 => new MyOrg.Models.MemBlocks.Rectangle(source2),
                MyOrg.Models.IRightTriangle source2 => new MyOrg.Models.MemBlocks.RightTriangle(source2),
                MyOrg.Models.ISquare source2 => new MyOrg.Models.MemBlocks.Square(source2),
                MyOrg.Models.IQuadrilateral source2 => new MyOrg.Models.MemBlocks.Quadrilateral(source2),
                MyOrg.Models.ITriangle source2 => new MyOrg.Models.MemBlocks.Triangle(source2),
                _ => new MyOrg.Models.MemBlocks.Polygon(source)
            };
        }

        public new static Polygon CreateFrom(ReadOnlyMemory<byte> buffer)
        {
            BlockHeader header = BlockHeader.ParseFrom(buffer);
            string entityIdStr = header.EntityGuid.ToString("D");
            return entityIdStr switch
            {
                MyOrg.Models.MemBlocks.Equilateral.EntityId => new MyOrg.Models.MemBlocks.Equilateral(buffer),
                MyOrg.Models.MemBlocks.Quadrilateral.EntityId => new MyOrg.Models.MemBlocks.Quadrilateral(buffer),
                MyOrg.Models.MemBlocks.Rectangle.EntityId => new MyOrg.Models.MemBlocks.Rectangle(buffer),
                MyOrg.Models.MemBlocks.RightTriangle.EntityId => new MyOrg.Models.MemBlocks.RightTriangle(buffer),
                MyOrg.Models.MemBlocks.Square.EntityId => new MyOrg.Models.MemBlocks.Square(buffer),
                MyOrg.Models.MemBlocks.Triangle.EntityId => new MyOrg.Models.MemBlocks.Triangle(buffer),
                _ => new MyOrg.Models.MemBlocks.Polygon(buffer)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;

        protected override IFreezable OnPartCopy() => new Polygon(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        // ------------------------------------------------------------

        protected Polygon(BlockHeader header) : base(header)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }
        public Polygon() : base(_header)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected Polygon(BlockHeader header, Polygon source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }
        public Polygon(Polygon source) : base(_header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected Polygon(BlockHeader header, IPolygon source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        public Polygon(IPolygon source) : base(_header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);
        }

        protected Polygon(BlockHeader header, ReadOnlyMemory<byte> buffer) : base(header, buffer)
        {
            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);
            _writableLocalBlock = Memory<byte>.Empty;
        }
        public Polygon(ReadOnlyMemory<byte> buffer) : base(_header, buffer)
        {
            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);
            _writableLocalBlock = Memory<byte>.Empty;
        }


        public bool Equals(Polygon? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!_readonlyTotalBlock.Span.SequenceEqual(other._readonlyTotalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is Polygon other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(Polygon? left, Polygon? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Polygon? left, Polygon? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
