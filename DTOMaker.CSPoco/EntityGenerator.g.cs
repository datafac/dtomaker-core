using DTOMaker.Gentime;
namespace DTOMaker.CSPoco;
#pragma warning disable CS0162 // Unreachable code detected
public sealed class EntityGenerator : EntityGeneratorBase
{
    public EntityGenerator(ILanguage language) : base(language) { }
    protected override void OnGenerate(ModelScopeEntity entity)
    {
Emit("// <auto-generated>");
Emit("// This file was generated by DTOMaker.CSPoco.");
Emit("// NuGet: https://www.nuget.org/packages/DTOMaker.CSPoco");
Emit("// Warning: Changes made to this file will be lost if re-generated.");
Emit("// </auto-generated>");
if(false) {
Emit("#pragma warning disable CS0618 // Type or member is obsolete");
Emit("#pragma warning disable CS0162 // Unreachable code detected");
}
Emit("#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required");
Emit("#nullable enable");
Emit("using DTOMaker.Runtime;");
Emit("using DTOMaker.Runtime.CSPoco;");
Emit("using System;");
Emit("");
if(false) {
Emit("namespace T_BaseNameSpace_.CSPoco");
Emit("{");
Emit("    public interface IT_BaseName_ { }");
Emit("    public class T_BaseName_ : EntityBase, IT_BaseName_, IEquatable<T_BaseName_>");
Emit("    {");
Emit("        public T_BaseName_() { }");
Emit("        public T_BaseName_(IT_BaseName_ source, bool frozen = false) : base(source, frozen) { }");
Emit("        public bool Equals(T_BaseName_? other)");
Emit("        {");
Emit("            if (ReferenceEquals(this, other)) return true;");
Emit("            if (other is null) return false;");
Emit("            if (!base.Equals(other)) return false;");
Emit("            return true;");
Emit("        }");
Emit("        public override bool Equals(object? obj) => obj is T_BaseName_ other && Equals(other);");
Emit("        public override int GetHashCode() => base.GetHashCode();");
Emit("    }");
Emit("}");
}
Emit("namespace T_NameSpace_.CSPoco");
Emit("{");
    if(false) {
Emit("    using T_MemberType_ = System.Int32;");
Emit("    public interface IT_EntityName_ : T_BaseNameSpace_.CSPoco.IT_BaseName_");
Emit("    {");
Emit("        T_MemberType_? T_ScalarNullableMemberName_ { get; set; }");
Emit("        T_MemberType_ T_ScalarRequiredMemberName_ { get; set; }");
Emit("        ReadOnlyMemory<T_MemberType_> T_VectorMemberName_ { get; set; }");
Emit("    }");
    }
Emit("    public partial class T_EntityName_ : T_BaseNameSpace_.CSPoco.T_BaseName_, IT_EntityName_, IEquatable<T_EntityName_>");
Emit("    {");
Emit("        // Derived entities: T_DerivedEntityCount_");
        foreach(var derived in entity.DerivedEntities) {
        using var _ = NewScope(derived);
Emit("        // - T_EntityName_");
        }
        if(false) {
Emit("        private const int T_ScalarNullableMemberSequence_ = 1;");
Emit("        private const int T_ScalarRequiredMemberSequence_ = 2;");
Emit("        private const int T_VectorMemberSequence_ = 3;");
Emit("        private const string T_MemberObsoleteMessage_ = null;");
Emit("        private const bool T_MemberObsoleteIsError_ = false;");
        }
Emit("");
Emit("        protected override void OnFreeze()");
Emit("        {");
Emit("            base.OnFreeze();");
Emit("            // todo freezable members");
Emit("        }");
Emit("");
Emit("        protected override IFreezable OnPartCopy() => new T_EntityName_(this);");
Emit("");
Emit("        public T_EntityName_() { }");
Emit("        public T_EntityName_(IT_EntityName_ source, bool frozen = false) : base(source, frozen)");
Emit("        {");
Emit("            // todo entity members");
            foreach(var member in entity.Members) {
            using var _ = NewScope(member);
            if(member.IsVector) {
Emit("            _T_VectorMemberName_ = source.T_VectorMemberName_;");
            } else {
            if(member.IsNullable) {
Emit("            _T_ScalarNullableMemberName_ = source.T_ScalarNullableMemberName_;");
            } else {
Emit("            _T_ScalarRequiredMemberName_ = source.T_ScalarRequiredMemberName_;");
            }
            }
            }
Emit("        }");
Emit("");
        foreach(var member in entity.Members) {
        using var _ = NewScope(member);
        if(member.IsVector) {
Emit("        private ReadOnlyMemory<T_MemberType_> _T_VectorMemberName_;");
        if(member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        public ReadOnlyMemory<T_MemberType_> T_VectorMemberName_");
Emit("        {");
Emit("            get => _T_VectorMemberName_;");
Emit("            set => _T_VectorMemberName_ = IfNotFrozen(ref value);");
Emit("        }");
Emit("");
        } else {
        if(member.IsNullable) {
Emit("        private T_MemberType_? _T_ScalarNullableMemberName_;");
        } else {
Emit("        private T_MemberType_ _T_ScalarRequiredMemberName_;");
        }
        if(member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
        if(member.IsNullable) {
Emit("        public T_MemberType_? T_ScalarNullableMemberName_");
Emit("        {");
Emit("            get => _T_ScalarNullableMemberName_;");
Emit("            set => _T_ScalarNullableMemberName_ = IfNotFrozen(ref value);");
Emit("        }");
        } else {
Emit("        public T_MemberType_ T_ScalarRequiredMemberName_");
Emit("        {");
Emit("            get => _T_ScalarRequiredMemberName_;");
Emit("            set => _T_ScalarRequiredMemberName_ = IfNotFrozen(ref value);");
Emit("        }");
        }
Emit("");
        }
        }
Emit("");
Emit("        public bool Equals(T_EntityName_? other)");
Emit("        {");
Emit("            if (ReferenceEquals(this, other)) return true;");
Emit("            if (other is null) return false;");
Emit("            if (!base.Equals(other)) return false;");
            foreach(var member in entity.Members) {
            using var _ = NewScope(member);
            if(member.IsVector) {
Emit("            if (!_T_VectorMemberName_.Span.SequenceEqual(other.T_VectorMemberName_.Span)) return false;");
            } else {
            if(member.IsNullable) {
Emit("            if (_T_ScalarNullableMemberName_ != other.T_ScalarNullableMemberName_) return false;");
            } else {
Emit("            if (_T_ScalarRequiredMemberName_ != other.T_ScalarRequiredMemberName_) return false;");
            }
            }
            }
Emit("            return true;");
Emit("        }");
Emit("");
Emit("        public override bool Equals(object? obj) => obj is T_EntityName_ other && Equals(other);");
Emit("        public static bool operator ==(T_EntityName_? left, T_EntityName_? right) => left is not null ? left.Equals(right) : (right is null);");
Emit("        public static bool operator !=(T_EntityName_? left, T_EntityName_? right) => left is not null ? !left.Equals(right) : (right is not null);");
Emit("");
Emit("        private int CalcHashCode()");
Emit("        {");
Emit("            HashCode result = new HashCode();");
Emit("            result.Add(base.GetHashCode());");
            foreach(var member in entity.Members) {
            using var _ = NewScope(member);
            if(member.IsVector) {
Emit("            result.Add(_T_VectorMemberName_.Length);");
Emit("            for (int i = 0; i < _T_VectorMemberName_.Length; i++)");
Emit("            {");
Emit("                result.Add(_T_VectorMemberName_.Span[i]);");
Emit("            }");
            } else {
            if(member.IsNullable) {
Emit("            result.Add(_T_ScalarNullableMemberName_);");
            } else {
Emit("            result.Add(_T_ScalarRequiredMemberName_);");
            }
            }
            }
Emit("            return result.ToHashCode();");
Emit("        }");
Emit("");
Emit("        private int? _hashCode;");
Emit("        public override int GetHashCode()");
Emit("        {");
Emit("            if (_hashCode.HasValue) return _hashCode.Value;");
Emit("            if (!IsFrozen) return CalcHashCode();");
Emit("            _hashCode = CalcHashCode();");
Emit("            return _hashCode.Value;");
Emit("        }");
Emit("");
Emit("    }");
Emit("}");
    }
}
