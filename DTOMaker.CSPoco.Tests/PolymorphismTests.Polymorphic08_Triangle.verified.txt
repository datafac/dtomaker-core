// <auto-generated>
// This file was generated by DTOMaker.CSPoco.
// NuGet: https://www.nuget.org/packages/DTOMaker.CSPoco
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DTOMaker.Runtime;
using DTOMaker.Runtime.CSPoco;
using System;

namespace MyOrg.Models.CSPoco
{
    public partial class Triangle : MyOrg.Models.CSPoco.Polygon, ITriangle, IEquatable<Triangle>
    {
        // Derived entities: 2
        // - Equilateral
        // - RightTriangle

        public new const string EntityId = "Triangle";

        public new static Triangle? CreateFrom(string entityId, MyOrg.Models.ITriangle source)
        {
            return entityId switch
            {
                MyOrg.Models.CSPoco.Equilateral.EntityId => source is MyOrg.Models.IEquilateral source2 ? new MyOrg.Models.CSPoco.Equilateral(source2) : null,
                MyOrg.Models.CSPoco.RightTriangle.EntityId => source is MyOrg.Models.IRightTriangle source2 ? new MyOrg.Models.CSPoco.RightTriangle(source2) : null,
                _ => throw new ArgumentOutOfRangeException(nameof(entityId), entityId, null)
            };
        }

        protected override string OnGetEntityId() => EntityId;

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override IFreezable OnPartCopy() => new Triangle(this);

        public Triangle() { }
        public Triangle(ITriangle source) : base(source)
        {
        }


        public bool Equals(Triangle? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Triangle other && Equals(other);
        public static bool operator ==(Triangle? left, Triangle? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Triangle? left, Triangle? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
