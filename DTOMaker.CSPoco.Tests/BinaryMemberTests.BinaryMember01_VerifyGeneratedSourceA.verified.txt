// <auto-generated>
// This file was generated by DTOMaker.CSPoco.
// NuGet: https://www.nuget.org/packages/DTOMaker.CSPoco
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.CSPoco;
using System;

namespace MyOrg.Models.CSPoco
{
    public partial class MyDTO : DTOMaker.Runtime.CSPoco.EntityBase, IMyDTO, IEquatable<MyDTO>
    {
        // Derived entities: 0

        public new const string EntityId = "MyOrg.Models.MyDTO";

        private static MyDTO CreateEmpty()
        {
            var empty = new MyDTO();
            empty.Freeze();
            return empty;
        }
        private static readonly MyDTO _empty = CreateEmpty();
        public static MyDTO Empty => _empty;

        public new static MyDTO CreateFrom(MyDTO source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.CSPoco.MyDTO(source)
            };
        }

        public new static MyDTO CreateFrom(MyOrg.Models.IMyDTO source)
        {
            if (source is MyDTO concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.CSPoco.MyDTO(source)
            };
        }

        protected override string OnGetEntityId() => EntityId;

        protected override void OnFreeze()
        {
            base.OnFreeze();
            _Other1?.Freeze();
        }

        protected override IFreezable OnPartCopy() => new MyDTO(this);

        public MyDTO() { }
        public MyDTO(IMyDTO source) : base(source)
        {
            _Other1 = source.Other1 is null ? null : MyOrg.Models.CSPoco.Other.CreateFrom(source.Other1);
            _Field1 = source.Field1;
            _Field2 = source.Field2;
        }

        private MyOrg.Models.CSPoco.Other? _Other1;
        public MyOrg.Models.CSPoco.Other? Other1
        {
            get => _Other1;
            set => _Other1 = IfNotFrozen(ref value);
        }
        MyOrg.Models.IOther? IMyDTO.Other1
        {
            get => _Other1;
            set
            {
                ThrowIfFrozen();
                _Other1 = value is null ? null : MyOrg.Models.CSPoco.Other.CreateFrom(value);
            }
        }

        private Octets _Field1 = Octets.Empty;
        public Octets Field1
        {
            get => _Field1;
            set => _Field1 = IfNotFrozen(ref value);
        }

        private Octets? _Field2;
        public Octets? Field2
        {
            get => _Field2;
            set => _Field2 = IfNotFrozen(ref value);
        }


        public bool Equals(MyDTO? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Other1 != other.Other1) return false;
            if (_Field1 != other.Field1) return false;
            if (_Field2 != other.Field2) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is MyDTO other && Equals(other);
        public static bool operator ==(MyDTO? left, MyDTO? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(MyDTO? left, MyDTO? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Other1?.GetHashCode() ?? 0);
            result.Add(_Field1.GetHashCode());
            result.Add(_Field2?.GetHashCode() ?? 0);
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
