// <auto-generated>
// This file was generated by DTOMaker.CSPoco.
// NuGet: https://www.nuget.org/packages/DTOMaker.CSPoco
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DTOMaker.Runtime;
using DTOMaker.Runtime.CSPoco;
using System;

namespace MyOrg.Models.CSPoco
{
    public partial class BooleanNode : MyOrg.Models.CSPoco.Node, IBooleanNode, IEquatable<BooleanNode>
    {
        // Derived entities: 0

        public new const string EntityId = "MyOrg.Models.BooleanNode";

        public new static BooleanNode CreateFrom(BooleanNode source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                _ => new MyOrg.Models.CSPoco.BooleanNode(source)
            };
        }

        public new static BooleanNode CreateFrom(MyOrg.Models.IBooleanNode source)
        {
            if (source is BooleanNode concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                _ => new MyOrg.Models.CSPoco.BooleanNode(source)
            };
        }

        protected override string OnGetEntityId() => EntityId;

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override IFreezable OnPartCopy() => new BooleanNode(this);

        public BooleanNode() { }
        public BooleanNode(IBooleanNode source) : base(source)
        {
            _Value = source.Value;
        }

        private Boolean _Value = default;
        public Boolean Value
        {
            get => _Value;
            set => _Value = IfNotFrozen(ref value);
        }


        public bool Equals(BooleanNode? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Value != other.Value) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is BooleanNode other && Equals(other);
        public static bool operator ==(BooleanNode? left, BooleanNode? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(BooleanNode? left, BooleanNode? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Value);
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
