// <auto-generated>
// This file was generated by DTOMaker.CSPoco.
// NuGet: https://www.nuget.org/packages/DTOMaker.CSPoco
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.CSPoco;
using System;

namespace MyOrg.Models.CSPoco
{
    public partial class Quadrilateral : MyOrg.Models.CSPoco.Polygon, IQuadrilateral, IEquatable<Quadrilateral>
    {
        // Derived entities: 2
        // - Rectangle
        // - Square

        public new const string EntityId = "0b524606-ede1-4f9e-ae7d-34abbe67c911";

        private static Quadrilateral CreateEmpty()
        {
            var empty = new Quadrilateral();
            empty.Freeze();
            return empty;
        }
        private static readonly Quadrilateral _empty = CreateEmpty();
        public static Quadrilateral Empty => _empty;

        public new static Quadrilateral CreateFrom(Quadrilateral source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                MyOrg.Models.CSPoco.Rectangle source2 => new MyOrg.Models.CSPoco.Rectangle(source2),
                MyOrg.Models.CSPoco.Square source2 => new MyOrg.Models.CSPoco.Square(source2),
                _ => new MyOrg.Models.CSPoco.Quadrilateral(source)
            };
        }

        public new static Quadrilateral CreateFrom(MyOrg.Models.IQuadrilateral source)
        {
            if (source is Quadrilateral concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                MyOrg.Models.IRectangle source2 => new MyOrg.Models.CSPoco.Rectangle(source2),
                MyOrg.Models.ISquare source2 => new MyOrg.Models.CSPoco.Square(source2),
                _ => new MyOrg.Models.CSPoco.Quadrilateral(source)
            };
        }

        protected override string OnGetEntityId() => EntityId;

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override IFreezable OnPartCopy() => new Quadrilateral(this);

        public Quadrilateral() { }
        public Quadrilateral(IQuadrilateral source) : base(source)
        {
        }


        public bool Equals(Quadrilateral? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Quadrilateral other && Equals(other);
        public static bool operator ==(Quadrilateral? left, Quadrilateral? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Quadrilateral? left, Quadrilateral? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
