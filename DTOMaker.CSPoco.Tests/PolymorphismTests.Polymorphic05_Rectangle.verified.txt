// <auto-generated>
// This file was generated by DTOMaker.CSPoco.
// NuGet: https://www.nuget.org/packages/DTOMaker.CSPoco
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DTOMaker.Runtime;
using DTOMaker.Runtime.CSPoco;
using System;

namespace MyOrg.Models.CSPoco
{
    public partial class Rectangle : MyOrg.Models.CSPoco.Quadrilateral, IRectangle, IEquatable<Rectangle>
    {
        // Derived entities: 0

        public new const string EntityId = "Rectangle";

        public new static Rectangle CreateFrom(MyOrg.Models.IRectangle source)
        {
            return source switch
            {
                _ => throw new ArgumentException($"Unexpected type: {source.GetType().Name}", nameof(source))
            };
        }

        protected override string OnGetEntityId() => EntityId;

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override IFreezable OnPartCopy() => new Rectangle(this);

        public Rectangle() { }
        public Rectangle(IRectangle source) : base(source)
        {
            _Length = source.Length;
            _Height = source.Height;
        }

        private Double _Length = default;
        public Double Length
        {
            get => _Length;
            set => _Length = IfNotFrozen(ref value);
        }

        private Double _Height = default;
        public Double Height
        {
            get => _Height;
            set => _Height = IfNotFrozen(ref value);
        }


        public bool Equals(Rectangle? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (_Length != other.Length) return false;
            if (_Height != other.Height) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Rectangle other && Equals(other);
        public static bool operator ==(Rectangle? left, Rectangle? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(Rectangle? left, Rectangle? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_Length);
            result.Add(_Height);
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
