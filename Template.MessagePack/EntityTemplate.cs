// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
//##if(false) {
#pragma warning disable CS0618 // Type or member is obsolete
//##}
#pragma warning disable CS0414
#nullable enable
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

//##if (false) {
namespace T_MemberTypeNameSpace_
{
    public interface IT_MemberTypeName_ { }
}
namespace T_MemberTypeNameSpace_.MessagePack
{
    public class T_MemberTypeName_ : EntityBase, IT_MemberTypeName_
    {
        private static readonly T_MemberTypeName_ _empty = new T_MemberTypeName_();
        public static T_MemberTypeName_ Empty => _empty;
        public T_MemberTypeName_() { }
        public T_MemberTypeName_(IT_MemberTypeName_ source) { }
        protected override IFreezable OnPartCopy() => throw new NotImplementedException();
    }
}
namespace T_BaseNameSpace_.MessagePack
{
    using T_MemberType_ = System.Int32;
    public interface IT_BaseName_ { }
    [MessagePackObject]
    [Union(T_NameSpace_.MessagePack.T_EntityName_.EntityKey, typeof(T_NameSpace_.MessagePack.T_EntityName_))]
    public abstract class T_BaseName_ : EntityBase, IT_BaseName_, IEquatable<T_BaseName_>
    {
        public new const int EntityKey = 1;

        public T_BaseName_() { }
        public T_BaseName_(IT_BaseName_ source) : base(source) { }

        protected override void OnFreeze() => base.OnFreeze();
        protected override IFreezable OnPartCopy() => throw new NotImplementedException();

        [Key(1)] public T_MemberType_ BaseField1 { get; set; }

        public bool Equals(T_BaseName_? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is T_BaseName_ other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
    }
}
//##}
namespace T_NameSpace_.MessagePack
{
    //##if (false) {
    using T_MemberType_ = System.Int32;
    public interface IT_EntityName_ : T_BaseNameSpace_.MessagePack.IT_BaseName_
    {
        T_MemberType_? T_ScalarNullableMemberName_ { get; set; }
        T_MemberType_ T_ScalarRequiredMemberName_ { get; set; }
        ReadOnlyMemory<T_MemberType_> T_VectorMemberName_ { get; set; }
        T_MemberTypeNameSpace_.IT_MemberTypeName_? T_NullableEntityMemberName_ { get; set; }
        T_MemberTypeNameSpace_.IT_MemberTypeName_ T_RequiredEntityMemberName_ { get; set; }
    }
    //##}
    [MessagePackObject]
    //##foreach (var derived in entity.DerivedEntities) {
    //##using var _ = NewScope(derived);
    //##if (derived.DerivedEntityCount == 0) {
    [Union(T_EntityName_.EntityKey, typeof(T_EntityName_))]
    //##}
    //##}
    //##if (entity.DerivedEntityCount > 0) {
    public abstract partial class T_EntityName2_ { }
    //##}
    public partial class T_EntityName_ : T_BaseNameSpace_.MessagePack.T_BaseName_, IT_EntityName_, IEquatable<T_EntityName_>
    {
        // Derived entities: T_DerivedEntityCount_
        //##foreach (var derived in entity.DerivedEntities) {
        //##using var _ = NewScope(derived);
        // - T_EntityName_
        //##}
        //##if (false) {
        private const string T_MemberObsoleteMessage_ = null;
        private const bool T_MemberObsoleteIsError_ = false;
        private const int T_EntityKey_ = 2;
        private const int T_MemberKeyOffset_ = 10;
        private const int T_ScalarNullableMemberKey_ = T_MemberKeyOffset_ + 1;
        private const int T_ScalarRequiredMemberKey_ = T_MemberKeyOffset_ + 2;
        private const int T_VectorMemberKey_ = T_MemberKeyOffset_ + 3;
        private const int T_NullableEntityMemberKey_ = T_MemberKeyOffset_ + 4;
        private const int T_RequiredEntityMemberKey_ = T_MemberKeyOffset_ + 5;
        private const int T_MemberDefaultValue_ = 0;
        //##}

        public new const int EntityKey = T_EntityKey_;

        public new static T_EntityName_ Create(int entityKey, ReadOnlyMemory<byte> buffer)
        {
            return entityKey switch
            {
                //##foreach (var derived in entity.DerivedEntities) {
                //##using var _ = NewScope(derived);
                //##if (derived.DerivedEntityCount == 0) {
                T_NameSpace_.MessagePack.T_EntityName_.EntityKey => MessagePackSerializer.Deserialize<T_NameSpace_.MessagePack.T_EntityName_>(buffer, out var _),
                //##}
                //##}
                _ => throw new ArgumentOutOfRangeException(nameof(entityKey), entityKey, null)
            };
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##if (member.IsEntity) {
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_?.Freeze();
            //##} else {
            _T_RequiredEntityMemberName_.Freeze();
            //##}
            //##}
            //##}
        }

        //##if (entity.DerivedEntityCount == 0) {
        protected override IFreezable OnPartCopy() => new T_EntityName_(this);

        //##}
        public T_EntityName_() { }
        public T_EntityName_(IT_EntityName_ source) : base(source)
        {
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##if (member.IsVector) {
            _T_VectorMemberName_ = source.T_VectorMemberName_;
            //##} else if (member.IsEntity) {
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_ = source.T_NullableEntityMemberName_ is null ? null : new T_MemberTypeNameSpace_.MessagePack.T_MemberTypeName_(source.T_NullableEntityMemberName_);
            //##} else {
            _T_RequiredEntityMemberName_ = new T_MemberTypeNameSpace_.MessagePack.T_MemberTypeName_(source.T_RequiredEntityMemberName_);
            //##}
            //##} else {
            //##if (member.IsNullable) {
            _T_ScalarNullableMemberName_ = source.T_ScalarNullableMemberName_;
            //##} else {
            _T_ScalarRequiredMemberName_ = source.T_ScalarRequiredMemberName_;
            //##}
            //##}
            //##}
        }

        //##foreach (var member in entity.Members) {
        //##using var _ = NewScope(member);
        //##if (member.IsVector) {
        [IgnoreMember]
        private ReadOnlyMemory<T_MemberType_> _T_VectorMemberName_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_VectorMemberKey_)]
        public ReadOnlyMemory<T_MemberType_> T_VectorMemberName_
        {
            get => _T_VectorMemberName_;
            set => _T_VectorMemberName_ = IfNotFrozen(ref value);
        }
        //##} else if (member.IsEntity) {
        //##if (member.IsNullable) {
        [IgnoreMember]
        private T_MemberTypeNameSpace_.MessagePack.T_MemberTypeName_? _T_NullableEntityMemberName_;
        [Key(T_NullableEntityMemberKey_)]
        public T_MemberTypeNameSpace_.MessagePack.T_MemberTypeName_? T_NullableEntityMemberName_
        {
            get => _T_NullableEntityMemberName_;
            set => _T_NullableEntityMemberName_ = IfNotFrozen(ref value);
        }
        T_MemberTypeNameSpace_.IT_MemberTypeName_? IT_EntityName_.T_NullableEntityMemberName_
        {
            get => _T_NullableEntityMemberName_;
            set
            {
                ThrowIfFrozen();
                _T_NullableEntityMemberName_ = value is null ? null : new T_MemberTypeNameSpace_.MessagePack.T_MemberTypeName_(value);
            }
        }
        //##} else {
        [IgnoreMember]
        private T_MemberTypeNameSpace_.MessagePack.T_MemberTypeName_ _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeName_.Empty;
        [Key(T_RequiredEntityMemberKey_)]
        public T_MemberTypeNameSpace_.MessagePack.T_MemberTypeName_ T_RequiredEntityMemberName_
        {
            get => _T_RequiredEntityMemberName_;
            set => _T_RequiredEntityMemberName_ = IfNotFrozen(ref value);
        }
        T_MemberTypeNameSpace_.IT_MemberTypeName_ IT_EntityName_.T_RequiredEntityMemberName_
        {
            get => _T_RequiredEntityMemberName_;
            set
            {
                ThrowIfFrozen();
                _T_RequiredEntityMemberName_ = new T_MemberTypeNameSpace_.MessagePack.T_MemberTypeName_(value);
            }
        }
        //##}
        //##} else {
        //##if (member.IsNullable) {
        [IgnoreMember]
        private T_MemberType_? _T_ScalarNullableMemberName_;
        //##} else {
        [IgnoreMember]
        private T_MemberType_ _T_ScalarRequiredMemberName_ = T_MemberDefaultValue_;
        //##}
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        //##if (member.IsNullable) {
        [Key(T_ScalarNullableMemberKey_)]
        public T_MemberType_? T_ScalarNullableMemberName_
        {
            get => _T_ScalarNullableMemberName_;
            set => _T_ScalarNullableMemberName_ = IfNotFrozen(ref value);
        }
        //##} else {
        [Key(T_ScalarRequiredMemberKey_)]
        public T_MemberType_ T_ScalarRequiredMemberName_
        {
            get => _T_ScalarRequiredMemberName_;
            set => _T_ScalarRequiredMemberName_ = IfNotFrozen(ref value);
        }
        //##}
        //##}

        //##}

        public bool Equals(T_EntityName_? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##if (member.IsVector) {
            if (!_T_VectorMemberName_.Span.SequenceEqual(other.T_VectorMemberName_.Span)) return false;
            //##} else {
            //##if (member.IsNullable) {
            if (_T_ScalarNullableMemberName_ != other.T_ScalarNullableMemberName_) return false;
            //##} else {
            if (_T_ScalarRequiredMemberName_ != other.T_ScalarRequiredMemberName_) return false;
            //##}
            //##}
            //##}
            return true;
        }

        public override bool Equals(object? obj) => obj is T_EntityName_ other && Equals(other);
        public static bool operator ==(T_EntityName_? left, T_EntityName_? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(T_EntityName_? left, T_EntityName_? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##if (member.IsVector) {
            result.Add(_T_VectorMemberName_.Length);
            for (int i = 0; i < _T_VectorMemberName_.Length; i++)
            {
                result.Add(_T_VectorMemberName_.Span[i]);
            }
            //##} else {
            //##if (member.IsNullable) {
            result.Add(_T_ScalarNullableMemberName_);
            //##} else {
            result.Add(_T_ScalarRequiredMemberName_);
            //##}
            //##}
            //##}
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}