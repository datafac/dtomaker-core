// <auto-generated>
// This file was generated by DTOMaker.MessagePack.
// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
//##if(false) {
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0162 // Unreachable code detected
//##}
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MessagePack;
using MessagePack;
using System;

//##if (false) {
using T_MemberType_ = System.Int32;
namespace T_MemberTypeNameSpace_
{
    public interface IT_MemberTypeIntfName_
    {
        long Field1 { get; }
    }
}
namespace T_MemberTypeNameSpace_.MessagePack
{
    [MessagePackObject]
    public sealed class T_MemberTypeImplName_ : EntityBase, IT_MemberTypeIntfName_, IEquatable<T_MemberTypeImplName_>
    {
        private static readonly T_MemberTypeImplName_ _empty = new T_MemberTypeImplName_();
        public static T_MemberTypeImplName_ Empty => _empty;

        [Key(1)]
        public long Field1 { get; set; }

        public static T_MemberTypeImplName_ CreateFrom(IT_MemberTypeIntfName_ source) => throw new NotImplementedException();
        protected override int OnGetEntityId() => 3;
        public T_MemberTypeImplName_() { }
        public T_MemberTypeImplName_(IT_MemberTypeIntfName_ source) { }
        protected override IEntityBase OnPartCopy() => throw new NotImplementedException();

        public bool Equals(T_MemberTypeImplName_? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!base.Equals(other)) return false;
            if (other.Field1 != Field1) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is T_MemberTypeImplName_ other && Equals(other);
        public override int GetHashCode() => HashCode.Combine(Field1);
        public static bool operator ==(T_MemberTypeImplName_? left, T_MemberTypeImplName_? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(T_MemberTypeImplName_? left, T_MemberTypeImplName_? right) => left is not null ? !left.Equals(right) : (right is not null);
    }
}
namespace T_BaseNameSpace_.MessagePack
{
    public interface IT_BaseName_ : IEntityBase { }
    [MessagePackObject]
    [Union(T_NameSpace_.MessagePack.T_ConcreteEntity_.EntityId, typeof(T_NameSpace_.MessagePack.T_ConcreteEntity_))]
    public abstract class T_BaseName_ : EntityBase, IT_BaseName_, IEquatable<T_BaseName_>
    {
        public T_BaseName_() { }
        public T_BaseName_(IT_BaseName_ source) : base(source) { }
        public T_BaseName_(T_BaseName_ source) : base(source) { }

        [Key(1)] public T_MemberType_ BaseField1 { get; set; }

        public bool Equals(T_BaseName_? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is T_BaseName_ other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
    }
}
namespace T_NameSpace_
{
    public interface IT_EntityIntfName_ : T_BaseNameSpace_.MessagePack.IT_BaseName_
    {
        T_MemberType_? T_NullableScalarMemberName_ { get; set; }
        T_MemberType_ T_RequiredScalarMemberName_ { get; set; }
        ReadOnlyMemory<T_MemberType_> T_VectorMemberName_ { get; set; }
        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_? T_NullableEntityMemberName_ { get; set; }
        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_ T_RequiredEntityMemberName_ { get; set; }
        Octets? T_NullableBinaryMemberName_ { get; set; }
        Octets T_RequiredBinaryMemberName_ { get; set; }
        string? T_NullableStringMemberName_ { get; set; }
        string T_RequiredStringMemberName_ { get; set; }
    }
}
//##}
namespace T_NameSpace_.MessagePack
{
    [MessagePackObject]
    //##foreach (var derived in entity.DerivedEntities) {
    //##using var _ = NewScope(derived);
    //##if (derived.DerivedEntityCount == 0) {
    [Union(T_ConcreteEntity_.EntityId, typeof(T_ConcreteEntity_))]
    //##}
    //##}
    //##if (entity.DerivedEntityCount > 0) {
    public abstract partial class T_AbstractEntity_ : T_BaseNameSpace_.MessagePack.T_BaseName_, IT_EntityIntfName_, IEquatable<T_AbstractEntity_>
    {
        // Derived entities: T_DerivedEntityCount_
        //##foreach (var derived in entity.DerivedEntities) {
        //##using var _ = NewScope(derived);
        //##if (derived.DerivedEntityCount == 0) {
        // - T_EntityIntfName_
        //##} else {
        // - T_EntityIntfName_ (abstract)
        //##}
        //##}
        //##if (false) {
        private const string T_MemberObsoleteMessage_ = null;
        private const bool T_MemberObsoleteIsError_ = false;
        private const int T_EntityId_ = 2;
        private const int T_MemberKeyOffset_ = 10;
        private const int T_NullableScalarMemberKey_ = T_MemberKeyOffset_ + 1;
        private const int T_RequiredScalarMemberKey_ = T_MemberKeyOffset_ + 2;
        private const int T_VectorMemberKey_ = T_MemberKeyOffset_ + 3;
        private const int T_NullableEntityMemberKey_ = T_MemberKeyOffset_ + 5;
        private const int T_RequiredEntityMemberKey_ = T_MemberKeyOffset_ + 6;
        private const int T_NullableBinaryMemberKey_ = T_MemberKeyOffset_ + 7;
        private const int T_RequiredBinaryMemberKey_ = T_MemberKeyOffset_ + 8;
        private const int T_NullableStringMemberKey_ = T_MemberKeyOffset_ + 9;
        private const int T_RequiredStringMemberKey_ = T_MemberKeyOffset_ + 10;
        private const int T_MemberDefaultValue_ = 0;
        //##}

        public new const int EntityId = T_EntityId_;

        public new static T_ConcreteEntity_ CreateFrom(T_ConcreteEntity_ source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                //##foreach(var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight)) {
                //##using var _ = NewScope(derived);
                //##if (derived.DerivedEntityCount == 0) {
                T_NameSpace_.MessagePack.T_ConcreteEntity_ source2 => new T_NameSpace_.MessagePack.T_ConcreteEntity_(source2),
                //##}
                //##}
                _ => throw new ArgumentException($"Unexpected type: {source.GetType().Name}", nameof(source))
            };
        }

        public new static T_ConcreteEntity_ CreateFrom(T_NameSpace_.IT_EntityIntfName_ source)
        {
            if (source is T_ConcreteEntity_ concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                //##foreach(var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight)) {
                //##using var _ = NewScope(derived);
                //##if (derived.DerivedEntityCount == 0) {
                T_NameSpace_.IT_EntityIntfName_ source2 => new T_NameSpace_.MessagePack.T_ConcreteEntity_(source2),
                //##}
                //##}
                _ => throw new ArgumentException($"Unexpected type: {source.GetType().Name}", nameof(source))
            };
        }

        public new static T_ConcreteEntity_ CreateFrom(int entityId, ReadOnlyMemory<byte> buffer)
        {
            return entityId switch
            {
                //##foreach (var derived in entity.DerivedEntities) {
                //##using var _ = NewScope(derived);
                //##if (derived.DerivedEntityCount == 0) {
                T_NameSpace_.MessagePack.T_ConcreteEntity_.EntityId => MessagePackSerializer.Deserialize<T_NameSpace_.MessagePack.T_ConcreteEntity_>(buffer, out var _),
                //##}
                //##}
                _ => throw new ArgumentOutOfRangeException(nameof(entityId), entityId, null)
            };
        }

        protected override int OnGetEntityId() => T_EntityId_;

        protected override void OnFreeze()
        {
            base.OnFreeze();
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##break;
            //##case MemberKind.Vector:
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_?.Freeze();
            //##} else {
            _T_RequiredEntityMemberName_.Freeze();
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##break;
            //##case MemberKind.String:
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
        }

        protected T_AbstractEntity_() { }

        protected T_AbstractEntity_(T_AbstractEntity_ source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##if (member.IsNullable) {
            _T_NullableScalarMemberName_ = source._T_NullableScalarMemberName_;
            //##} else {
            _T_RequiredScalarMemberName_ = source._T_RequiredScalarMemberName_;
            //##}
            //##break;
            //##case MemberKind.Vector:
            _T_VectorMemberName_ = source._T_VectorMemberName_;
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_ = source._T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source._T_NullableEntityMemberName_);
            //##} else {
            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source._T_RequiredEntityMemberName_);
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##if (member.IsNullable) {
            _T_NullableBinaryMemberName_ = source._T_NullableBinaryMemberName_;
            //##} else {
            _T_RequiredBinaryMemberName_ = source._T_RequiredBinaryMemberName_;
            //##}
            //##break;
            //##case MemberKind.String:
            //##if (member.IsNullable) {
            _T_NullableStringMemberName_ = source._T_NullableStringMemberName_;
            //##} else {
            _T_RequiredStringMemberName_ = source._T_RequiredStringMemberName_;
            //##}
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
        }

        public T_AbstractEntity_(IT_EntityIntfName_ source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##if (member.IsNullable) {
            _T_NullableScalarMemberName_ = source.T_NullableScalarMemberName_;
            //##} else {
            _T_RequiredScalarMemberName_ = source.T_RequiredScalarMemberName_;
            //##}
            //##break;
            //##case MemberKind.Vector:
            _T_VectorMemberName_ = source.T_VectorMemberName_;
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_ = source.T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source.T_NullableEntityMemberName_);
            //##} else {
            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source.T_RequiredEntityMemberName_);
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##if (member.IsNullable) {
            if (source.T_NullableBinaryMemberName_ is null)
                _T_NullableBinaryMemberName_ = null;
            else
                _T_NullableBinaryMemberName_ = source.T_NullableBinaryMemberName_.AsMemory();
            //##} else {
            _T_RequiredBinaryMemberName_ = source.T_RequiredBinaryMemberName_.AsMemory();
            //##}
            //##break;
            //##case MemberKind.String:
            //##if (member.IsNullable) {
            _T_NullableStringMemberName_ = source.T_NullableStringMemberName_;
            //##} else {
            _T_RequiredStringMemberName_ = source.T_RequiredStringMemberName_;
            //##}
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
        }

        //##foreach (var member in entity.Members) {
        //##using var _ = NewScope(member);
        //##switch(member.Kind) {
        //##case MemberKind.Native:
        //##if (member.IsNullable) {
        [IgnoreMember]
        private T_MemberType_? _T_NullableScalarMemberName_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_NullableScalarMemberKey_)]
        public T_MemberType_? T_NullableScalarMemberName_
        {
            get => _T_NullableScalarMemberName_;
            set => _T_NullableScalarMemberName_ = IfNotFrozen(value);
        }
        //##} else {
        [IgnoreMember]
        private T_MemberType_ _T_RequiredScalarMemberName_ = T_MemberDefaultValue_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_RequiredScalarMemberKey_)]
        public T_MemberType_ T_RequiredScalarMemberName_
        {
            get => _T_RequiredScalarMemberName_;
            set => _T_RequiredScalarMemberName_ = IfNotFrozen(value);
        }
        //##}
        //##break;
        //##case MemberKind.Vector:
        [IgnoreMember]
        private ReadOnlyMemory<T_MemberType_> _T_VectorMemberName_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_VectorMemberKey_)]
        public ReadOnlyMemory<T_MemberType_> T_VectorMemberName_
        {
            get => _T_VectorMemberName_;
            set => _T_VectorMemberName_ = IfNotFrozen(value);
        }
        //##break;
        //##case MemberKind.Entity:
        //##if (member.IsNullable) {
        [IgnoreMember]
        private T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_? _T_NullableEntityMemberName_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_NullableEntityMemberKey_)]
        public T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_? T_NullableEntityMemberName_
        {
            get => _T_NullableEntityMemberName_;
            set => _T_NullableEntityMemberName_ = IfNotFrozen(value);
        }
        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_? IT_EntityIntfName_.T_NullableEntityMemberName_
        {
            get => _T_NullableEntityMemberName_;
            set => _T_NullableEntityMemberName_ = IfNotFrozen(value is null ? null : T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(value));
        }
        //##} else {
        [IgnoreMember]
        private T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_ _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.Empty;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_RequiredEntityMemberKey_)]
        public T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_ T_RequiredEntityMemberName_
        {
            get => _T_RequiredEntityMemberName_;
            set => _T_RequiredEntityMemberName_ = IfNotFrozen(value);
        }
        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_ IT_EntityIntfName_.T_RequiredEntityMemberName_
        {
            get => _T_RequiredEntityMemberName_;
            set => _T_RequiredEntityMemberName_ = IfNotFrozen(T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(value));
        }
        //##}
        //##break;
        //##case MemberKind.Binary:
        //##if (member.IsNullable) {
        [IgnoreMember]
        private ReadOnlyMemory<byte>? _T_NullableBinaryMemberName_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_NullableBinaryMemberKey_)]
        public ReadOnlyMemory<byte>? T_NullableBinaryMemberName_
        {
            get => _T_NullableBinaryMemberName_;
            set => _T_NullableBinaryMemberName_ = IfNotFrozen(value);
        }
        Octets? IT_EntityIntfName_.T_NullableBinaryMemberName_
        {
            get => _T_NullableBinaryMemberName_ is null ? null : Octets.UnsafeWrap(_T_NullableBinaryMemberName_.Value);
            set => _T_NullableBinaryMemberName_ = IfNotFrozen(value is null ? null : value.AsMemory());
        }
        //##} else {
        [IgnoreMember]
        private ReadOnlyMemory<byte> _T_RequiredBinaryMemberName_ = ReadOnlyMemory<byte>.Empty;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_RequiredBinaryMemberKey_)]
        public ReadOnlyMemory<byte> T_RequiredBinaryMemberName_
        {
            get => _T_RequiredBinaryMemberName_;
            set => _T_RequiredBinaryMemberName_ = IfNotFrozen(value);
        }
        Octets IT_EntityIntfName_.T_RequiredBinaryMemberName_
        {
            get => Octets.UnsafeWrap(_T_RequiredBinaryMemberName_);
            set => _T_RequiredBinaryMemberName_ = IfNotFrozen(value.AsMemory());
        }
        //##}
        //##break;
        //##case MemberKind.String:
        //##if (member.IsNullable) {
        [IgnoreMember]
        private string? _T_NullableStringMemberName_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_NullableStringMemberKey_)]
        public string? T_NullableStringMemberName_
        {
            get => _T_NullableStringMemberName_;
            set => _T_NullableStringMemberName_ = IfNotFrozen(value);
        }
        //##} else {
        [IgnoreMember]
        private string _T_RequiredStringMemberName_ = string.Empty;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_RequiredStringMemberKey_)]
        public string T_RequiredStringMemberName_
        {
            get => _T_RequiredStringMemberName_;
            set => _T_RequiredStringMemberName_ = IfNotFrozen(value);
        }
        //##}
        //##break;
        //##default:
        //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
        //##break;
        //##} // switch

        //##}

        public bool Equals(T_AbstractEntity_? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##if (member.IsNullable) {
            if (_T_NullableScalarMemberName_ != other.T_NullableScalarMemberName_) return false;
            //##} else {
            if (_T_RequiredScalarMemberName_ != other.T_RequiredScalarMemberName_) return false;
            //##}
            //##break;
            //##case MemberKind.Vector:
            if (!_T_VectorMemberName_.Span.SequenceEqual(other.T_VectorMemberName_.Span)) return false;
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            if (_T_NullableEntityMemberName_ != other.T_NullableEntityMemberName_) return false;
            //##} else {
            if (_T_RequiredEntityMemberName_ != other.T_RequiredEntityMemberName_) return false;
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##if (member.IsNullable) {
            if (!BinaryValuesAreEqual(_T_NullableBinaryMemberName_, other._T_NullableBinaryMemberName_)) return false;
            //##} else {
            if (!BinaryValuesAreEqual(_T_RequiredBinaryMemberName_, other. _T_RequiredBinaryMemberName_)) return false;
            //##}
            //##break;
            //##case MemberKind.String:
            //##if (member.IsNullable) {
            if (!string.Equals(_T_NullableStringMemberName_, other._T_NullableStringMemberName_)) return false;
            //##} else {
            if (!string.Equals(_T_RequiredStringMemberName_, other._T_RequiredStringMemberName_)) return false;
            //##}
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
            return true;
        }

        public override bool Equals(object? obj) => obj is T_AbstractEntity_ other && Equals(other);
        public static bool operator ==(T_AbstractEntity_? left, T_AbstractEntity_? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(T_AbstractEntity_? left, T_AbstractEntity_? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##if (member.IsNullable) {
            result.Add(_T_NullableScalarMemberName_);
            //##} else {
            result.Add(_T_RequiredScalarMemberName_);
            //##}
            //##break;
            //##case MemberKind.Vector:
            result.Add(_T_VectorMemberName_.Length);
            for (int i = 0; i < _T_VectorMemberName_.Length; i++)
            {
                result.Add(_T_VectorMemberName_.Span[i]);
            }
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            result.Add(_T_NullableEntityMemberName_);
            //##} else {
            result.Add(_T_RequiredEntityMemberName_);
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##if (member.IsNullable) {
            if (_T_NullableBinaryMemberName_.HasValue)
            {
                var span_T_NullableBinaryMemberName_ = _T_NullableBinaryMemberName_.Value.Span;
                result.Add(span_T_NullableBinaryMemberName_.Length);
#if NET8_0_OR_GREATER
                result.AddBytes(span_T_NullableBinaryMemberName_);
#else
                for (int i = 0; i < span_T_NullableBinaryMemberName_.Length; i++)
                {
                    result.Add(span_T_NullableBinaryMemberName_[i]);
                }
#endif
            }
            //##} else {
            var span_T_RequiredBinaryMemberName_ = _T_RequiredBinaryMemberName_.Span;
            result.Add(span_T_RequiredBinaryMemberName_.Length);
#if NET8_0_OR_GREATER
            result.AddBytes(span_T_RequiredBinaryMemberName_);
#else
            for (int i = 0; i < span_T_RequiredBinaryMemberName_.Length; i++)
            {
                result.Add(span_T_RequiredBinaryMemberName_[i]);
            }
#endif
            //##}
            //##break;
            //##case MemberKind.String:
            //##if (member.IsNullable) {
            result.Add(_T_NullableStringMemberName_);
            //##} else {
            result.Add(_T_RequiredStringMemberName_);
            //##}
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
    //##} else {
    public sealed partial class T_ConcreteEntity_ : T_BaseNameSpace_.MessagePack.T_BaseName_, IT_EntityIntfName_, IEquatable<T_ConcreteEntity_>
    {
        //##if (false) {
        private const string T_MemberObsoleteMessage_ = null;
        private const bool T_MemberObsoleteIsError_ = false;
        private const int T_EntityId_ = 2;
        private const int T_MemberKeyOffset_ = 10;
        private const int T_NullableScalarMemberKey_ = T_MemberKeyOffset_ + 1;
        private const int T_RequiredScalarMemberKey_ = T_MemberKeyOffset_ + 2;
        private const int T_VectorMemberKey_ = T_MemberKeyOffset_ + 3;
        private const int T_NullableEntityMemberKey_ = T_MemberKeyOffset_ + 5;
        private const int T_RequiredEntityMemberKey_ = T_MemberKeyOffset_ + 6;
        private const int T_NullableBinaryMemberKey_ = T_MemberKeyOffset_ + 7;
        private const int T_RequiredBinaryMemberKey_ = T_MemberKeyOffset_ + 8;
        private const int T_NullableStringMemberKey_ = T_MemberKeyOffset_ + 9;
        private const int T_RequiredStringMemberKey_ = T_MemberKeyOffset_ + 10;
        private const int T_MemberDefaultValue_ = 0;
        //##}

        public new const int EntityId = T_EntityId_;

        private static T_ConcreteEntity_ CreateEmpty()
        {
            var empty = new T_ConcreteEntity_();
            empty.Freeze();
            return empty;
        }
        private static readonly T_ConcreteEntity_ _empty = CreateEmpty();
        public static new T_ConcreteEntity_ Empty => _empty;

        public new static T_ConcreteEntity_ CreateFrom(T_ConcreteEntity_ source)
        {
            if (source.IsFrozen)
                return source;
            else
                return new T_ConcreteEntity_(source);
        }

        public new static T_ConcreteEntity_ CreateFrom(T_NameSpace_.IT_EntityIntfName_ source)
        {
            if (source is T_ConcreteEntity_ concrete && concrete.IsFrozen)
                return concrete;
            else
                return new T_ConcreteEntity_(source);
        }

        public new static T_ConcreteEntity_ CreateFrom(int entityId, ReadOnlyMemory<byte> buffer)
        {
            if (entityId == T_NameSpace_.MessagePack.T_ConcreteEntity_.EntityId)
                return MessagePackSerializer.Deserialize<T_NameSpace_.MessagePack.T_ConcreteEntity_>(buffer, out var _);
            else
                throw new ArgumentOutOfRangeException(nameof(entityId), entityId, null);
        }

        protected override int OnGetEntityId() => T_EntityId_;

        protected override void OnFreeze()
        {
            base.OnFreeze();
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##break;
            //##case MemberKind.Vector:
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_?.Freeze();
            //##} else {
            _T_RequiredEntityMemberName_.Freeze();
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##break;
            //##case MemberKind.String:
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
        }

        protected override IEntityBase OnPartCopy() => new T_ConcreteEntity_(this);

        [SerializationConstructor]
        public T_ConcreteEntity_() { }

        public T_ConcreteEntity_(T_ConcreteEntity_ source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##if (member.IsNullable) {
            _T_NullableScalarMemberName_ = source._T_NullableScalarMemberName_;
            //##} else {
            _T_RequiredScalarMemberName_ = source._T_RequiredScalarMemberName_;
            //##}
            //##break;
            //##case MemberKind.Vector:
            _T_VectorMemberName_ = source._T_VectorMemberName_;
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_ = source._T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source._T_NullableEntityMemberName_);
            //##} else {
            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source._T_RequiredEntityMemberName_);
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##if (member.IsNullable) {
            _T_NullableBinaryMemberName_ = source._T_NullableBinaryMemberName_;
            //##} else {
            _T_RequiredBinaryMemberName_ = source._T_RequiredBinaryMemberName_;
            //##}
            //##break;
            //##case MemberKind.String:
            //##if (member.IsNullable) {
            _T_NullableStringMemberName_ = source._T_NullableStringMemberName_;
            //##} else {
            _T_RequiredStringMemberName_ = source._T_RequiredStringMemberName_;
            //##}
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
        }

        public T_ConcreteEntity_(IT_EntityIntfName_ source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##if (member.IsNullable) {
            _T_NullableScalarMemberName_ = source.T_NullableScalarMemberName_;
            //##} else {
            _T_RequiredScalarMemberName_ = source.T_RequiredScalarMemberName_;
            //##}
            //##break;
            //##case MemberKind.Vector:
            _T_VectorMemberName_ = source.T_VectorMemberName_;
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_ = source.T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source.T_NullableEntityMemberName_);
            //##} else {
            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source.T_RequiredEntityMemberName_);
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##if (member.IsNullable) {
            if (source.T_NullableBinaryMemberName_ is null)
                _T_NullableBinaryMemberName_ = null;
            else
                _T_NullableBinaryMemberName_ = source.T_NullableBinaryMemberName_.AsMemory();
            //##} else {
            _T_RequiredBinaryMemberName_ = source.T_RequiredBinaryMemberName_.AsMemory();
            //##}
            //##break;
            //##case MemberKind.String:
            //##if (member.IsNullable) {
            _T_NullableStringMemberName_ = source.T_NullableStringMemberName_;
            //##} else {
            _T_RequiredStringMemberName_ = source.T_RequiredStringMemberName_;
            //##}
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
        }

        //##foreach (var member in entity.Members) {
        //##using var _ = NewScope(member);
        //##switch(member.Kind) {
        //##case MemberKind.Native:
        //##if (member.IsNullable) {
        [IgnoreMember]
        private T_MemberType_? _T_NullableScalarMemberName_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_NullableScalarMemberKey_)]
        public T_MemberType_? T_NullableScalarMemberName_
        {
            get => _T_NullableScalarMemberName_;
            set => _T_NullableScalarMemberName_ = IfNotFrozen(value);
        }
        //##} else {
        [IgnoreMember]
        private T_MemberType_ _T_RequiredScalarMemberName_ = T_MemberDefaultValue_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_RequiredScalarMemberKey_)]
        public T_MemberType_ T_RequiredScalarMemberName_
        {
            get => _T_RequiredScalarMemberName_;
            set => _T_RequiredScalarMemberName_ = IfNotFrozen(value);
        }
        //##}
        //##break;
        //##case MemberKind.Vector:
        [IgnoreMember]
        private ReadOnlyMemory<T_MemberType_> _T_VectorMemberName_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_VectorMemberKey_)]
        public ReadOnlyMemory<T_MemberType_> T_VectorMemberName_
        {
            get => _T_VectorMemberName_;
            set => _T_VectorMemberName_ = IfNotFrozen(value);
        }
        //##break;
        //##case MemberKind.Entity:
        //##if (member.IsNullable) {
        [IgnoreMember]
        private T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_? _T_NullableEntityMemberName_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_NullableEntityMemberKey_)]
        public T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_? T_NullableEntityMemberName_
        {
            get => _T_NullableEntityMemberName_;
            set => _T_NullableEntityMemberName_ = IfNotFrozen(value);
        }
        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_? IT_EntityIntfName_.T_NullableEntityMemberName_
        {
            get => _T_NullableEntityMemberName_;
            set => _T_NullableEntityMemberName_ = IfNotFrozen(value is null ? null : T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(value));
        }
        //##} else {
        [IgnoreMember]
        private T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_ _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.Empty;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_RequiredEntityMemberKey_)]
        public T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_ T_RequiredEntityMemberName_
        {
            get => _T_RequiredEntityMemberName_;
            set => _T_RequiredEntityMemberName_ = IfNotFrozen(value);
        }
        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_ IT_EntityIntfName_.T_RequiredEntityMemberName_
        {
            get => _T_RequiredEntityMemberName_;
            set => _T_RequiredEntityMemberName_ = IfNotFrozen(T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(value));
        }
        //##}
        //##break;
        //##case MemberKind.Binary:
        //##if (member.IsNullable) {
        [IgnoreMember]
        private ReadOnlyMemory<byte>? _T_NullableBinaryMemberName_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_NullableBinaryMemberKey_)]
        public ReadOnlyMemory<byte>? T_NullableBinaryMemberName_
        {
            get => _T_NullableBinaryMemberName_;
            set => _T_NullableBinaryMemberName_ = IfNotFrozen(value);
        }
        Octets? IT_EntityIntfName_.T_NullableBinaryMemberName_
        {
            get => _T_NullableBinaryMemberName_ is null ? null : Octets.UnsafeWrap(_T_NullableBinaryMemberName_.Value);
            set => _T_NullableBinaryMemberName_ = IfNotFrozen(value is null ? null : value.AsMemory());
        }
        //##} else {
        [IgnoreMember]
        private ReadOnlyMemory<byte> _T_RequiredBinaryMemberName_ = ReadOnlyMemory<byte>.Empty;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_RequiredBinaryMemberKey_)]
        public ReadOnlyMemory<byte> T_RequiredBinaryMemberName_
        {
            get => _T_RequiredBinaryMemberName_;
            set => _T_RequiredBinaryMemberName_ = IfNotFrozen(value);
        }
        Octets IT_EntityIntfName_.T_RequiredBinaryMemberName_
        {
            get => Octets.UnsafeWrap(_T_RequiredBinaryMemberName_);
            set => _T_RequiredBinaryMemberName_ = IfNotFrozen(value.AsMemory());
        }
        //##}
        //##break;
        //##case MemberKind.String:
        //##if (member.IsNullable) {
        [IgnoreMember]
        private string? _T_NullableStringMemberName_;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_NullableStringMemberKey_)]
        public string? T_NullableStringMemberName_
        {
            get => _T_NullableStringMemberName_;
            set => _T_NullableStringMemberName_ = IfNotFrozen(value);
        }
        //##} else {
        [IgnoreMember]
        private string _T_RequiredStringMemberName_ = string.Empty;
        //##if (member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        [Key(T_RequiredStringMemberKey_)]
        public string T_RequiredStringMemberName_
        {
            get => _T_RequiredStringMemberName_;
            set => _T_RequiredStringMemberName_ = IfNotFrozen(value);
        }
        //##}
        //##break;
        //##default:
        //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
        //##break;
        //##} // switch

        //##}

        public bool Equals(T_ConcreteEntity_? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            if (!base.Equals(other)) return false;
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##if (member.IsNullable) {
            if (_T_NullableScalarMemberName_ != other.T_NullableScalarMemberName_) return false;
            //##} else {
            if (_T_RequiredScalarMemberName_ != other.T_RequiredScalarMemberName_) return false;
            //##}
            //##break;
            //##case MemberKind.Vector:
            if (!_T_VectorMemberName_.Span.SequenceEqual(other.T_VectorMemberName_.Span)) return false;
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            if (_T_NullableEntityMemberName_ != other.T_NullableEntityMemberName_) return false;
            //##} else {
            if (_T_RequiredEntityMemberName_ != other.T_RequiredEntityMemberName_) return false;
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##if (member.IsNullable) {
            if (!BinaryValuesAreEqual(_T_NullableBinaryMemberName_, other._T_NullableBinaryMemberName_)) return false;
            //##} else {
            if (!BinaryValuesAreEqual(_T_RequiredBinaryMemberName_, other._T_RequiredBinaryMemberName_)) return false;
            //##}
            //##break;
            //##case MemberKind.String:
            //##if (member.IsNullable) {
            if (!string.Equals(_T_NullableStringMemberName_, other._T_NullableStringMemberName_)) return false;
            //##} else {
            if (!string.Equals(_T_RequiredStringMemberName_, other._T_RequiredStringMemberName_)) return false;
            //##}
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
            return true;
        }

        public override bool Equals(object? obj) => obj is T_ConcreteEntity_ other && Equals(other);
        public static bool operator ==(T_ConcreteEntity_? left, T_ConcreteEntity_? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(T_ConcreteEntity_? left, T_ConcreteEntity_? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##if (member.IsNullable) {
            result.Add(_T_NullableScalarMemberName_);
            //##} else {
            result.Add(_T_RequiredScalarMemberName_);
            //##}
            //##break;
            //##case MemberKind.Vector:
            result.Add(_T_VectorMemberName_.Length);
            for (int i = 0; i < _T_VectorMemberName_.Length; i++)
            {
                result.Add(_T_VectorMemberName_.Span[i]);
            }
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            result.Add(_T_NullableEntityMemberName_);
            //##} else {
            result.Add(_T_RequiredEntityMemberName_);
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##if (member.IsNullable) {
            if (_T_NullableBinaryMemberName_.HasValue)
            {
                var span_T_NullableBinaryMemberName_ = _T_NullableBinaryMemberName_.Value.Span;
                result.Add(span_T_NullableBinaryMemberName_.Length);
#if NET8_0_OR_GREATER
                result.AddBytes(span_T_NullableBinaryMemberName_);
#else
                for (int i = 0; i < span_T_NullableBinaryMemberName_.Length; i++)
                {
                    result.Add(span_T_NullableBinaryMemberName_[i]);
                }
#endif
            }
            //##} else {
            var span_T_RequiredBinaryMemberName_ = _T_RequiredBinaryMemberName_.Span;
            result.Add(span_T_RequiredBinaryMemberName_.Length);
#if NET8_0_OR_GREATER
            result.AddBytes(span_T_RequiredBinaryMemberName_);
#else
            for (int i = 0; i < span_T_RequiredBinaryMemberName_.Length; i++)
            {
                result.Add(span_T_RequiredBinaryMemberName_[i]);
            }
#endif
            //##}
            //##break;
            //##case MemberKind.String:
            //##if (member.IsNullable) {
            result.Add(_T_NullableStringMemberName_);
            //##} else {
            result.Add(_T_RequiredStringMemberName_);
            //##}
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
            return result.ToHashCode();
        }

        [IgnoreMember]
        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!IsFrozen) return CalcHashCode();
            if (_hashCode.HasValue) return _hashCode.Value;
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
    //##}
}