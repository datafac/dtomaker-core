using System;
using System.Linq;
using DTOMaker.Gentime;
namespace DTOMaker.MessagePack;
#pragma warning disable CS0162 // Unreachable code detected
public sealed class EntityGenerator : EntityGeneratorBase
{
    public EntityGenerator(ILanguage language) : base(language) { }
    protected override void OnGenerate(ModelScopeEntity entity)
    {
Emit("// <auto-generated>");
Emit("// This file was generated by DTOMaker.MessagePack.");
Emit("// NuGet: https://www.nuget.org/packages/DTOMaker.MessagePack");
Emit("// Warning: Changes made to this file will be lost if re-generated.");
Emit("// </auto-generated>");
if(false) {
Emit("#pragma warning disable CS0618 // Type or member is obsolete");
Emit("#pragma warning disable CS0162 // Unreachable code detected");
}
Emit("#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required");
Emit("#nullable enable");
Emit("using DataFac.Memory;");
Emit("using DTOMaker.Runtime;");
Emit("using DTOMaker.Runtime.MessagePack;");
Emit("using MessagePack;");
Emit("using System;");
Emit("");
if (false) {
Emit("using T_MemberType_ = System.Int32;");
Emit("namespace T_MemberTypeNameSpace_");
Emit("{");
Emit("    public interface IT_MemberTypeIntfName_");
Emit("    {");
Emit("        long Field1 { get; }");
Emit("    }");
Emit("}");
Emit("namespace T_MemberTypeNameSpace_.MessagePack");
Emit("{");
Emit("    [MessagePackObject]");
Emit("    public sealed class T_MemberTypeImplName_ : EntityBase, IT_MemberTypeIntfName_, IEquatable<T_MemberTypeImplName_>");
Emit("    {");
Emit("        private static readonly T_MemberTypeImplName_ _empty = new T_MemberTypeImplName_();");
Emit("        public static T_MemberTypeImplName_ Empty => _empty;");
Emit("");
Emit("        [Key(1)]");
Emit("        public long Field1 { get; set; }");
Emit("");
Emit("        public static T_MemberTypeImplName_ CreateFrom(IT_MemberTypeIntfName_ source) => throw new NotImplementedException();");
Emit("        protected override int OnGetEntityId() => 3;");
Emit("        public T_MemberTypeImplName_() { }");
Emit("        public T_MemberTypeImplName_(IT_MemberTypeIntfName_ source) { }");
Emit("        protected override IEntityBase OnPartCopy() => throw new NotImplementedException();");
Emit("");
Emit("        public bool Equals(T_MemberTypeImplName_? other)");
Emit("        {");
Emit("            if (other is null) return false;");
Emit("            if (ReferenceEquals(this, other)) return true;");
Emit("            if (!base.Equals(other)) return false;");
Emit("            if (other.Field1 != Field1) return false;");
Emit("            return true;");
Emit("        }");
Emit("");
Emit("        public override bool Equals(object? obj) => obj is T_MemberTypeImplName_ other && Equals(other);");
Emit("        public override int GetHashCode() => HashCode.Combine(Field1);");
Emit("        public static bool operator ==(T_MemberTypeImplName_? left, T_MemberTypeImplName_? right) => left is not null ? left.Equals(right) : (right is null);");
Emit("        public static bool operator !=(T_MemberTypeImplName_? left, T_MemberTypeImplName_? right) => left is not null ? !left.Equals(right) : (right is not null);");
Emit("    }");
Emit("}");
Emit("namespace T_BaseNameSpace_.MessagePack");
Emit("{");
Emit("    public interface IT_BaseName_ : IEntityBase { }");
Emit("    [MessagePackObject]");
Emit("    [Union(T_NameSpace_.MessagePack.T_ConcreteEntity_.EntityId, typeof(T_NameSpace_.MessagePack.T_ConcreteEntity_))]");
Emit("    public abstract class T_BaseName_ : EntityBase, IT_BaseName_, IEquatable<T_BaseName_>");
Emit("    {");
Emit("        public T_BaseName_() { }");
Emit("        public T_BaseName_(IT_BaseName_ source) : base(source) { }");
Emit("        public T_BaseName_(T_BaseName_ source) : base(source) { }");
Emit("");
Emit("        [Key(1)] public T_MemberType_ BaseField1 { get; set; }");
Emit("");
Emit("        public bool Equals(T_BaseName_? other)");
Emit("        {");
Emit("            if (ReferenceEquals(this, other)) return true;");
Emit("            if (other is null) return false;");
Emit("            if (!base.Equals(other)) return false;");
Emit("            return true;");
Emit("        }");
Emit("        public override bool Equals(object? obj) => obj is T_BaseName_ other && Equals(other);");
Emit("        public override int GetHashCode() => base.GetHashCode();");
Emit("    }");
Emit("}");
Emit("namespace T_NameSpace_");
Emit("{");
Emit("    public interface IT_EntityIntfName_ : T_BaseNameSpace_.MessagePack.IT_BaseName_");
Emit("    {");
Emit("        T_MemberType_? T_NullableScalarMemberName_ { get; set; }");
Emit("        T_MemberType_ T_RequiredScalarMemberName_ { get; set; }");
Emit("        ReadOnlyMemory<T_MemberType_> T_VectorMemberName_ { get; set; }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_? T_NullableEntityMemberName_ { get; set; }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_ T_RequiredEntityMemberName_ { get; set; }");
Emit("        Octets? T_NullableBinaryMemberName_ { get; set; }");
Emit("        Octets T_RequiredBinaryMemberName_ { get; set; }");
Emit("        string? T_NullableStringMemberName_ { get; set; }");
Emit("        string T_RequiredStringMemberName_ { get; set; }");
Emit("    }");
Emit("}");
}
Emit("namespace T_NameSpace_.MessagePack");
Emit("{");
Emit("    [MessagePackObject]");
    foreach (var derived in entity.DerivedEntities) {
    using var _ = NewScope(derived);
    if (derived.DerivedEntityCount == 0) {
Emit("    [Union(T_ConcreteEntity_.EntityId, typeof(T_ConcreteEntity_))]");
    }
    }
    if (entity.DerivedEntityCount > 0) {
Emit("    public abstract partial class T_AbstractEntity_ : T_BaseNameSpace_.MessagePack.T_BaseName_, IT_EntityIntfName_, IEquatable<T_AbstractEntity_>");
Emit("    {");
Emit("        // Derived entities: T_DerivedEntityCount_");
        foreach (var derived in entity.DerivedEntities) {
        using var _ = NewScope(derived);
        if (derived.DerivedEntityCount == 0) {
Emit("        // - T_EntityIntfName_");
        } else {
Emit("        // - T_EntityIntfName_ (abstract)");
        }
        }
        if (false) {
Emit("        private const string T_MemberObsoleteMessage_ = null;");
Emit("        private const bool T_MemberObsoleteIsError_ = false;");
Emit("        private const int T_EntityId_ = 2;");
Emit("        private const int T_MemberKeyOffset_ = 10;");
Emit("        private const int T_NullableScalarMemberKey_ = T_MemberKeyOffset_ + 1;");
Emit("        private const int T_RequiredScalarMemberKey_ = T_MemberKeyOffset_ + 2;");
Emit("        private const int T_VectorMemberKey_ = T_MemberKeyOffset_ + 3;");
Emit("        private const int T_NullableEntityMemberKey_ = T_MemberKeyOffset_ + 5;");
Emit("        private const int T_RequiredEntityMemberKey_ = T_MemberKeyOffset_ + 6;");
Emit("        private const int T_NullableBinaryMemberKey_ = T_MemberKeyOffset_ + 7;");
Emit("        private const int T_RequiredBinaryMemberKey_ = T_MemberKeyOffset_ + 8;");
Emit("        private const int T_NullableStringMemberKey_ = T_MemberKeyOffset_ + 9;");
Emit("        private const int T_RequiredStringMemberKey_ = T_MemberKeyOffset_ + 10;");
Emit("        private const int T_MemberDefaultValue_ = 0;");
        }
Emit("");
Emit("        public new const int EntityId = T_EntityId_;");
Emit("");
Emit("        public new static T_ConcreteEntity_ CreateFrom(T_ConcreteEntity_ source)");
Emit("        {");
Emit("            if (source.IsFrozen) return source;");
Emit("            return source switch");
Emit("            {");
                foreach(var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight)) {
                using var _ = NewScope(derived);
                if (derived.DerivedEntityCount == 0) {
Emit("                T_NameSpace_.MessagePack.T_ConcreteEntity_ source2 => new T_NameSpace_.MessagePack.T_ConcreteEntity_(source2),");
                }
                }
Emit("                _ => throw new ArgumentException($\"Unexpected type: {source.GetType().Name}\", nameof(source))");
Emit("            };");
Emit("        }");
Emit("");
Emit("        public new static T_ConcreteEntity_ CreateFrom(T_NameSpace_.IT_EntityIntfName_ source)");
Emit("        {");
Emit("            if (source is T_ConcreteEntity_ concrete && concrete.IsFrozen) return concrete;");
Emit("            return source switch");
Emit("            {");
                foreach(var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight)) {
                using var _ = NewScope(derived);
                if (derived.DerivedEntityCount == 0) {
Emit("                T_NameSpace_.IT_EntityIntfName_ source2 => new T_NameSpace_.MessagePack.T_ConcreteEntity_(source2),");
                }
                }
Emit("                _ => throw new ArgumentException($\"Unexpected type: {source.GetType().Name}\", nameof(source))");
Emit("            };");
Emit("        }");
Emit("");
Emit("        public new static T_ConcreteEntity_ CreateFrom(int entityId, ReadOnlyMemory<byte> buffer)");
Emit("        {");
Emit("            return entityId switch");
Emit("            {");
                foreach (var derived in entity.DerivedEntities) {
                using var _ = NewScope(derived);
                if (derived.DerivedEntityCount == 0) {
Emit("                T_NameSpace_.MessagePack.T_ConcreteEntity_.EntityId => buffer.DeserializeFromMessagePack<T_NameSpace_.MessagePack.T_ConcreteEntity_>(),");
                }
                }
Emit("                _ => throw new ArgumentOutOfRangeException(nameof(entityId), entityId, null)");
Emit("            };");
Emit("        }");
Emit("");
Emit("        protected override int OnGetEntityId() => T_EntityId_;");
Emit("");
Emit("        protected override void OnFreeze()");
Emit("        {");
Emit("            base.OnFreeze();");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Native:
            break;
            case MemberKind.Vector:
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            _T_NullableEntityMemberName_?.Freeze();");
            } else {
Emit("            _T_RequiredEntityMemberName_.Freeze();");
            }
            break;
            case MemberKind.Binary:
            break;
            case MemberKind.String:
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("        }");
Emit("");
Emit("        protected T_AbstractEntity_() { }");
Emit("");
Emit("        protected T_AbstractEntity_(T_AbstractEntity_ source) : base(source)");
Emit("        {");
Emit("            if (source is null) throw new ArgumentNullException(nameof(source));");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Native:
            if (member.IsNullable) {
Emit("            _T_NullableScalarMemberName_ = source._T_NullableScalarMemberName_;");
            } else {
Emit("            _T_RequiredScalarMemberName_ = source._T_RequiredScalarMemberName_;");
            }
            break;
            case MemberKind.Vector:
Emit("            _T_VectorMemberName_ = source._T_VectorMemberName_;");
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            _T_NullableEntityMemberName_ = source._T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source._T_NullableEntityMemberName_);");
            } else {
Emit("            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source._T_RequiredEntityMemberName_);");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            _T_NullableBinaryMemberName_ = source._T_NullableBinaryMemberName_;");
            } else {
Emit("            _T_RequiredBinaryMemberName_ = source._T_RequiredBinaryMemberName_;");
            }
            break;
            case MemberKind.String:
            if (member.IsNullable) {
Emit("            _T_NullableStringMemberName_ = source._T_NullableStringMemberName_;");
            } else {
Emit("            _T_RequiredStringMemberName_ = source._T_RequiredStringMemberName_;");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("        }");
Emit("");
Emit("        public T_AbstractEntity_(IT_EntityIntfName_ source) : base(source)");
Emit("        {");
Emit("            if (source is null) throw new ArgumentNullException(nameof(source));");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Native:
            if (member.IsNullable) {
Emit("            _T_NullableScalarMemberName_ = source.T_NullableScalarMemberName_;");
            } else {
Emit("            _T_RequiredScalarMemberName_ = source.T_RequiredScalarMemberName_;");
            }
            break;
            case MemberKind.Vector:
Emit("            _T_VectorMemberName_ = source.T_VectorMemberName_;");
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            _T_NullableEntityMemberName_ = source.T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source.T_NullableEntityMemberName_);");
            } else {
Emit("            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source.T_RequiredEntityMemberName_);");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            if (source.T_NullableBinaryMemberName_ is null)");
Emit("                _T_NullableBinaryMemberName_ = null;");
Emit("            else");
Emit("                _T_NullableBinaryMemberName_ = source.T_NullableBinaryMemberName_.AsMemory();");
            } else {
Emit("            _T_RequiredBinaryMemberName_ = source.T_RequiredBinaryMemberName_.AsMemory();");
            }
            break;
            case MemberKind.String:
            if (member.IsNullable) {
Emit("            _T_NullableStringMemberName_ = source.T_NullableStringMemberName_;");
            } else {
Emit("            _T_RequiredStringMemberName_ = source.T_RequiredStringMemberName_;");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("        }");
Emit("");
        foreach (var member in entity.Members) {
        using var _ = NewScope(member);
        switch(member.Kind) {
        case MemberKind.Native:
        if (member.IsNullable) {
Emit("        [IgnoreMember]");
Emit("        private T_MemberType_? _T_NullableScalarMemberName_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_NullableScalarMemberKey_)]");
Emit("        public T_MemberType_? T_NullableScalarMemberName_");
Emit("        {");
Emit("            get => _T_NullableScalarMemberName_;");
Emit("            set => _T_NullableScalarMemberName_ = IfNotFrozen(value);");
Emit("        }");
        } else {
Emit("        [IgnoreMember]");
Emit("        private T_MemberType_ _T_RequiredScalarMemberName_ = T_MemberDefaultValue_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_RequiredScalarMemberKey_)]");
Emit("        public T_MemberType_ T_RequiredScalarMemberName_");
Emit("        {");
Emit("            get => _T_RequiredScalarMemberName_;");
Emit("            set => _T_RequiredScalarMemberName_ = IfNotFrozen(value);");
Emit("        }");
        }
        break;
        case MemberKind.Vector:
Emit("        [IgnoreMember]");
Emit("        private ReadOnlyMemory<T_MemberType_> _T_VectorMemberName_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_VectorMemberKey_)]");
Emit("        public ReadOnlyMemory<T_MemberType_> T_VectorMemberName_");
Emit("        {");
Emit("            get => _T_VectorMemberName_;");
Emit("            set => _T_VectorMemberName_ = IfNotFrozen(value);");
Emit("        }");
        break;
        case MemberKind.Entity:
        if (member.IsNullable) {
Emit("        [IgnoreMember]");
Emit("        private T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_? _T_NullableEntityMemberName_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_NullableEntityMemberKey_)]");
Emit("        public T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_? T_NullableEntityMemberName_");
Emit("        {");
Emit("            get => _T_NullableEntityMemberName_;");
Emit("            set => _T_NullableEntityMemberName_ = IfNotFrozen(value);");
Emit("        }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_? IT_EntityIntfName_.T_NullableEntityMemberName_");
Emit("        {");
Emit("            get => _T_NullableEntityMemberName_;");
Emit("            set => _T_NullableEntityMemberName_ = IfNotFrozen(value is null ? null : T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(value));");
Emit("        }");
        } else {
Emit("        [IgnoreMember]");
Emit("        private T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_ _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.Empty;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_RequiredEntityMemberKey_)]");
Emit("        public T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_ T_RequiredEntityMemberName_");
Emit("        {");
Emit("            get => _T_RequiredEntityMemberName_;");
Emit("            set => _T_RequiredEntityMemberName_ = IfNotFrozen(value);");
Emit("        }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_ IT_EntityIntfName_.T_RequiredEntityMemberName_");
Emit("        {");
Emit("            get => _T_RequiredEntityMemberName_;");
Emit("            set => _T_RequiredEntityMemberName_ = IfNotFrozen(T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(value));");
Emit("        }");
        }
        break;
        case MemberKind.Binary:
        if (member.IsNullable) {
Emit("        [IgnoreMember]");
Emit("        private ReadOnlyMemory<byte>? _T_NullableBinaryMemberName_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_NullableBinaryMemberKey_)]");
Emit("        public ReadOnlyMemory<byte>? T_NullableBinaryMemberName_");
Emit("        {");
Emit("            get => _T_NullableBinaryMemberName_;");
Emit("            set => _T_NullableBinaryMemberName_ = IfNotFrozen(value);");
Emit("        }");
Emit("        Octets? IT_EntityIntfName_.T_NullableBinaryMemberName_");
Emit("        {");
Emit("            get => _T_NullableBinaryMemberName_ is null ? null : Octets.UnsafeWrap(_T_NullableBinaryMemberName_.Value);");
Emit("            set => _T_NullableBinaryMemberName_ = IfNotFrozen(value is null ? null : value.AsMemory());");
Emit("        }");
        } else {
Emit("        [IgnoreMember]");
Emit("        private ReadOnlyMemory<byte> _T_RequiredBinaryMemberName_ = ReadOnlyMemory<byte>.Empty;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_RequiredBinaryMemberKey_)]");
Emit("        public ReadOnlyMemory<byte> T_RequiredBinaryMemberName_");
Emit("        {");
Emit("            get => _T_RequiredBinaryMemberName_;");
Emit("            set => _T_RequiredBinaryMemberName_ = IfNotFrozen(value);");
Emit("        }");
Emit("        Octets IT_EntityIntfName_.T_RequiredBinaryMemberName_");
Emit("        {");
Emit("            get => Octets.UnsafeWrap(_T_RequiredBinaryMemberName_);");
Emit("            set => _T_RequiredBinaryMemberName_ = IfNotFrozen(value.AsMemory());");
Emit("        }");
        }
        break;
        case MemberKind.String:
        if (member.IsNullable) {
Emit("        [IgnoreMember]");
Emit("        private string? _T_NullableStringMemberName_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_NullableStringMemberKey_)]");
Emit("        public string? T_NullableStringMemberName_");
Emit("        {");
Emit("            get => _T_NullableStringMemberName_;");
Emit("            set => _T_NullableStringMemberName_ = IfNotFrozen(value);");
Emit("        }");
        } else {
Emit("        [IgnoreMember]");
Emit("        private string _T_RequiredStringMemberName_ = string.Empty;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_RequiredStringMemberKey_)]");
Emit("        public string T_RequiredStringMemberName_");
Emit("        {");
Emit("            get => _T_RequiredStringMemberName_;");
Emit("            set => _T_RequiredStringMemberName_ = IfNotFrozen(value);");
Emit("        }");
        }
        break;
        default:
        Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
        break;
        } // switch
Emit("");
        }
Emit("");
Emit("        public bool Equals(T_AbstractEntity_? other)");
Emit("        {");
Emit("            if (ReferenceEquals(this, other)) return true;");
Emit("            if (other is null) return false;");
Emit("            if (!base.Equals(other)) return false;");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Native:
            if (member.IsNullable) {
Emit("            if (_T_NullableScalarMemberName_ != other.T_NullableScalarMemberName_) return false;");
            } else {
Emit("            if (_T_RequiredScalarMemberName_ != other.T_RequiredScalarMemberName_) return false;");
            }
            break;
            case MemberKind.Vector:
Emit("            if (!_T_VectorMemberName_.Span.SequenceEqual(other.T_VectorMemberName_.Span)) return false;");
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            if (_T_NullableEntityMemberName_ != other.T_NullableEntityMemberName_) return false;");
            } else {
Emit("            if (_T_RequiredEntityMemberName_ != other.T_RequiredEntityMemberName_) return false;");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            if (!BinaryValuesAreEqual(_T_NullableBinaryMemberName_, other._T_NullableBinaryMemberName_)) return false;");
            } else {
Emit("            if (!BinaryValuesAreEqual(_T_RequiredBinaryMemberName_, other. _T_RequiredBinaryMemberName_)) return false;");
            }
            break;
            case MemberKind.String:
            if (member.IsNullable) {
Emit("            if (!string.Equals(_T_NullableStringMemberName_, other._T_NullableStringMemberName_)) return false;");
            } else {
Emit("            if (!string.Equals(_T_RequiredStringMemberName_, other._T_RequiredStringMemberName_)) return false;");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("            return true;");
Emit("        }");
Emit("");
Emit("        public override bool Equals(object? obj) => obj is T_AbstractEntity_ other && Equals(other);");
Emit("        public static bool operator ==(T_AbstractEntity_? left, T_AbstractEntity_? right) => left is not null ? left.Equals(right) : (right is null);");
Emit("        public static bool operator !=(T_AbstractEntity_? left, T_AbstractEntity_? right) => left is not null ? !left.Equals(right) : (right is not null);");
Emit("");
Emit("        private int CalcHashCode()");
Emit("        {");
Emit("            HashCode result = new HashCode();");
Emit("            result.Add(base.GetHashCode());");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Native:
            if (member.IsNullable) {
Emit("            result.Add(_T_NullableScalarMemberName_);");
            } else {
Emit("            result.Add(_T_RequiredScalarMemberName_);");
            }
            break;
            case MemberKind.Vector:
Emit("            result.Add(_T_VectorMemberName_.Length);");
Emit("            for (int i = 0; i < _T_VectorMemberName_.Length; i++)");
Emit("            {");
Emit("                result.Add(_T_VectorMemberName_.Span[i]);");
Emit("            }");
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            result.Add(_T_NullableEntityMemberName_);");
            } else {
Emit("            result.Add(_T_RequiredEntityMemberName_);");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            if (_T_NullableBinaryMemberName_.HasValue)");
Emit("            {");
Emit("                var span_T_NullableBinaryMemberName_ = _T_NullableBinaryMemberName_.Value.Span;");
Emit("                result.Add(span_T_NullableBinaryMemberName_.Length);");
Emit("#if NET8_0_OR_GREATER");
Emit("                result.AddBytes(span_T_NullableBinaryMemberName_);");
Emit("#else");
Emit("                for (int i = 0; i < span_T_NullableBinaryMemberName_.Length; i++)");
Emit("                {");
Emit("                    result.Add(span_T_NullableBinaryMemberName_[i]);");
Emit("                }");
Emit("#endif");
Emit("            }");
            } else {
Emit("            var span_T_RequiredBinaryMemberName_ = _T_RequiredBinaryMemberName_.Span;");
Emit("            result.Add(span_T_RequiredBinaryMemberName_.Length);");
Emit("#if NET8_0_OR_GREATER");
Emit("            result.AddBytes(span_T_RequiredBinaryMemberName_);");
Emit("#else");
Emit("            for (int i = 0; i < span_T_RequiredBinaryMemberName_.Length; i++)");
Emit("            {");
Emit("                result.Add(span_T_RequiredBinaryMemberName_[i]);");
Emit("            }");
Emit("#endif");
            }
            break;
            case MemberKind.String:
            if (member.IsNullable) {
Emit("            result.Add(_T_NullableStringMemberName_);");
            } else {
Emit("            result.Add(_T_RequiredStringMemberName_);");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("            return result.ToHashCode();");
Emit("        }");
Emit("");
Emit("        [IgnoreMember]");
Emit("        private int? _hashCode;");
Emit("        public override int GetHashCode()");
Emit("        {");
Emit("            if (!IsFrozen) return CalcHashCode();");
Emit("            if (_hashCode.HasValue) return _hashCode.Value;");
Emit("            _hashCode = CalcHashCode();");
Emit("            return _hashCode.Value;");
Emit("        }");
Emit("");
Emit("    }");
    } else {
Emit("    public sealed partial class T_ConcreteEntity_ : T_BaseNameSpace_.MessagePack.T_BaseName_, IT_EntityIntfName_, IEquatable<T_ConcreteEntity_>");
Emit("    {");
        if (false) {
Emit("        private const string T_MemberObsoleteMessage_ = null;");
Emit("        private const bool T_MemberObsoleteIsError_ = false;");
Emit("        private const int T_EntityId_ = 2;");
Emit("        private const int T_MemberKeyOffset_ = 10;");
Emit("        private const int T_NullableScalarMemberKey_ = T_MemberKeyOffset_ + 1;");
Emit("        private const int T_RequiredScalarMemberKey_ = T_MemberKeyOffset_ + 2;");
Emit("        private const int T_VectorMemberKey_ = T_MemberKeyOffset_ + 3;");
Emit("        private const int T_NullableEntityMemberKey_ = T_MemberKeyOffset_ + 5;");
Emit("        private const int T_RequiredEntityMemberKey_ = T_MemberKeyOffset_ + 6;");
Emit("        private const int T_NullableBinaryMemberKey_ = T_MemberKeyOffset_ + 7;");
Emit("        private const int T_RequiredBinaryMemberKey_ = T_MemberKeyOffset_ + 8;");
Emit("        private const int T_NullableStringMemberKey_ = T_MemberKeyOffset_ + 9;");
Emit("        private const int T_RequiredStringMemberKey_ = T_MemberKeyOffset_ + 10;");
Emit("        private const int T_MemberDefaultValue_ = 0;");
        }
Emit("");
Emit("        public new const int EntityId = T_EntityId_;");
Emit("");
Emit("        private static T_ConcreteEntity_ CreateEmpty()");
Emit("        {");
Emit("            var empty = new T_ConcreteEntity_();");
Emit("            empty.Freeze();");
Emit("            return empty;");
Emit("        }");
Emit("        private static readonly T_ConcreteEntity_ _empty = CreateEmpty();");
Emit("        public static new T_ConcreteEntity_ Empty => _empty;");
Emit("");
Emit("        public new static T_ConcreteEntity_ CreateFrom(T_ConcreteEntity_ source)");
Emit("        {");
Emit("            if (source.IsFrozen)");
Emit("                return source;");
Emit("            else");
Emit("                return new T_ConcreteEntity_(source);");
Emit("        }");
Emit("");
Emit("        public new static T_ConcreteEntity_ CreateFrom(T_NameSpace_.IT_EntityIntfName_ source)");
Emit("        {");
Emit("            if (source is T_ConcreteEntity_ concrete && concrete.IsFrozen)");
Emit("                return concrete;");
Emit("            else");
Emit("                return new T_ConcreteEntity_(source);");
Emit("        }");
Emit("");
Emit("        public new static T_ConcreteEntity_ CreateFrom(int entityId, ReadOnlyMemory<byte> buffer)");
Emit("        {");
Emit("            if (entityId == T_NameSpace_.MessagePack.T_ConcreteEntity_.EntityId)");
Emit("                return buffer.DeserializeFromMessagePack<T_NameSpace_.MessagePack.T_ConcreteEntity_>();");
Emit("            else");
Emit("                throw new ArgumentOutOfRangeException(nameof(entityId), entityId, null);");
Emit("        }");
Emit("");
Emit("        protected override int OnGetEntityId() => T_EntityId_;");
Emit("");
Emit("        protected override void OnFreeze()");
Emit("        {");
Emit("            base.OnFreeze();");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Native:
            break;
            case MemberKind.Vector:
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            _T_NullableEntityMemberName_?.Freeze();");
            } else {
Emit("            _T_RequiredEntityMemberName_.Freeze();");
            }
            break;
            case MemberKind.Binary:
            break;
            case MemberKind.String:
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("        }");
Emit("");
Emit("        protected override IEntityBase OnPartCopy() => new T_ConcreteEntity_(this);");
Emit("");
Emit("        [SerializationConstructor]");
Emit("        public T_ConcreteEntity_() { }");
Emit("");
Emit("        public T_ConcreteEntity_(T_ConcreteEntity_ source) : base(source)");
Emit("        {");
Emit("            if (source is null) throw new ArgumentNullException(nameof(source));");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Native:
            if (member.IsNullable) {
Emit("            _T_NullableScalarMemberName_ = source._T_NullableScalarMemberName_;");
            } else {
Emit("            _T_RequiredScalarMemberName_ = source._T_RequiredScalarMemberName_;");
            }
            break;
            case MemberKind.Vector:
Emit("            _T_VectorMemberName_ = source._T_VectorMemberName_;");
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            _T_NullableEntityMemberName_ = source._T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source._T_NullableEntityMemberName_);");
            } else {
Emit("            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source._T_RequiredEntityMemberName_);");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            _T_NullableBinaryMemberName_ = source._T_NullableBinaryMemberName_;");
            } else {
Emit("            _T_RequiredBinaryMemberName_ = source._T_RequiredBinaryMemberName_;");
            }
            break;
            case MemberKind.String:
            if (member.IsNullable) {
Emit("            _T_NullableStringMemberName_ = source._T_NullableStringMemberName_;");
            } else {
Emit("            _T_RequiredStringMemberName_ = source._T_RequiredStringMemberName_;");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("        }");
Emit("");
Emit("        public T_ConcreteEntity_(IT_EntityIntfName_ source) : base(source)");
Emit("        {");
Emit("            if (source is null) throw new ArgumentNullException(nameof(source));");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Native:
            if (member.IsNullable) {
Emit("            _T_NullableScalarMemberName_ = source.T_NullableScalarMemberName_;");
            } else {
Emit("            _T_RequiredScalarMemberName_ = source.T_RequiredScalarMemberName_;");
            }
            break;
            case MemberKind.Vector:
Emit("            _T_VectorMemberName_ = source.T_VectorMemberName_;");
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            _T_NullableEntityMemberName_ = source.T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source.T_NullableEntityMemberName_);");
            } else {
Emit("            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(source.T_RequiredEntityMemberName_);");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            if (source.T_NullableBinaryMemberName_ is null)");
Emit("                _T_NullableBinaryMemberName_ = null;");
Emit("            else");
Emit("                _T_NullableBinaryMemberName_ = source.T_NullableBinaryMemberName_.AsMemory();");
            } else {
Emit("            _T_RequiredBinaryMemberName_ = source.T_RequiredBinaryMemberName_.AsMemory();");
            }
            break;
            case MemberKind.String:
            if (member.IsNullable) {
Emit("            _T_NullableStringMemberName_ = source.T_NullableStringMemberName_;");
            } else {
Emit("            _T_RequiredStringMemberName_ = source.T_RequiredStringMemberName_;");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("        }");
Emit("");
        foreach (var member in entity.Members) {
        using var _ = NewScope(member);
        switch(member.Kind) {
        case MemberKind.Native:
        if (member.IsNullable) {
Emit("        [IgnoreMember]");
Emit("        private T_MemberType_? _T_NullableScalarMemberName_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_NullableScalarMemberKey_)]");
Emit("        public T_MemberType_? T_NullableScalarMemberName_");
Emit("        {");
Emit("            get => _T_NullableScalarMemberName_;");
Emit("            set => _T_NullableScalarMemberName_ = IfNotFrozen(value);");
Emit("        }");
        } else {
Emit("        [IgnoreMember]");
Emit("        private T_MemberType_ _T_RequiredScalarMemberName_ = T_MemberDefaultValue_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_RequiredScalarMemberKey_)]");
Emit("        public T_MemberType_ T_RequiredScalarMemberName_");
Emit("        {");
Emit("            get => _T_RequiredScalarMemberName_;");
Emit("            set => _T_RequiredScalarMemberName_ = IfNotFrozen(value);");
Emit("        }");
        }
        break;
        case MemberKind.Vector:
Emit("        [IgnoreMember]");
Emit("        private ReadOnlyMemory<T_MemberType_> _T_VectorMemberName_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_VectorMemberKey_)]");
Emit("        public ReadOnlyMemory<T_MemberType_> T_VectorMemberName_");
Emit("        {");
Emit("            get => _T_VectorMemberName_;");
Emit("            set => _T_VectorMemberName_ = IfNotFrozen(value);");
Emit("        }");
        break;
        case MemberKind.Entity:
        if (member.IsNullable) {
Emit("        [IgnoreMember]");
Emit("        private T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_? _T_NullableEntityMemberName_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_NullableEntityMemberKey_)]");
Emit("        public T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_? T_NullableEntityMemberName_");
Emit("        {");
Emit("            get => _T_NullableEntityMemberName_;");
Emit("            set => _T_NullableEntityMemberName_ = IfNotFrozen(value);");
Emit("        }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_? IT_EntityIntfName_.T_NullableEntityMemberName_");
Emit("        {");
Emit("            get => _T_NullableEntityMemberName_;");
Emit("            set => _T_NullableEntityMemberName_ = IfNotFrozen(value is null ? null : T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(value));");
Emit("        }");
        } else {
Emit("        [IgnoreMember]");
Emit("        private T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_ _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.Empty;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_RequiredEntityMemberKey_)]");
Emit("        public T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_ T_RequiredEntityMemberName_");
Emit("        {");
Emit("            get => _T_RequiredEntityMemberName_;");
Emit("            set => _T_RequiredEntityMemberName_ = IfNotFrozen(value);");
Emit("        }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_ IT_EntityIntfName_.T_RequiredEntityMemberName_");
Emit("        {");
Emit("            get => _T_RequiredEntityMemberName_;");
Emit("            set => _T_RequiredEntityMemberName_ = IfNotFrozen(T_MemberTypeNameSpace_.MessagePack.T_MemberTypeImplName_.CreateFrom(value));");
Emit("        }");
        }
        break;
        case MemberKind.Binary:
        if (member.IsNullable) {
Emit("        [IgnoreMember]");
Emit("        private ReadOnlyMemory<byte>? _T_NullableBinaryMemberName_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_NullableBinaryMemberKey_)]");
Emit("        public ReadOnlyMemory<byte>? T_NullableBinaryMemberName_");
Emit("        {");
Emit("            get => _T_NullableBinaryMemberName_;");
Emit("            set => _T_NullableBinaryMemberName_ = IfNotFrozen(value);");
Emit("        }");
Emit("        Octets? IT_EntityIntfName_.T_NullableBinaryMemberName_");
Emit("        {");
Emit("            get => _T_NullableBinaryMemberName_ is null ? null : Octets.UnsafeWrap(_T_NullableBinaryMemberName_.Value);");
Emit("            set => _T_NullableBinaryMemberName_ = IfNotFrozen(value is null ? null : value.AsMemory());");
Emit("        }");
        } else {
Emit("        [IgnoreMember]");
Emit("        private ReadOnlyMemory<byte> _T_RequiredBinaryMemberName_ = ReadOnlyMemory<byte>.Empty;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_RequiredBinaryMemberKey_)]");
Emit("        public ReadOnlyMemory<byte> T_RequiredBinaryMemberName_");
Emit("        {");
Emit("            get => _T_RequiredBinaryMemberName_;");
Emit("            set => _T_RequiredBinaryMemberName_ = IfNotFrozen(value);");
Emit("        }");
Emit("        Octets IT_EntityIntfName_.T_RequiredBinaryMemberName_");
Emit("        {");
Emit("            get => Octets.UnsafeWrap(_T_RequiredBinaryMemberName_);");
Emit("            set => _T_RequiredBinaryMemberName_ = IfNotFrozen(value.AsMemory());");
Emit("        }");
        }
        break;
        case MemberKind.String:
        if (member.IsNullable) {
Emit("        [IgnoreMember]");
Emit("        private string? _T_NullableStringMemberName_;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_NullableStringMemberKey_)]");
Emit("        public string? T_NullableStringMemberName_");
Emit("        {");
Emit("            get => _T_NullableStringMemberName_;");
Emit("            set => _T_NullableStringMemberName_ = IfNotFrozen(value);");
Emit("        }");
        } else {
Emit("        [IgnoreMember]");
Emit("        private string _T_RequiredStringMemberName_ = string.Empty;");
        if (member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        [Key(T_RequiredStringMemberKey_)]");
Emit("        public string T_RequiredStringMemberName_");
Emit("        {");
Emit("            get => _T_RequiredStringMemberName_;");
Emit("            set => _T_RequiredStringMemberName_ = IfNotFrozen(value);");
Emit("        }");
        }
        break;
        default:
        Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
        break;
        } // switch
Emit("");
        }
Emit("");
Emit("        public bool Equals(T_ConcreteEntity_? other)");
Emit("        {");
Emit("            if (other is null) return false;");
Emit("            if (ReferenceEquals(this, other)) return true;");
Emit("            if (!base.Equals(other)) return false;");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Native:
            if (member.IsNullable) {
Emit("            if (_T_NullableScalarMemberName_ != other.T_NullableScalarMemberName_) return false;");
            } else {
Emit("            if (_T_RequiredScalarMemberName_ != other.T_RequiredScalarMemberName_) return false;");
            }
            break;
            case MemberKind.Vector:
Emit("            if (!_T_VectorMemberName_.Span.SequenceEqual(other.T_VectorMemberName_.Span)) return false;");
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            if (_T_NullableEntityMemberName_ != other.T_NullableEntityMemberName_) return false;");
            } else {
Emit("            if (_T_RequiredEntityMemberName_ != other.T_RequiredEntityMemberName_) return false;");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            if (!BinaryValuesAreEqual(_T_NullableBinaryMemberName_, other._T_NullableBinaryMemberName_)) return false;");
            } else {
Emit("            if (!BinaryValuesAreEqual(_T_RequiredBinaryMemberName_, other._T_RequiredBinaryMemberName_)) return false;");
            }
            break;
            case MemberKind.String:
            if (member.IsNullable) {
Emit("            if (!string.Equals(_T_NullableStringMemberName_, other._T_NullableStringMemberName_)) return false;");
            } else {
Emit("            if (!string.Equals(_T_RequiredStringMemberName_, other._T_RequiredStringMemberName_)) return false;");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("            return true;");
Emit("        }");
Emit("");
Emit("        public override bool Equals(object? obj) => obj is T_ConcreteEntity_ other && Equals(other);");
Emit("        public static bool operator ==(T_ConcreteEntity_? left, T_ConcreteEntity_? right) => left is not null ? left.Equals(right) : (right is null);");
Emit("        public static bool operator !=(T_ConcreteEntity_? left, T_ConcreteEntity_? right) => left is not null ? !left.Equals(right) : (right is not null);");
Emit("");
Emit("        private int CalcHashCode()");
Emit("        {");
Emit("            HashCode result = new HashCode();");
Emit("            result.Add(base.GetHashCode());");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Native:
            if (member.IsNullable) {
Emit("            result.Add(_T_NullableScalarMemberName_);");
            } else {
Emit("            result.Add(_T_RequiredScalarMemberName_);");
            }
            break;
            case MemberKind.Vector:
Emit("            result.Add(_T_VectorMemberName_.Length);");
Emit("            for (int i = 0; i < _T_VectorMemberName_.Length; i++)");
Emit("            {");
Emit("                result.Add(_T_VectorMemberName_.Span[i]);");
Emit("            }");
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            result.Add(_T_NullableEntityMemberName_);");
            } else {
Emit("            result.Add(_T_RequiredEntityMemberName_);");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            if (_T_NullableBinaryMemberName_.HasValue)");
Emit("            {");
Emit("                var span_T_NullableBinaryMemberName_ = _T_NullableBinaryMemberName_.Value.Span;");
Emit("                result.Add(span_T_NullableBinaryMemberName_.Length);");
Emit("#if NET8_0_OR_GREATER");
Emit("                result.AddBytes(span_T_NullableBinaryMemberName_);");
Emit("#else");
Emit("                for (int i = 0; i < span_T_NullableBinaryMemberName_.Length; i++)");
Emit("                {");
Emit("                    result.Add(span_T_NullableBinaryMemberName_[i]);");
Emit("                }");
Emit("#endif");
Emit("            }");
            } else {
Emit("            var span_T_RequiredBinaryMemberName_ = _T_RequiredBinaryMemberName_.Span;");
Emit("            result.Add(span_T_RequiredBinaryMemberName_.Length);");
Emit("#if NET8_0_OR_GREATER");
Emit("            result.AddBytes(span_T_RequiredBinaryMemberName_);");
Emit("#else");
Emit("            for (int i = 0; i < span_T_RequiredBinaryMemberName_.Length; i++)");
Emit("            {");
Emit("                result.Add(span_T_RequiredBinaryMemberName_[i]);");
Emit("            }");
Emit("#endif");
            }
            break;
            case MemberKind.String:
            if (member.IsNullable) {
Emit("            result.Add(_T_NullableStringMemberName_);");
            } else {
Emit("            result.Add(_T_RequiredStringMemberName_);");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("            return result.ToHashCode();");
Emit("        }");
Emit("");
Emit("        [IgnoreMember]");
Emit("        private int? _hashCode;");
Emit("        public override int GetHashCode()");
Emit("        {");
Emit("            if (!IsFrozen) return CalcHashCode();");
Emit("            if (_hashCode.HasValue) return _hashCode.Value;");
Emit("            _hashCode = CalcHashCode();");
Emit("            return _hashCode.Value;");
Emit("        }");
Emit("");
Emit("    }");
    }
Emit("}");
    }
}
