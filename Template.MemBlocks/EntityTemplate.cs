// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
//##if(false) {
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0162 // Unreachable code detected
//##}
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using DataFac.Memory;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;
using DataFac.Storage;

//##if(false) {
using T_MemberType_ = System.Int32;
namespace DataFac.Memory
{
    public static class Codec_T_MemberType__T_MemberBELE_
    {
        public static T_MemberType_ ReadFromSpan(ReadOnlySpan<byte> source) => Codec_Int32_LE.ReadFromSpan(source);
        public static void WriteToSpan(Span<byte> source, T_MemberType_ value) => Codec_Int32_LE.WriteToSpan(source, value);
    }
}
namespace T_MemberTypeNameSpace_
{
    public interface IT_MemberTypeName_ : IMemBlocksEntity
    {
        Int64 Field1 { get; set; }
    }
}
namespace T_MemberTypeNameSpace_.MemBlocks
{
    public class T_MemberTypeName_ : EntityBase, IT_MemberTypeName_
    {
        private const int ClassHeight = 1;
        private const int BlockLength = 8;
        public static T_MemberTypeName_ CreateFrom(T_MemberTypeName_ source)
        {
            if (source.IsFrozen) return source;
            return new T_MemberTypeName_(source);
        }
        public static T_MemberTypeName_ CreateFrom(IT_MemberTypeName_ source)
        {
            if (source is T_MemberTypeName_ concrete && concrete.IsFrozen) return concrete;
            return new T_MemberTypeName_(source);
        }
        public static T_MemberTypeName_ CreateFrom(ReadOnlyMemory<byte> buffer)
        {
            var entityId = DataFac.MemBlocks.Protocol.ParseEntityId(buffer);
            var buffers = DataFac.MemBlocks.Protocol.SplitBuffers(buffer);
            return new T_MemberTypeName_(buffers);
        }
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;
        public T_MemberTypeName_()
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
        }
        public T_MemberTypeName_(T_MemberTypeName_ source) : base(source)
        {
            _writableBlock = source._readonlyBlock.ToArray();
            _readonlyBlock = _writableBlock;
        }
        public T_MemberTypeName_(IT_MemberTypeName_ source) : base(source)
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
            this.Field1 = source.Field1;
        }
        public T_MemberTypeName_(ReadOnlyMemory<byte>[] buffers) : base(buffers)
        {
            ReadOnlyMemory<byte> source = buffers[ClassHeight - 1];
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source;
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.CopyTo(memory);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
        }

        protected override IFreezable OnPartCopy() => throw new NotImplementedException();
        protected override string OnGetEntityId() => "T_MemberTypeName_";
        protected override int OnGetClassHeight() => ClassHeight;
        protected override ValueTask OnPack(IDataStore dataStore) => default;
        protected override ValueTask OnUnpack(IDataStore dataStore, int depth) => default;
        protected override void OnGetBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnGetBuffers(buffers);
            var block = IsFrozen ? _readonlyBlock : _writableBlock.ToArray();
            buffers[ClassHeight - 1] = block;
        }
        protected override void OnLoadBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnLoadBuffers(buffers);
            ReadOnlyMemory<byte> source = buffers[ClassHeight - 1];
            if (source.Length > BlockLength)
            {
                source.Slice(0, BlockLength).CopyTo(_writableBlock);
            }
            else
            {
                source.CopyTo(_writableBlock);
            }
        }

        public Int64 Field1
        {
            get
            {
                return Codec_Int64_LE.ReadFromSpan(_readonlyBlock.Slice(0, 8).Span);
            }

            set
            {
                ThrowIfFrozen();
                Codec_Int64_LE.WriteToSpan(_writableBlock.Slice(0, 8).Span, value);
            }
        }
    }
}
namespace T_BaseNameSpace_.MemBlocks
{
    public interface IT_BaseName_
    {
        T_MemberType_ BaseField1 { get; set; }
    }
    public class T_BaseName_ : EntityBase, IT_BaseName_, IEquatable<T_BaseName_>
    {
        private const int ClassHeight = 1;
        private const int BlockLength = 64;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;

        public new const string EntityId = "T_BaseName_";

        protected override string OnGetEntityId() => "_undefined_";
        protected override int OnGetClassHeight() => ClassHeight;
        protected override void OnGetBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnGetBuffers(buffers);
            var block = IsFrozen ? _readonlyBlock : _writableBlock.ToArray();
            buffers[ClassHeight - 1] = block;
        }
        protected override void OnLoadBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnLoadBuffers(buffers);
            ReadOnlyMemory<byte> source = buffers[ClassHeight - 1];
            if (source.Length > BlockLength)
            {
                source.Slice(0, BlockLength).CopyTo(_writableBlock);
            }
            else
            {
                source.CopyTo(_writableBlock);
            }
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override ValueTask OnPack(IDataStore dataStore)
        {
            return base.OnPack(dataStore);
        }

        protected override ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            return base.OnUnpack(dataStore, depth);
        }
        public T_BaseName_()
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
        }

        public T_BaseName_(T_BaseName_ source) : base(source)
        {
            _writableBlock = source._writableBlock.ToArray();
            _readonlyBlock = _writableBlock;
        }

        public T_BaseName_(IT_BaseName_ source) : base(source)
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
            this.BaseField1 = source.BaseField1;
        }

        public T_BaseName_(ReadOnlyMemory<byte>[] buffers) : base(buffers)
        {
            ReadOnlyMemory<byte> source = buffers[ClassHeight - 1];
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source;
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.Span.CopyTo(memory.Span);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
        }

        private const int T_FieldOffset_ = 4;
        private const int T_FieldLength_ = 4;

        public T_MemberType_ BaseField1
        {
            get
            {
                return (T_MemberType_)Codec_T_MemberType__T_MemberBELE_.ReadFromSpan(_readonlyBlock.Slice(T_FieldOffset_, T_FieldLength_).Span);
            }

            set
            {
                ThrowIfFrozen();
                Codec_T_MemberType__T_MemberBELE_.WriteToSpan(_writableBlock.Slice(T_FieldOffset_, T_FieldLength_).Span, value);
            }
        }

        public bool Equals(T_BaseName_? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyBlock.Span.SequenceEqual(other._readonlyBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is T_BaseName_ other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
    }
}
namespace T_NameSpace_
{
    public interface IT_EntityName_ : T_BaseNameSpace_.MemBlocks.IT_BaseName_
    {
        T_MemberType_ T_ScalarMemberName_ { get; set; }
        ReadOnlyMemory<T_MemberType_> T_VectorMemberName_ { get; set; }
        T_MemberTypeNameSpace_.IT_MemberTypeName_? T_NullableEntityMemberName_ { get; set; }
        T_MemberTypeNameSpace_.IT_MemberTypeName_ T_RequiredEntityMemberName_ { get; set; }
    }
}
//##}
namespace T_NameSpace_.MemBlocks
{
    public partial class T_EntityName_ : T_BaseNameSpace_.MemBlocks.T_BaseName_, IT_EntityName_, IEquatable<T_EntityName_>
    {
        // Derived entities: T_DerivedEntityCount_
        //##foreach(var derived in entity.DerivedEntities) {
        //##using var _ = NewScope(derived);
        // - T_EntityName_
        //##}

        //##if(false) {
        private const int T_ClassHeight_ = 2;
        private const int T_BlockLength_ = 128;
        private const bool T_MemberObsoleteIsError_ = false;
        //##}
        private const int ClassHeight = T_ClassHeight_;
        private const int BlockLength = T_BlockLength_;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;

        public new const string EntityId = "T_EntityId_";

        public new static T_EntityName_ CreateFrom(T_EntityName_ source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                //##foreach(var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight)) {
                //##using var _ = NewScope(derived);
                T_NameSpace_.MemBlocks.T_EntityName_ source2 => new T_NameSpace_.MemBlocks.T_EntityName_(source2),
                //##}
                _ => new T_NameSpace_.MemBlocks.T_EntityName_(source)
            };
        }

        public new static T_EntityName_ CreateFrom(T_NameSpace_.IT_EntityName_ source)
        {
            if (source is T_EntityName_ concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                //##foreach(var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight)) {
                //##using var _ = NewScope(derived);
                T_NameSpace_.IT_EntityName_ source2 => new T_NameSpace_.MemBlocks.T_EntityName_(source2),
                //##}
                _ => new T_NameSpace_.MemBlocks.T_EntityName_(source)
            };
        }

        public new static T_EntityName_ CreateFrom(ReadOnlyMemory<byte> buffer)
        {
            var entityId = DataFac.MemBlocks.Protocol.ParseEntityId(buffer);
            var buffers = DataFac.MemBlocks.Protocol.SplitBuffers(buffer);
            return entityId switch
            {
                //##foreach(var derived in entity.DerivedEntities) {
                //##using var _ = NewScope(derived);
                T_NameSpace_.MemBlocks.T_EntityName_.EntityId => new T_NameSpace_.MemBlocks.T_EntityName_(buffers),
                //##}
                _ => new T_NameSpace_.MemBlocks.T_EntityName_(buffers)
            };
        }

        protected override string OnGetEntityId() => EntityId;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override void OnGetBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnGetBuffers(buffers);
            var block = IsFrozen ? _readonlyBlock : _writableBlock.ToArray();
            buffers[ClassHeight - 1] = block;
        }
        protected override void OnLoadBuffers(ReadOnlyMemory<byte>[] buffers)
        {
            base.OnLoadBuffers(buffers);
            ReadOnlyMemory<byte> source = buffers[ClassHeight - 1];
            if (source.Length > BlockLength)
            {
                source.Slice(0, BlockLength).CopyTo(_writableBlock);
            }
            else
            {
                source.CopyTo(_writableBlock);
            }
        }

        protected override IFreezable OnPartCopy() => new T_EntityName_(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##if (member.IsEntity) {
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_?.Freeze();
            //##} else {
            _T_RequiredEntityMemberName_?.Freeze();
            //##}
            //##}
            //##}
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##if (member.IsEntity) {
            //##if (member.IsNullable) {
            await T_NullableEntityMemberName__Pack(dataStore);
            //##} else {
            await T_RequiredEntityMemberName__Pack(dataStore);
            //##}
            //##}
            //##}
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
            //##foreach (var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##if (member.IsEntity) {
            //##if (member.IsNullable) {
            await T_NullableEntityMemberName__Unpack(dataStore, depth);
            //##} else {
            await T_RequiredEntityMemberName__Unpack(dataStore, depth);
            //##}
            //##}
            //##}
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //##foreach(var member in entity.Members) {
        //##using var _ = NewScope(member);
        //  T_MemberSequenceR4_  T_FieldOffsetR4_  T_FieldLengthR4_  T_ArrayLengthR4_  T_MemberTypeL7_ T_MemberBELE_    T_MemberName_
        //##}
        // ------------------------------------------------------------

        public T_EntityName_()
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
        }

        public T_EntityName_(T_EntityName_ source) : base(source)
        {
            _writableBlock = source._readonlyBlock.ToArray();
            _readonlyBlock = _writableBlock;
        }

        public T_EntityName_(IT_EntityName_ source) : base(source)
        {
            _readonlyBlock = _writableBlock = new byte[BlockLength];
            //##foreach(var member in entity.Members) {
            //##using var _ = NewScope(member);
            //##if(member.IsVector) {
            this.T_VectorMemberName_ = source.T_VectorMemberName_;
            //##} else if (member.IsEntity) {
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_ = source.T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(source.T_NullableEntityMemberName_);
            //##} else {
            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(source.T_RequiredEntityMemberName_);
            //##}
            //##} else {
            this.T_ScalarMemberName_ = source.T_ScalarMemberName_;
            //##}
            //##}
        }

        public T_EntityName_(ReadOnlyMemory<byte>[] buffers) : base(buffers)
        {
            ReadOnlyMemory<byte> source = buffers[ClassHeight - 1];
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source; // todo? keep extra?
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.CopyTo(memory);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
        }

        //##if(false) {
        private const int T_FieldOffset_ = 64;
        private const int T_FieldLength_ = 8;
        private const bool T_IsBigEndian_ = false;
        private const int T_ArrayLength_ = 4;
        //##}
        //##foreach(var member in entity.Members) {
        //##using var _ = NewScope(member);
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        //##if(member.IsVector) {
        public ReadOnlyMemory<T_MemberType_> T_VectorMemberName_
        {
            get
            {
                var sourceSpan = _readonlyBlock.Slice(T_FieldOffset_, T_FieldLength_ * T_ArrayLength_).Span;
                //##if(member.FieldLength == 1) {
                return MemoryMarshal.Cast<byte, T_MemberType_>(sourceSpan).ToArray(); // todo alloc!
                //##} else {
                if (BitConverter.IsLittleEndian != T_IsBigEndian_)
                {
                    // endian match
                    return MemoryMarshal.Cast<byte, T_MemberType_>(sourceSpan).ToArray(); // todo alloc!
                }
                else
                {
                    // endian mismatch - decode each element
                    var target = new T_MemberType_[T_ArrayLength_]; // todo alloc!
                    Span<T_MemberType_> targetSpan = target.AsSpan();
                    for (int i = 0; i < T_ArrayLength_; i++)
                    {
                        var elementSpan = sourceSpan.Slice(T_FieldLength_ * i, T_FieldLength_);
                        targetSpan[i] = Codec_T_MemberType__T_MemberBELE_.ReadFromSpan(elementSpan);
                    }
                    return target;
                }
                //##}
            }

            set
            {
                ThrowIfFrozen();
                var targetSpan = _writableBlock.Slice(T_FieldOffset_, T_FieldLength_ * T_ArrayLength_).Span;
                targetSpan.Clear();
                //##if(member.FieldLength == 1) {
                value.Span.CopyTo(MemoryMarshal.Cast<byte, T_MemberType_>(targetSpan));
                //##} else {
                if (BitConverter.IsLittleEndian != T_IsBigEndian_)
                {
                    // endian match
                    value.Span.CopyTo(MemoryMarshal.Cast<byte, T_MemberType_>(targetSpan));
                }
                else
                {
                    // endian mismatch - encode each element
                    var sourceSpan = value.Span;
                    for (int i = 0; i < sourceSpan.Length; i++)
                    {
                        var elementSpan = targetSpan.Slice(T_FieldLength_ * i, T_FieldLength_);
                        Codec_T_MemberType__T_MemberBELE_.WriteToSpan(elementSpan, sourceSpan[i]);
                    }
                }
                //##}
            }
        }

        //##} else if (member.IsEntity) {
        //##if (member.IsNullable) {
        private async ValueTask T_NullableEntityMemberName__Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = default;
            if (_T_NullableEntityMemberName_ is not null)
            {
                await _T_NullableEntityMemberName_.Pack(dataStore);
                var buffer = _T_NullableEntityMemberName_.GetBuffer();
                var blob = BlobData.UnsafeWrap(buffer);
                blobId = await dataStore.PutBlob(blob);
            }
            Codec_BlobId_NE.WriteToSpan(_writableBlock.Slice(T_FieldOffset_, 64).Span, blobId);
        }
        private async ValueTask T_NullableEntityMemberName__Unpack(IDataStore dataStore, int depth)
        {
            BlobIdV1 blobId = Codec_BlobId_NE.ReadFromSpan(_readonlyBlock.Slice(T_FieldOffset_, 64).Span);
            if (blobId.IsEmpty)
            {
                _T_NullableEntityMemberName_ = null;
            }
            else
            {
                BlobData? blob = await dataStore.GetBlob(blobId);
                if (blob is null) throw new InvalidDataException($"BlobIdV0 '{blobId}' not found!");
                _T_NullableEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(blob.Value.Memory);
                await _T_NullableEntityMemberName_.Unpack(dataStore, depth - 1);
            }
        }
        private T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_? _T_NullableEntityMemberName_;
        public T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_? T_NullableEntityMemberName_
        {
            get
            {
                ThrowIfNotUnpacked();
                return _T_NullableEntityMemberName_;
            }

            set
            {
                ThrowIfFrozen();
                _T_NullableEntityMemberName_ = value is null ? null : value.IsFrozen ? value : T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(value);
            }
        }
        T_MemberTypeNameSpace_.IT_MemberTypeName_? IT_EntityName_.T_NullableEntityMemberName_
        {
            get
            {
                ThrowIfNotUnpacked();
                return _T_NullableEntityMemberName_;
            }

            set
            {
                ThrowIfFrozen();
                _T_NullableEntityMemberName_ = value is null ? null : T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(value);
            }
        }
        //##} else {
        private async ValueTask T_RequiredEntityMemberName__Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = default;
            if (_T_RequiredEntityMemberName_ is null)
            {
                _T_RequiredEntityMemberName_ = await CreateEmpty< T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_>(dataStore);
            }
            else
            {
                await _T_RequiredEntityMemberName_.Pack(dataStore);
                var buffer = _T_RequiredEntityMemberName_.GetBuffer();
                var blob = BlobData.UnsafeWrap(buffer);
                blobId = await dataStore.PutBlob(blob);
            }
            Codec_BlobId_NE.WriteToSpan(_writableBlock.Slice(T_FieldOffset_, 64).Span, blobId);
        }
        private async ValueTask T_RequiredEntityMemberName__Unpack(IDataStore dataStore, int depth)
        {
            BlobIdV1 blobId = Codec_BlobId_NE.ReadFromSpan(_readonlyBlock.Slice(T_FieldOffset_, 64).Span);
            if (blobId.IsEmpty)
            {
                _T_RequiredEntityMemberName_ = await CreateEmpty<T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_>(dataStore);
            }
            else
            {
                BlobData? blob = await dataStore.GetBlob(blobId);
                if (blob is null) throw new InvalidDataException($"BlobIdV0 '{blobId}' not found!");
                _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(blob.Value.Memory);
                await _T_RequiredEntityMemberName_.Unpack(dataStore, depth - 1);
            }
        }
        private T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_? _T_RequiredEntityMemberName_ = null;
        public T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_ T_RequiredEntityMemberName_
        {
            get
            {
                ThrowIfNotUnpacked();
                return IfNotNull(_T_RequiredEntityMemberName_);
            }
            set
            {
                ThrowIfFrozen();
                _T_RequiredEntityMemberName_ = value.IsFrozen ? value : T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(value);
            }
        }
        T_MemberTypeNameSpace_.IT_MemberTypeName_ IT_EntityName_.T_RequiredEntityMemberName_
        {
            get
            {
                ThrowIfNotUnpacked();
                return IfNotNull(_T_RequiredEntityMemberName_);
            }
            set
            {
                ThrowIfFrozen();
                _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(value);
            }
        }
        //##}
        //##} else {
        public T_MemberType_ T_ScalarMemberName_
        {
            get
            {
                return Codec_T_MemberType__T_MemberBELE_.ReadFromSpan(_readonlyBlock.Slice(T_FieldOffset_, T_FieldLength_).Span);
            }

            set
            {
                ThrowIfFrozen();
                Codec_T_MemberType__T_MemberBELE_.WriteToSpan(_writableBlock.Slice(T_FieldOffset_, T_FieldLength_).Span, value);
            }
        }

        //##}
        //##}

        public bool Equals(T_EntityName_? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyBlock.Span.SequenceEqual(other._readonlyBlock.Span)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is T_EntityName_ other && Equals(other);
        public static bool operator ==(T_EntityName_? left, T_EntityName_? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(T_EntityName_? left, T_EntityName_? right) => left is not null ? !left.Equals(right) : (right is not null);

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            result.Add(base.GetHashCode());
            result.Add(_readonlyBlock.Length);
#if NET8_0_OR_GREATER
            result.AddBytes(_readonlyBlock.Span);
#else
            var byteSpan = _readonlyBlock.Span;
            for (int i = 0; i < byteSpan.Length; i++)
            {
                result.Add(byteSpan[i]);
            }
#endif
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (_hashCode.HasValue) return _hashCode.Value;
            if (!IsFrozen) return CalcHashCode();
            _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
