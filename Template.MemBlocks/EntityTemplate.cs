// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
//##if(false) {
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS0162 // Unreachable code detected
//##}
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required
#nullable enable
using System;
using System.Buffers;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using DataFac.Memory;
using DataFac.Storage;
using DTOMaker.Runtime;
using DTOMaker.Runtime.MemBlocks;

//##if(false) {
using T_MemberType_ = System.Int32;
namespace DataFac.Memory
{
    public static class Codec_T_MemberType__T_MemberBELE_
    {
        public static T_MemberType_ ReadFromSpan(ReadOnlySpan<byte> source) => Codec_Int32_LE.ReadFromSpan(source);
        public static void WriteToSpan(Span<byte> source, T_MemberType_ value) => Codec_Int32_LE.WriteToSpan(source, value);
    }
}
namespace T_MemberTypeNameSpace_
{
    public interface IT_MemberTypeIntfName_ : IPackable
    {
        Int64 Field1 { get; set; }
    }
}
namespace T_MemberTypeNameSpace_.MemBlocks
{
    public class T_MemberTypeImplName_ : EntityBase, IT_MemberTypeIntfName_
    {
        private const int ClassHeight = 1;
        private const int BlockLength = 8;
        private const long StructureCode = 0x00_41L;
        private static readonly BlockHeader _header = BlockHeader.CreateNew(3, StructureCode);

        public static T_MemberTypeImplName_ CreateFrom(T_MemberTypeImplName_ source)
        {
            if (source.IsFrozen) return source;
            return new T_MemberTypeImplName_(source);
        }
        public static T_MemberTypeImplName_ CreateFrom(IT_MemberTypeIntfName_ source)
        {
            if (source is T_MemberTypeImplName_ concrete && concrete.IsFrozen) return concrete;
            return new T_MemberTypeImplName_(source);
        }
        public static T_MemberTypeImplName_ CreateFrom(ReadOnlySequence<byte> buffers)
        {
            return new T_MemberTypeImplName_(buffers);
        }
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;
        public T_MemberTypeImplName_() : base(_header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }
        public T_MemberTypeImplName_(T_MemberTypeImplName_ source) : base(_header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }
        public T_MemberTypeImplName_(IT_MemberTypeIntfName_ source) : base(_header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            this.Field1 = source.Field1;
        }
        protected T_MemberTypeImplName_(BlockHeader header, SourceBlocks sourceBlocks) : base(_header, sourceBlocks)
        {
            var sourceBlock = sourceBlocks.Blocks.Span[ClassHeight];
            if (sourceBlock.Length < BlockLength)
            {
                // source too small - allocate new
                _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
                sourceBlock.CopyTo(_writableLocalBlock);
            }
            else
            {
                _readonlyLocalBlock = sourceBlock;
                _writableLocalBlock = Memory<byte>.Empty;
            }
        }
        public T_MemberTypeImplName_(ReadOnlySequence<byte> buffers) : this(_header, SourceBlocks.ParseFrom(buffers)) { }

        protected override ReadOnlySequenceBuilder<byte> OnSequenceBuilder(ReadOnlySequenceBuilder<byte> builder) => base.OnSequenceBuilder(builder).Append(_readonlyLocalBlock);
        protected override IEntityBase OnPartCopy() => throw new NotImplementedException();
        protected override int OnGetEntityId() => 3;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override ValueTask OnPack(IDataStore dataStore) => default;
        protected override ValueTask OnUnpack(IDataStore dataStore, int depth) => default;

        public Int64 Field1
        {
            get => Codec_Int64_LE.ReadFromSpan(_readonlyLocalBlock.Slice(0, 8).Span);
            set => Codec_Int64_LE.WriteToSpan(_writableLocalBlock.Slice(0, 8).Span, IfNotFrozen(value));
        }
    }
}
namespace T_BaseNameSpace_.MemBlocks
{
    public interface IT_BaseName_
    {
        T_MemberType_ BaseField1 { get; set; }
    }
    public class T_BaseName_ : EntityBase, IT_BaseName_, IEquatable<T_BaseName_>
    {
        private const int ClassHeight = 1;
        private const int BlockLength = 4; // structure code = 0x0031L;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        protected override int OnGetEntityId() => 1;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override ReadOnlySequenceBuilder<byte> OnSequenceBuilder(ReadOnlySequenceBuilder<byte> builder) => base.OnSequenceBuilder(builder).Append(_readonlyLocalBlock);
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        protected override ValueTask OnPack(IDataStore dataStore)
        {
            return base.OnPack(dataStore);
        }

        protected override ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            return base.OnUnpack(dataStore, depth);
        }

        protected T_BaseName_(BlockHeader header) : base(header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }

        protected T_BaseName_(BlockHeader header, T_BaseName_ source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            this.BaseField1 = source.BaseField1;
        }

        protected T_BaseName_(BlockHeader header, IT_BaseName_ source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            this.BaseField1 = source.BaseField1;
        }

        protected T_BaseName_(BlockHeader header, SourceBlocks sourceBlocks) : base(header, sourceBlocks)
        {
            var sourceBlock = sourceBlocks.Blocks.Span[ClassHeight];
            if (sourceBlock.Length < BlockLength)
            {
                // source too small - allocate new
                Memory<byte> memory = new byte[BlockLength];
                sourceBlock.CopyTo(memory);
                _readonlyLocalBlock = memory;
            }
            else
            {
                _readonlyLocalBlock = sourceBlock;
            }
            _writableLocalBlock = Memory<byte>.Empty;
        }

        private const int T_FieldOffset_ = 0;
        private const int T_FieldLength_ = 4;

        public T_MemberType_ BaseField1
        {
            get => (T_MemberType_)Codec_T_MemberType__T_MemberBELE_.ReadFromSpan(_readonlyLocalBlock.Slice(T_FieldOffset_, T_FieldLength_).Span);
            set => Codec_T_MemberType__T_MemberBELE_.WriteToSpan(_writableLocalBlock.Slice(T_FieldOffset_, T_FieldLength_).Span, IfNotFrozen(value));
        }

        public bool Equals(T_BaseName_? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyLocalBlock.Span.SequenceEqual(other._readonlyLocalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is T_BaseName_ other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
    }
}
namespace T_NameSpace_
{
    public interface IT_EntityIntfName_ : T_BaseNameSpace_.MemBlocks.IT_BaseName_
    {
        T_MemberType_ T_ScalarMemberName_ { get; set; }
        ReadOnlyMemory<T_MemberType_> T_VectorMemberName_ { get; set; }
        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_? T_NullableEntityMemberName_ { get; set; }
        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_ T_RequiredEntityMemberName_ { get; set; }
        Octets? T_NullableFixLenBinaryMemberName_ { get; set; }
        Octets? T_NullableVarLenBinaryMemberName_ { get; set; }
        Octets T_RequiredFixLenBinaryMemberName_ { get; set; }
        Octets T_RequiredVarLenBinaryMemberName_ { get; set; }
        String? T_NullableFixLenStringMemberName_ { get; set; }
        String? T_NullableVarLenStringMemberName_ { get; set; }
        String T_RequiredFixLenStringMemberName_ { get; set; }
        String T_RequiredVarLenStringMemberName_ { get; set; }
    }
}
//##}
namespace T_NameSpace_.MemBlocks
{
    public partial class T_EntityImplName_ : T_BaseNameSpace_.MemBlocks.T_BaseName_, IT_EntityIntfName_, IEquatable<T_EntityImplName_>
    {
        // Derived entities: T_DerivedEntityCount_
        //##foreach(var derived in entity.DerivedEntities) {
        //##using var _ = NewScope(derived);
        // - T_EntityImplName_
        //##}

        //##if(false) {
        private const int T_ClassHeight_ = 2;
        private const int T_EntityId_ = 2;
        private const int T_BlockLength_ = 1024;
        private const bool T_MemberObsoleteIsError_ = false;
        private const long T_BlockStructureCode_ = 0x0B00 + 0x0030 + 0x0002;
        //##}
        private const long BlockStructureCode = T_BlockStructureCode_;
        private const int ClassHeight = T_ClassHeight_;
        private const int BlockLength = T_BlockLength_;
        private readonly Memory<byte> _writableLocalBlock;
        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;

        private static readonly BlockHeader _header = BlockHeader.CreateNew(T_EntityId_, BlockStructureCode);

        public new static T_EntityImplName_ CreateFrom(T_EntityImplName_ source)
        {
            if (source.IsFrozen) return source;
            return source switch
            {
                //##foreach(var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight)) {
                //##using var _ = NewScope(derived);
                T_NameSpace_.MemBlocks.T_EntityImplName_ source2 => new T_NameSpace_.MemBlocks.T_EntityImplName_(source2),
                //##}
                _ => new T_NameSpace_.MemBlocks.T_EntityImplName_(source)
            };
        }

        public new static T_EntityImplName_ CreateFrom(T_NameSpace_.IT_EntityIntfName_ source)
        {
            if (source is T_EntityImplName_ concrete && concrete.IsFrozen) return concrete;
            return source switch
            {
                //##foreach(var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight)) {
                //##using var _ = NewScope(derived);
                T_NameSpace_.IT_EntityIntfName_ source2 => new T_NameSpace_.MemBlocks.T_EntityImplName_(source2),
                //##}
                _ => new T_NameSpace_.MemBlocks.T_EntityImplName_(source)
            };
        }

        public new static T_EntityImplName_ CreateFrom(ReadOnlySequence<byte> buffers)
        {
            SourceBlocks blocks = SourceBlocks.ParseFrom(buffers);
            return blocks.Header.EntityId switch
            {
                //##foreach(var derived in entity.DerivedEntities) {
                //##using var _ = NewScope(derived);
                T_EntityId_ => new T_NameSpace_.MemBlocks.T_EntityImplName_(blocks),
                //##}
                _ => new T_NameSpace_.MemBlocks.T_EntityImplName_(blocks)
            };
        }

        protected override int OnGetEntityId() => T_EntityId_;
        protected override int OnGetClassHeight() => ClassHeight;
        protected override ReadOnlySequenceBuilder<byte> OnSequenceBuilder(ReadOnlySequenceBuilder<byte> builder) => base.OnSequenceBuilder(builder).Append(_readonlyLocalBlock);
        protected override IEntityBase OnPartCopy() => new T_EntityImplName_(this);

        protected override void OnFreeze()
        {
            base.OnFreeze();
            //##foreach (var member in entity.Members.OfType<MemBlocksModelScopeMember>()) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##break;
            //##case MemberKind.Vector:
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_?.Freeze();
            //##} else {
            _T_RequiredEntityMemberName_?.Freeze();
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##break;
            //##case MemberKind.String:
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
        }

        protected override async ValueTask OnPack(IDataStore dataStore)
        {
            await base.OnPack(dataStore);
            //##foreach (var member in entity.Members.OfType<MemBlocksModelScopeMember>()) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##break;
            //##case MemberKind.Vector:
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            await T_NullableEntityMemberName__Pack(dataStore);
            //##} else {
            await T_RequiredEntityMemberName__Pack(dataStore);
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##if (member.IsNullable) {
            //##if (member.IsFixedLength) {
            T_NullableFixLenBinaryMemberName__Pack();
            //##} else {
            await T_NullableVarLenBinaryMemberName__Pack(dataStore);
            //##}
            //##} else {
            //##if (member.IsFixedLength) {
            T_RequiredFixLenBinaryMemberName__Pack();
            //##} else {
            await T_RequiredVarLenBinaryMemberName__Pack(dataStore);
            //##}
            //##}
            //##break;
            //##case MemberKind.String:
            //##if (member.IsNullable) {
            //##if (member.IsFixedLength) {
            T_NullableFixLenStringMemberName__Pack();
            //##} else {
            await T_NullableVarLenStringMemberName__Pack(dataStore);
            //##}
            //##} else {
            //##if (member.IsFixedLength) {
            T_RequiredFixLenStringMemberName__Pack();
            //##} else {
            await T_RequiredVarLenStringMemberName__Pack(dataStore);
            //##}
            //##}
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
        }

        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)
        {
            await base.OnUnpack(dataStore, depth);
            //##foreach (var member in entity.Members.OfType<MemBlocksModelScopeMember>()) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            //##break;
            //##case MemberKind.Vector:
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            await T_NullableEntityMemberName__Unpack(dataStore, depth);
            //##} else {
            await T_RequiredEntityMemberName__Unpack(dataStore, depth);
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##if (member.IsNullable) {
            //##if (member.IsFixedLength) {
            T_NullableFixLenBinaryMemberName__Unpack();
            //##} else {
            await T_NullableVarLenBinaryMemberName__Unpack(dataStore);
            //##}
            //##} else {
            //##if (member.IsFixedLength) {
            T_RequiredFixLenBinaryMemberName__Unpack();
            //##} else {
            await T_RequiredVarLenBinaryMemberName__Unpack(dataStore);
            //##}
            //##}
            //##break;
            //##case MemberKind.String:
            //##if (member.IsNullable) {
            //##if (member.IsFixedLength) {
            T_NullableFixLenStringMemberName__Unpack();
            //##} else {
            await T_NullableVarLenStringMemberName__Unpack(dataStore);
            //##}
            //##} else {
            //##if (member.IsFixedLength) {
            T_RequiredFixLenStringMemberName__Unpack();
            //##} else {
            await T_RequiredVarLenStringMemberName__Unpack(dataStore);
            //##}
            //##}
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
        }

        // -------------------- field map -----------------------------
        //  Seq.  Off.  Len.  N.    Type    End.  Name
        //  ----  ----  ----  ----  ------- ----  -------
        //##foreach(var member in entity.Members.OfType<MemBlocksModelScopeMember>()) {
        //##using var _ = NewScope(member);
        //  T_MemberSequenceR4_  T_FieldOffsetR4_  T_FieldLengthR4_  T_ArrayLengthR4_  T_MemberTypeL7_ T_MemberBELE_    T_MemberName_
        //##}
        // ------------------------------------------------------------

        protected T_EntityImplName_(BlockHeader header) : base(header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }
        public T_EntityImplName_() : base(_header)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
        }

        protected T_EntityImplName_(BlockHeader header, T_EntityImplName_ source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            //##foreach(var member in entity.Members.OfType<MemBlocksModelScopeMember>()) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            this.T_ScalarMemberName_ = source.T_ScalarMemberName_;
            //##break;
            //##case MemberKind.Vector:
            this.T_VectorMemberName_ = source.T_VectorMemberName_;
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_ = source._T_NullableEntityMemberName_;
            //##} else {
            _T_RequiredEntityMemberName_ = source._T_RequiredEntityMemberName_;
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##if (member.IsNullable) {
            //##if (member.IsFixedLength) {
            _T_NullableFixLenBinaryMemberName_ = source._T_NullableFixLenBinaryMemberName_;
            //##} else {
            _T_NullableVarLenBinaryMemberName_ = source._T_NullableVarLenBinaryMemberName_;
            //##}
            //##} else {
            //##if (member.IsFixedLength) {
            _T_RequiredFixLenBinaryMemberName_ = source._T_RequiredFixLenBinaryMemberName_;
            //##} else {
            _T_RequiredVarLenBinaryMemberName_ = source._T_RequiredVarLenBinaryMemberName_;
            //##}
            //##}
            //##break;
            //##case MemberKind.String:
            //##if (member.IsNullable) {
            //##if (member.IsFixedLength) {
            _T_NullableFixLenStringMemberName_ = source._T_NullableFixLenStringMemberName_;
            //##} else {
            _T_NullableVarLenStringMemberName_ = source._T_NullableVarLenStringMemberName_;
            //##}
            //##} else {
            //##if (member.IsFixedLength) {
            _T_RequiredFixLenStringMemberName_ = source._T_RequiredFixLenStringMemberName_;
            //##} else {
            _T_RequiredVarLenStringMemberName_ = source._T_RequiredVarLenStringMemberName_;
            //##}
            //##}
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
        }
        public T_EntityImplName_(T_EntityImplName_ source) : this(_header, source) { }

        protected T_EntityImplName_(BlockHeader header, IT_EntityIntfName_ source) : base(header, source)
        {
            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
            //##foreach(var member in entity.Members.OfType<MemBlocksModelScopeMember>()) {
            //##using var _ = NewScope(member);
            //##switch(member.Kind) {
            //##case MemberKind.Native:
            this.T_ScalarMemberName_ = source.T_ScalarMemberName_;
            //##break;
            //##case MemberKind.Vector:
            this.T_VectorMemberName_ = source.T_VectorMemberName_;
            //##break;
            //##case MemberKind.Entity:
            //##if (member.IsNullable) {
            _T_NullableEntityMemberName_ = source.T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_.CreateFrom(source.T_NullableEntityMemberName_);
            //##} else {
            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_.CreateFrom(source.T_RequiredEntityMemberName_);
            //##}
            //##break;
            //##case MemberKind.Binary:
            //##if (member.IsNullable) {
            //##if (member.IsFixedLength) {
            _T_NullableFixLenBinaryMemberName_ = source.T_NullableFixLenBinaryMemberName_;
            //##} else {
            _T_NullableVarLenBinaryMemberName_ = source.T_NullableVarLenBinaryMemberName_;
            //##}
            //##} else {
            //##if (member.IsFixedLength) {
            _T_RequiredFixLenBinaryMemberName_ = source.T_RequiredFixLenBinaryMemberName_;
            //##} else {
            _T_RequiredVarLenBinaryMemberName_ = source.T_RequiredVarLenBinaryMemberName_;
            //##}
            //##}
            //##break;
            //##case MemberKind.String:
            //##if (member.IsNullable) {
            //##if (member.IsFixedLength) {
            _T_NullableFixLenStringMemberName_ = source.T_NullableFixLenStringMemberName_;
            //##} else {
            _T_NullableVarLenStringMemberName_ = source.T_NullableVarLenStringMemberName_;
            //##}
            //##} else {
            //##if (member.IsFixedLength) {
            _T_RequiredFixLenStringMemberName_ = source.T_RequiredFixLenStringMemberName_;
            //##} else {
            _T_RequiredVarLenStringMemberName_ = source.T_RequiredVarLenStringMemberName_;
            //##}
            //##}
            //##break;
            //##default:
            //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            //##break;
            //##} // switch
            //##}
        }
        public T_EntityImplName_(IT_EntityIntfName_ source) : this(_header, source) { }

        protected T_EntityImplName_(BlockHeader header, SourceBlocks sourceBlocks) : base(header, sourceBlocks)
        {
            var sourceBlock = sourceBlocks.Blocks.Span[ClassHeight];
            if (sourceBlock.Length < BlockLength)
            {
                // source too small - allocate new
                _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];
                sourceBlock.CopyTo(_writableLocalBlock);
            }
            else
            {
                _readonlyLocalBlock = sourceBlock;
                _writableLocalBlock = Memory<byte>.Empty;
            }
        }
        internal T_EntityImplName_(SourceBlocks sourceBlocks) : this(_header, sourceBlocks) { }
        public T_EntityImplName_(ReadOnlySequence<byte> buffers) : this(_header, SourceBlocks.ParseFrom(buffers)) { }

        //##if(false) {
        private const int T_ScalarFieldOffset_ = 0;
        private const int T_VectorFieldOffset_ = 32;
        private const int T_NullableEntityFieldOffset_ = 64;
        private const int T_RequiredEntityFieldOffset_ = 128;
        private const int T_NullableFixLenBinaryFieldOffset_ = 192;
        private const int T_NullableFixLenBinaryFieldLength_ = 32;
        private const int T_RequiredFixLenBinaryFieldOffset_ = 224;
        private const int T_RequiredFixLenBinaryFieldLength_ = 32;

        private const int T_NullableVarLenBinaryFieldOffset_ = 256;
        private const int T_RequiredVarLenBinaryFieldOffset_ = 320;

        private const int T_NullableFixLenStringFieldOffset_ = 384;
        private const int T_NullableFixLenStringFieldLength_ = 32;
        private const int T_RequiredFixLenStringFieldOffset_ = 416;
        private const int T_RequiredFixLenStringFieldLength_ = 32;

        private const int T_NullableVarLenStringFieldOffset_ = 448;
        private const int T_RequiredVarLenStringFieldOffset_ = 512;

        private const int T_FieldLength_ = 8;
        private const bool T_IsBigEndian_ = false;
        private const int T_ArrayLength_ = 4;
        //##}
        //##foreach(var member in entity.Members.OfType<MemBlocksModelScopeMember>()) {
        //##using var _ = NewScope(member);
        //##switch(member.Kind) {
        //##case MemberKind.Native:
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        public T_MemberType_ T_ScalarMemberName_
        {
            get => Codec_T_MemberType__T_MemberBELE_.ReadFromSpan(_readonlyLocalBlock.Slice(T_ScalarFieldOffset_, T_FieldLength_).Span);
            set => Codec_T_MemberType__T_MemberBELE_.WriteToSpan(_writableLocalBlock.Slice(T_ScalarFieldOffset_, T_FieldLength_).Span, IfNotFrozen(value));
        }
        //##break;
        //##case MemberKind.Vector:
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        public ReadOnlyMemory<T_MemberType_> T_VectorMemberName_
        {
            get
            {
                var sourceSpan = _readonlyLocalBlock.Slice(T_VectorFieldOffset_, T_FieldLength_ * T_ArrayLength_).Span;
                //##if(member.FieldLength == 1) {
                return MemoryMarshal.Cast<byte, T_MemberType_>(sourceSpan).ToArray();
                //##} else {
                if (BitConverter.IsLittleEndian != T_IsBigEndian_)
                {
                    // endian match
                    return MemoryMarshal.Cast<byte, T_MemberType_>(sourceSpan).ToArray();
                }
                else
                {
                    // endian mismatch - decode each element
                    var target = new T_MemberType_[T_ArrayLength_];
                    Span<T_MemberType_> targetSpan = target.AsSpan();
                    for (int i = 0; i < T_ArrayLength_; i++)
                    {
                        var elementSpan = sourceSpan.Slice(T_FieldLength_ * i, T_FieldLength_);
                        targetSpan[i] = Codec_T_MemberType__T_MemberBELE_.ReadFromSpan(elementSpan);
                    }
                    return target;
                }
                //##}
            }

            set
            {
                ThrowIfFrozen();
                var targetSpan = _writableLocalBlock.Slice(T_VectorFieldOffset_, T_FieldLength_ * T_ArrayLength_).Span;
                targetSpan.Clear();
                //##if(member.FieldLength == 1) {
                value.Span.CopyTo(MemoryMarshal.Cast<byte, T_MemberType_>(targetSpan));
                //##} else {
                if (BitConverter.IsLittleEndian != T_IsBigEndian_)
                {
                    // endian match
                    value.Span.CopyTo(MemoryMarshal.Cast<byte, T_MemberType_>(targetSpan));
                }
                else
                {
                    // endian mismatch - encode each element
                    var sourceSpan = value.Span;
                    for (int i = 0; i < sourceSpan.Length; i++)
                    {
                        var elementSpan = targetSpan.Slice(T_FieldLength_ * i, T_FieldLength_);
                        Codec_T_MemberType__T_MemberBELE_.WriteToSpan(elementSpan, sourceSpan[i]);
                    }
                }
                //##}
            }
        }
        //##break;
        //##case MemberKind.Entity:
        //##if (member.IsNullable) {
        private async ValueTask T_NullableEntityMemberName__Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = default;
            if (_T_NullableEntityMemberName_ is not null)
            {
                await _T_NullableEntityMemberName_.Pack(dataStore);
                var buffer = _T_NullableEntityMemberName_.GetBuffers();
                blobId = await dataStore.PutBlob(buffer.Compact());
            }
            blobId.WriteTo(_writableLocalBlock.Slice(T_NullableEntityFieldOffset_, 64).Span);
        }
        private async ValueTask T_NullableEntityMemberName__Unpack(IDataStore dataStore, int depth)
        {
            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(T_NullableEntityFieldOffset_, 64));
            var blob = await dataStore.GetBlob(blobId);
            _T_NullableEntityMemberName_ = null;
            if (blob is not null)
            {
                _T_NullableEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_.CreateFrom(new ReadOnlySequence<byte>(blob.Value));
                await _T_NullableEntityMemberName_.Unpack(dataStore, depth - 1);
            }
        }
        private T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_? _T_NullableEntityMemberName_;
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        public T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_? T_NullableEntityMemberName_
        {
            get => IfUnpacked(_T_NullableEntityMemberName_);
            set => _T_NullableEntityMemberName_ = IfNotFrozen(value);
        }
        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_? IT_EntityIntfName_.T_NullableEntityMemberName_
        {
            get => IfUnpacked(_T_NullableEntityMemberName_);
            set => _T_NullableEntityMemberName_ = IfNotFrozen(value is null ? null :  T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_.CreateFrom(value));
        }
        //##} else {
        private async ValueTask T_RequiredEntityMemberName__Pack(IDataStore dataStore)
        {
            if (_T_RequiredEntityMemberName_ is null)
            {
                _T_RequiredEntityMemberName_ = await CreateEmpty<T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_>(dataStore);
            }
            await _T_RequiredEntityMemberName_.Pack(dataStore);
            var buffer = _T_RequiredEntityMemberName_.GetBuffers();
            BlobIdV1 blobId = await dataStore.PutBlob(buffer.Compact());
            blobId.WriteTo(_writableLocalBlock.Slice(T_RequiredEntityFieldOffset_, 64).Span);
        }
        private async ValueTask T_RequiredEntityMemberName__Unpack(IDataStore dataStore, int depth)
        {
            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(T_RequiredEntityFieldOffset_, 64));
            var blob = await dataStore.GetBlob(blobId);
            if (blob is null)
            {
                _T_RequiredEntityMemberName_ = await CreateEmpty<T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_>(dataStore);
            }
            else
            {
                _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_.CreateFrom(new ReadOnlySequence<byte>(blob.Value));
                await _T_RequiredEntityMemberName_.Unpack(dataStore, depth - 1);
            }
        }
        private T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_? _T_RequiredEntityMemberName_ = null;
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        public T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_ T_RequiredEntityMemberName_
        {
            get => IfNotNull(IfUnpacked(_T_RequiredEntityMemberName_));
            set => _T_RequiredEntityMemberName_ = IfNotFrozen(value);
        }
        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_ IT_EntityIntfName_.T_RequiredEntityMemberName_
        {
            get => IfNotNull(IfUnpacked(_T_RequiredEntityMemberName_));
            set => _T_RequiredEntityMemberName_ = IfNotFrozen(T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_.CreateFrom(value));
        }
        //##}
        //##break;
        //##case MemberKind.Binary:
        //##if (member.IsNullable) {
        //##if (member.IsFixedLength) {
        private void T_NullableFixLenBinaryMemberName__Pack()
        {
            Codec_Memory_NE.WriteToSpan(_writableLocalBlock.Slice(T_NullableFixLenBinaryFieldOffset_, T_NullableFixLenBinaryFieldLength_),
                _T_NullableFixLenBinaryMemberName_ is null ? (ReadOnlyMemory<byte>?)null : _T_NullableFixLenBinaryMemberName_.AsMemory());
        }
        private void T_NullableFixLenBinaryMemberName__Unpack()
        {
            ReadOnlyMemory<byte>? memory = Codec_Memory_NE.ReadFromMemory(_readonlyLocalBlock.Slice(T_NullableFixLenBinaryFieldOffset_, T_NullableFixLenBinaryFieldLength_));
            _T_NullableFixLenBinaryMemberName_ = memory is null ? null : Octets.UnsafeWrap(memory.Value);
        }
        private Octets? _T_NullableFixLenBinaryMemberName_;
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        public Octets? T_NullableFixLenBinaryMemberName_
        {
            get => IfUnpacked(_T_NullableFixLenBinaryMemberName_);
            set => _T_NullableFixLenBinaryMemberName_ = IfNotFrozen(value);
        }
        //##} else {
        private async ValueTask T_NullableVarLenBinaryMemberName__Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = _T_NullableVarLenBinaryMemberName_ is null
                ? default
                : await dataStore.PutBlob(_T_NullableVarLenBinaryMemberName_.AsMemory());
            blobId.WriteTo(_writableLocalBlock.Slice(T_NullableVarLenBinaryFieldOffset_, 64).Span);
        }
        private async ValueTask T_NullableVarLenBinaryMemberName__Unpack(IDataStore dataStore)
        {
            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(T_NullableVarLenBinaryFieldOffset_, 64));
            var blob = await dataStore.GetBlob(blobId);
            _T_NullableVarLenBinaryMemberName_ = blob is null ? null : Octets.UnsafeWrap(blob.Value);
        }
        private Octets? _T_NullableVarLenBinaryMemberName_;
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        public Octets? T_NullableVarLenBinaryMemberName_
        {
            get => IfUnpacked(_T_NullableVarLenBinaryMemberName_);
            set => _T_NullableVarLenBinaryMemberName_ = IfNotFrozen(value);
        }
        //##}
        //##} else {
        //##if (member.IsFixedLength) {
        private void T_RequiredFixLenBinaryMemberName__Pack()
        {
            Codec_Memory_NE.WriteToSpan(_writableLocalBlock.Slice(T_RequiredFixLenBinaryFieldOffset_, T_RequiredFixLenBinaryFieldLength_),
                _T_RequiredFixLenBinaryMemberName_.AsMemory());
        }
        private void T_RequiredFixLenBinaryMemberName__Unpack()
        {
            ReadOnlyMemory<byte>? memory = Codec_Memory_NE.ReadFromMemory(_readonlyLocalBlock.Slice(T_RequiredFixLenBinaryFieldOffset_, T_RequiredFixLenBinaryFieldLength_));
            _T_RequiredFixLenBinaryMemberName_ = memory is null ? Octets.Empty : Octets.UnsafeWrap(memory.Value);
        }
        private Octets _T_RequiredFixLenBinaryMemberName_ = Octets.Empty;
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        public Octets T_RequiredFixLenBinaryMemberName_
        {
            get => IfUnpacked(_T_RequiredFixLenBinaryMemberName_);
            set => _T_RequiredFixLenBinaryMemberName_ = IfNotFrozen(value);
        }
        //##} else {
        private async ValueTask T_RequiredVarLenBinaryMemberName__Pack(IDataStore dataStore)
        {
            var buffer = _T_RequiredVarLenBinaryMemberName_.AsMemory();
            BlobIdV1 blobId = await dataStore.PutBlob(buffer);
            blobId.WriteTo(_writableLocalBlock.Slice(T_RequiredVarLenBinaryFieldOffset_, 64).Span);
        }
        private async ValueTask T_RequiredVarLenBinaryMemberName__Unpack(IDataStore dataStore)
        {
            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(T_RequiredVarLenBinaryFieldOffset_, 64));
            var blob = await dataStore.GetBlob(blobId);
            _T_RequiredVarLenBinaryMemberName_ = blob is null ? Octets.Empty : Octets.UnsafeWrap(blob.Value);

        }
        private Octets _T_RequiredVarLenBinaryMemberName_ = Octets.Empty;
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        public Octets T_RequiredVarLenBinaryMemberName_
        {
            get => IfUnpacked(_T_RequiredVarLenBinaryMemberName_);
            set => _T_RequiredVarLenBinaryMemberName_ = IfNotFrozen(value);
        }
        //##}
        //##}
        //##break;
        //##case MemberKind.String:
        //##if (member.IsNullable) {
        //##if (member.IsFixedLength) {
        private void T_NullableFixLenStringMemberName__Pack()
        {
            Codec_Memory_NE.WriteToSpan(_writableLocalBlock.Slice(T_NullableFixLenStringFieldOffset_, T_NullableFixLenStringFieldLength_),
                _T_NullableFixLenStringMemberName_ is null ? (ReadOnlyMemory<byte>?)null : System.Text.Encoding.UTF8.GetBytes(_T_NullableFixLenStringMemberName_));
        }
        private void T_NullableFixLenStringMemberName__Unpack()
        {
            ReadOnlyMemory<byte>? memory = Codec_Memory_NE.ReadFromMemory(_readonlyLocalBlock.Slice(T_NullableFixLenStringFieldOffset_, T_NullableFixLenStringFieldLength_));
#if NET8_0_OR_GREATER
            _T_NullableFixLenStringMemberName_ = memory is null ? null : System.Text.Encoding.UTF8.GetString(memory.Value.Span);
#else
            _T_NullableFixLenStringMemberName_ = memory is null ? null : System.Text.Encoding.UTF8.GetString(memory.Value.ToArray());
#endif
        }
        private string? _T_NullableFixLenStringMemberName_;
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        public string? T_NullableFixLenStringMemberName_
        {
            get => IfUnpacked(_T_NullableFixLenStringMemberName_);
            set => _T_NullableFixLenStringMemberName_ = IfNotFrozen(value);
        }
        //##} else {
        private async ValueTask T_NullableVarLenStringMemberName__Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = _T_NullableVarLenStringMemberName_ is null
                ? default
                : blobId = await dataStore.PutBlob(System.Text.Encoding.UTF8.GetBytes(_T_NullableVarLenStringMemberName_));
            blobId.WriteTo(_writableLocalBlock.Slice(T_NullableVarLenStringFieldOffset_, 64).Span);
        }
        private async ValueTask T_NullableVarLenStringMemberName__Unpack(IDataStore dataStore)
        {
            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(T_NullableVarLenStringFieldOffset_, 64));
            var blob = await dataStore.GetBlob(blobId);
#if NET8_0_OR_GREATER
            _T_NullableVarLenStringMemberName_ = blob is null ? null : System.Text.Encoding.UTF8.GetString(blob.Value.Span);
#else
            _T_NullableVarLenStringMemberName_ = blob is null ? null : System.Text.Encoding.UTF8.GetString(blob.Value.ToArray());
#endif
        }
        private string? _T_NullableVarLenStringMemberName_;
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        public string? T_NullableVarLenStringMemberName_
        {
            get => IfUnpacked(_T_NullableVarLenStringMemberName_);
            set => _T_NullableVarLenStringMemberName_ = IfNotFrozen(value);
        }
        //##}
        //##} else {
        //##if (member.IsFixedLength) {
        private void T_RequiredFixLenStringMemberName__Pack()
        {
            Codec_Memory_NE.WriteToSpan(_writableLocalBlock.Slice(T_RequiredFixLenStringFieldOffset_, T_RequiredFixLenStringFieldLength_),
                System.Text.Encoding.UTF8.GetBytes(_T_RequiredFixLenStringMemberName_));
        }
        private void T_RequiredFixLenStringMemberName__Unpack()
        {
            ReadOnlyMemory<byte>? memory = Codec_Memory_NE.ReadFromMemory(_readonlyLocalBlock.Slice(T_RequiredFixLenStringFieldOffset_, T_RequiredFixLenStringFieldLength_));
#if NET8_0_OR_GREATER
            _T_RequiredFixLenStringMemberName_ = memory is null ? string.Empty : System.Text.Encoding.UTF8.GetString(memory.Value.Span);
#else
            _T_RequiredFixLenStringMemberName_ = memory is null ? string.Empty : System.Text.Encoding.UTF8.GetString(memory.Value.ToArray());
#endif
        }
        private string _T_RequiredFixLenStringMemberName_ = string.Empty;
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        public string T_RequiredFixLenStringMemberName_
        {
            get => IfUnpacked(_T_RequiredFixLenStringMemberName_);
            set => _T_RequiredFixLenStringMemberName_ = IfNotFrozen(value);
        }
        //##} else {
        private async ValueTask T_RequiredVarLenStringMemberName__Pack(IDataStore dataStore)
        {
            BlobIdV1 blobId = default;
            var buffer = System.Text.Encoding.UTF8.GetBytes(_T_RequiredVarLenStringMemberName_);
            blobId = await dataStore.PutBlob(buffer);
            blobId.WriteTo(_writableLocalBlock.Slice(T_RequiredVarLenStringFieldOffset_, 64).Span);
        }
        private async ValueTask T_RequiredVarLenStringMemberName__Unpack(IDataStore dataStore)
        {
            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(T_RequiredVarLenStringFieldOffset_, 64));
            var blob = await dataStore.GetBlob(blobId);
#if NET8_0_OR_GREATER
            _T_RequiredVarLenStringMemberName_ = blob is null ? string.Empty : System.Text.Encoding.UTF8.GetString(blob.Value.Span);
#else
            _T_RequiredVarLenStringMemberName_ = blob is null ? string.Empty : System.Text.Encoding.UTF8.GetString(blob.Value.ToArray());
#endif
        }
        private string _T_RequiredVarLenStringMemberName_ = string.Empty;
        //##if(member.IsObsolete) {
        [Obsolete("T_MemberObsoleteMessage_", T_MemberObsoleteIsError_)]
        //##}
        public string T_RequiredVarLenStringMemberName_
        {
            get => IfUnpacked(_T_RequiredVarLenStringMemberName_);
            set => _T_RequiredVarLenStringMemberName_ = IfNotFrozen(value);
        }
        //##}
        //##}
        //##break;
        //##default:
        //##Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
        //##break;
        //##} // switch

        //##}

        public bool Equals(T_EntityImplName_? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (!base.Equals(other)) return false;
            if (!_readonlyLocalBlock.Span.SequenceEqual(other._readonlyLocalBlock.Span)) return false;
            return true;
        }
        public override bool Equals(object? obj) => obj is T_EntityImplName_ other && Equals(other);
        public override int GetHashCode() => base.GetHashCode();
        public static bool operator ==(T_EntityImplName_? left, T_EntityImplName_? right) => left is not null ? left.Equals(right) : (right is null);
        public static bool operator !=(T_EntityImplName_? left, T_EntityImplName_? right) => left is not null ? !left.Equals(right) : (right is not null);

    }
}
