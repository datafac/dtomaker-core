// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using System;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using DataFac.Memory;
using DataFac.Runtime;
namespace T_DomainName_.MemBlocks
{
    public abstract class EntityBase : IFreezable, IEquatable<EntityBase>
    {
        public EntityBase() { }
        public EntityBase(object? notUsed, bool frozen)
        {
            _frozen = frozen;
        }
        public EntityBase(ImmutableArray<ReadOnlyMemory<byte>> buffers)
        {
            if (buffers.Length > 0) throw new ArgumentException("Too many buffers", nameof(buffers));
            _frozen = true;
        }
        private volatile bool _frozen = false;
        public bool IsFrozen() => _frozen;
        protected virtual void OnFreeze() { }
        public void Freeze()
        {
            if (_frozen) return;
            _frozen = true;
            OnFreeze();
        }

        protected virtual void OnGetBuffers(ImmutableArray<ReadOnlyMemory<byte>>.Builder builder) { }
        public ImmutableArray<ReadOnlyMemory<byte>> GetBuffers()
        {
            var builder = ImmutableArray.CreateBuilder<ReadOnlyMemory<byte>>();
            OnGetBuffers(builder);
            var buffers = builder.ToImmutable();
            return buffers;
        }
        protected virtual IFreezable OnPartCopy() => throw new NotImplementedException();
        public IFreezable PartCopy() => OnPartCopy();

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void ThrowIsFrozenException(string? methodName) => throw new InvalidOperationException($"Cannot call {methodName} when frozen.");

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected void ThrowExceptionIfFrozen([CallerMemberName] string? methodName = null)
        {
            if (_frozen) ThrowIsFrozenException(methodName);
        }

        public bool Equals(EntityBase? other) => true;
    }
}
