using System;
using System.Linq;
using DTOMaker.Gentime;
namespace DTOMaker.MemBlocks;
#pragma warning disable CS0162 // Unreachable code detected
public sealed class EntityGenerator : EntityGeneratorBase
{
    public EntityGenerator(ILanguage language) : base(language) { }
    protected override void OnGenerate(ModelScopeEntity entity)
    {
Emit("// <auto-generated>");
Emit("// This file was generated by DTOMaker.MemBlocks.");
Emit("// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks");
Emit("// Warning: Changes made to this file will be lost if re-generated.");
Emit("// </auto-generated>");
if(false) {
Emit("#pragma warning disable CS0618 // Type or member is obsolete");
Emit("#pragma warning disable CS0162 // Unreachable code detected");
}
Emit("#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required");
Emit("#nullable enable");
Emit("using System;");
Emit("using System.Buffers;");
Emit("using System.IO;");
Emit("using System.Runtime.CompilerServices;");
Emit("using System.Runtime.InteropServices;");
Emit("using System.Threading.Tasks;");
Emit("using DataFac.Memory;");
Emit("using DTOMaker.Runtime;");
Emit("using DTOMaker.Runtime.MemBlocks;");
Emit("using DataFac.Storage;");
Emit("");
if(false) {
Emit("using T_MemberType_ = System.Int32;");
Emit("namespace DataFac.Memory");
Emit("{");
Emit("    public static class Codec_T_MemberType__T_MemberBELE_");
Emit("    {");
Emit("        public static T_MemberType_ ReadFromSpan(ReadOnlySpan<byte> source) => Codec_Int32_LE.ReadFromSpan(source);");
Emit("        public static void WriteToSpan(Span<byte> source, T_MemberType_ value) => Codec_Int32_LE.WriteToSpan(source, value);");
Emit("    }");
Emit("}");
Emit("namespace T_MemberTypeNameSpace_");
Emit("{");
Emit("    public interface IT_MemberTypeName_ : IMemBlocksEntity");
Emit("    {");
Emit("        Int64 Field1 { get; set; }");
Emit("    }");
Emit("}");
Emit("namespace T_MemberTypeNameSpace_.MemBlocks");
Emit("{");
Emit("    public sealed class T_MemberTypeName_ : EntityBase, IT_MemberTypeName_");
Emit("    {");
Emit("        private const int ClassHeight = 1;");
Emit("        private const int BlockOffset = 64;");
Emit("        private const int BlockLength = 64;");
Emit("        private const long StructureCode = 0x0662;");
Emit("        private static readonly Guid EntityGuid = new Guid(\"9bb68dc1-8b05-4e19-80fd-c1fb946ffd8d\");");
Emit("        private static readonly BlockHeader _header = BlockHeader.CreateNew(StructureCode, EntityGuid);");
Emit("");
Emit("        public static T_MemberTypeName_ CreateFrom(T_MemberTypeName_ source)");
Emit("        {");
Emit("            if (source.IsFrozen) return source;");
Emit("            return new T_MemberTypeName_(source);");
Emit("        }");
Emit("        public static T_MemberTypeName_ CreateFrom(IT_MemberTypeName_ source)");
Emit("        {");
Emit("            if (source is T_MemberTypeName_ concrete && concrete.IsFrozen) return concrete;");
Emit("            return new T_MemberTypeName_(source);");
Emit("        }");
Emit("        public static T_MemberTypeName_ CreateFrom(ReadOnlyMemory<byte> buffer)");
Emit("        {");
Emit("            return new T_MemberTypeName_(buffer);");
Emit("        }");
Emit("        private readonly Memory<byte> _writableLocalBlock;");
Emit("        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;");
Emit("        public T_MemberTypeName_() : base(_header)");
Emit("        {");
Emit("            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("        }");
Emit("        public T_MemberTypeName_(T_MemberTypeName_ source) : base(_header, source)");
Emit("        {");
Emit("            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("        }");
Emit("        public T_MemberTypeName_(IT_MemberTypeName_ source) : base(_header, source)");
Emit("        {");
Emit("            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("            this.Field1 = source.Field1;");
Emit("        }");
Emit("        public T_MemberTypeName_(ReadOnlyMemory<byte> buffer) : base(_header, buffer)");
Emit("        {");
Emit("            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("            _writableLocalBlock = Memory<byte>.Empty;");
Emit("        }");
Emit("");
Emit("        protected override IFreezable OnPartCopy() => throw new NotImplementedException();");
Emit("        protected override string OnGetEntityId() => \"T_MemberTypeName_\";");
Emit("        protected override int OnGetClassHeight() => ClassHeight;");
Emit("        protected override ValueTask OnPack(IDataStore dataStore) => default;");
Emit("        protected override ValueTask OnUnpack(IDataStore dataStore, int depth) => default;");
Emit("");
Emit("        public Int64 Field1");
Emit("        {");
Emit("            get => Codec_Int64_LE.ReadFromSpan(_readonlyLocalBlock.Slice(0, 8).Span);");
Emit("            set => Codec_Int64_LE.WriteToSpan(_writableLocalBlock.Slice(0, 8).Span, IfNotFrozen(value));");
Emit("        }");
Emit("    }");
Emit("}");
Emit("namespace T_BaseNameSpace_.MemBlocks");
Emit("{");
Emit("    public interface IT_BaseName_");
Emit("    {");
Emit("        T_MemberType_ BaseField1 { get; set; }");
Emit("    }");
Emit("    public class T_BaseName_ : EntityBase, IT_BaseName_, IEquatable<T_BaseName_>");
Emit("    {");
Emit("        private const int ClassHeight = 1;");
Emit("        private const int BlockOffset = 64;");
Emit("        private const int BlockLength = 64;");
Emit("        private readonly Memory<byte> _writableLocalBlock;");
Emit("        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;");
Emit("");
Emit("        public new const string EntityId = \"T_BaseName_\";");
Emit("");
Emit("        protected override string OnGetEntityId() => \"_undefined_\";");
Emit("        protected override int OnGetClassHeight() => ClassHeight;");
Emit("");
Emit("        protected override void OnFreeze()");
Emit("        {");
Emit("            base.OnFreeze();");
Emit("        }");
Emit("");
Emit("        protected override ValueTask OnPack(IDataStore dataStore)");
Emit("        {");
Emit("            return base.OnPack(dataStore);");
Emit("        }");
Emit("");
Emit("        protected override ValueTask OnUnpack(IDataStore dataStore, int depth)");
Emit("        {");
Emit("            return base.OnUnpack(dataStore, depth);");
Emit("        }");
Emit("");
Emit("        protected T_BaseName_(BlockHeader header) : base(header)");
Emit("        {");
Emit("            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("        }");
Emit("");
Emit("        protected T_BaseName_(BlockHeader header, T_BaseName_ source) : base(header, source)");
Emit("        {");
Emit("            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("        }");
Emit("");
Emit("        protected T_BaseName_(BlockHeader header, IT_BaseName_ source) : base(header, source)");
Emit("        {");
Emit("            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("            this.BaseField1 = source.BaseField1;");
Emit("        }");
Emit("");
Emit("        protected T_BaseName_(BlockHeader header, ReadOnlyMemory<byte> buffer) : base(header, buffer)");
Emit("        {");
Emit("            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("            _writableLocalBlock = Memory<byte>.Empty;");
Emit("        }");
Emit("");
Emit("        private const int T_FieldOffset_ = 4;");
Emit("        private const int T_FieldLength_ = 4;");
Emit("");
Emit("        public T_MemberType_ BaseField1");
Emit("        {");
Emit("            get => (T_MemberType_)Codec_T_MemberType__T_MemberBELE_.ReadFromSpan(_readonlyLocalBlock.Slice(T_FieldOffset_, T_FieldLength_).Span);");
Emit("            set => Codec_T_MemberType__T_MemberBELE_.WriteToSpan(_writableLocalBlock.Slice(T_FieldOffset_, T_FieldLength_).Span, IfNotFrozen(value));");
Emit("        }");
Emit("");
Emit("        public bool Equals(T_BaseName_? other)");
Emit("        {");
Emit("            if (ReferenceEquals(this, other)) return true;");
Emit("            if (other is null) return false;");
Emit("            if (!_readonlyTotalBlock.Span.SequenceEqual(other._readonlyTotalBlock.Span)) return false;");
Emit("            return true;");
Emit("        }");
Emit("        public override bool Equals(object? obj) => obj is T_BaseName_ other && Equals(other);");
Emit("        public override int GetHashCode() => base.GetHashCode();");
Emit("    }");
Emit("}");
Emit("namespace T_NameSpace_");
Emit("{");
Emit("    public interface IT_EntityName_ : T_BaseNameSpace_.MemBlocks.IT_BaseName_");
Emit("    {");
Emit("        T_MemberType_ T_ScalarMemberName_ { get; set; }");
Emit("        ReadOnlyMemory<T_MemberType_> T_VectorMemberName_ { get; set; }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeName_? T_NullableEntityMemberName_ { get; set; }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeName_ T_RequiredEntityMemberName_ { get; set; }");
Emit("        Octets? T_NullableBinaryMemberName_ { get; set; }");
Emit("        Octets T_RequiredBinaryMemberName_ { get; set; }");
Emit("    }");
Emit("}");
}
Emit("namespace T_NameSpace_.MemBlocks");
Emit("{");
Emit("    public partial class T_EntityName_ : T_BaseNameSpace_.MemBlocks.T_BaseName_, IT_EntityName_, IEquatable<T_EntityName_>");
Emit("    {");
Emit("        // Derived entities: T_DerivedEntityCount_");
        foreach(var derived in entity.DerivedEntities) {
        using var _ = NewScope(derived);
Emit("        // - T_EntityName_");
        }
Emit("");
        if(false) {
Emit("        private const int T_ClassHeight_ = 2;");
Emit("        private const int T_BlockOffset_ = 128;");
Emit("        private const int T_BlockLength_ = 512;");
Emit("        private const bool T_MemberObsoleteIsError_ = false;");
Emit("        private const long T_BlockStructureCode_ = 0x0962;");
Emit("        private static readonly Guid T_EntityGuid_ = new Guid(\"341c6631-30ba-482b-b580-7c1c2c9ff182\");");
        }
Emit("        private const long BlockStructureCode = T_BlockStructureCode_;");
Emit("        private const int ClassHeight = T_ClassHeight_;");
Emit("        private const int BlockOffset = T_BlockOffset_;");
Emit("        private const int BlockLength = T_BlockLength_;");
Emit("        private readonly Memory<byte> _writableLocalBlock;");
Emit("        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;");
Emit("");
Emit("        public new const string EntityId = \"T_EntityId_\";");
Emit("        private static readonly Guid EntityGuid = T_EntityGuid_;");
Emit("        private static readonly BlockHeader _header = BlockHeader.CreateNew(BlockStructureCode, EntityGuid);");
Emit("");
Emit("        public new static T_EntityName_ CreateFrom(T_EntityName_ source)");
Emit("        {");
Emit("            if (source.IsFrozen) return source;");
Emit("            return source switch");
Emit("            {");
                foreach(var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight)) {
                using var _ = NewScope(derived);
Emit("                T_NameSpace_.MemBlocks.T_EntityName_ source2 => new T_NameSpace_.MemBlocks.T_EntityName_(source2),");
                }
Emit("                _ => new T_NameSpace_.MemBlocks.T_EntityName_(source)");
Emit("            };");
Emit("        }");
Emit("");
Emit("        public new static T_EntityName_ CreateFrom(T_NameSpace_.IT_EntityName_ source)");
Emit("        {");
Emit("            if (source is T_EntityName_ concrete && concrete.IsFrozen) return concrete;");
Emit("            return source switch");
Emit("            {");
                foreach(var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight)) {
                using var _ = NewScope(derived);
Emit("                T_NameSpace_.IT_EntityName_ source2 => new T_NameSpace_.MemBlocks.T_EntityName_(source2),");
                }
Emit("                _ => new T_NameSpace_.MemBlocks.T_EntityName_(source)");
Emit("            };");
Emit("        }");
Emit("");
Emit("        public new static T_EntityName_ CreateFrom(ReadOnlyMemory<byte> buffer)");
Emit("        {");
Emit("            BlockHeader header = BlockHeader.ParseFrom(buffer);");
Emit("            string entityIdStr = header.EntityGuid.ToString(\"D\");");
Emit("            return entityIdStr switch");
Emit("            {");
                foreach(var derived in entity.DerivedEntities) {
                using var _ = NewScope(derived);
Emit("                T_NameSpace_.MemBlocks.T_EntityName_.EntityId => new T_NameSpace_.MemBlocks.T_EntityName_(buffer),");
                }
Emit("                _ => new T_NameSpace_.MemBlocks.T_EntityName_(buffer)");
Emit("            };");
Emit("        }");
Emit("");
Emit("        protected override string OnGetEntityId() => EntityId;");
Emit("        protected override int OnGetClassHeight() => ClassHeight;");
Emit("");
Emit("        protected override IFreezable OnPartCopy() => new T_EntityName_(this);");
Emit("");
Emit("        protected override void OnFreeze()");
Emit("        {");
Emit("            base.OnFreeze();");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Scalar:
            break;
            case MemberKind.Vector:
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            _T_NullableEntityMemberName_?.Freeze();");
            } else {
Emit("            _T_RequiredEntityMemberName_?.Freeze();");
            }
            break;
            case MemberKind.Binary:
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("        }");
Emit("");
Emit("        protected override async ValueTask OnPack(IDataStore dataStore)");
Emit("        {");
Emit("            await base.OnPack(dataStore);");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Scalar:
            break;
            case MemberKind.Vector:
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            await T_NullableEntityMemberName__Pack(dataStore);");
            } else {
Emit("            await T_RequiredEntityMemberName__Pack(dataStore);");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            await T_NullableBinaryMemberName__Pack(dataStore);");
            } else {
Emit("            await T_RequiredBinaryMemberName__Pack(dataStore);");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("        }");
Emit("");
Emit("        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)");
Emit("        {");
Emit("            await base.OnUnpack(dataStore, depth);");
            foreach (var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Scalar:
            break;
            case MemberKind.Vector:
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            await T_NullableEntityMemberName__Unpack(dataStore, depth);");
            } else {
Emit("            await T_RequiredEntityMemberName__Unpack(dataStore, depth);");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            await T_NullableBinaryMemberName__Unpack(dataStore, depth);");
            } else {
Emit("            await T_RequiredBinaryMemberName__Unpack(dataStore, depth);");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("        }");
Emit("");
Emit("        // -------------------- field map -----------------------------");
Emit("        //  Seq.  Off.  Len.  N.    Type    End.  Name");
Emit("        //  ----  ----  ----  ----  ------- ----  -------");
        foreach(var member in entity.Members) {
        using var _ = NewScope(member);
Emit("        //  T_MemberSequenceR4_  T_FieldOffsetR4_  T_FieldLengthR4_  T_ArrayLengthR4_  T_MemberTypeL7_ T_MemberBELE_    T_MemberName_");
        }
Emit("        // ------------------------------------------------------------");
Emit("");
Emit("        protected T_EntityName_(BlockHeader header) : base(header)");
Emit("        {");
Emit("            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("        }");
Emit("        public T_EntityName_() : base(_header)");
Emit("        {");
Emit("            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("        }");
Emit("");
Emit("        protected T_EntityName_(BlockHeader header, T_EntityName_ source) : base(header, source)");
Emit("        {");
Emit("            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("        }");
Emit("        public T_EntityName_(T_EntityName_ source) : base(_header, source)");
Emit("        {");
Emit("            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("        }");
Emit("");
Emit("        protected T_EntityName_(BlockHeader header, IT_EntityName_ source) : base(header, source)");
Emit("        {");
Emit("            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);");
            foreach(var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Scalar:
Emit("            this.T_ScalarMemberName_ = source.T_ScalarMemberName_;");
            break;
            case MemberKind.Vector:
Emit("            this.T_VectorMemberName_ = source.T_VectorMemberName_;");
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            _T_NullableEntityMemberName_ = source.T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(source.T_NullableEntityMemberName_);");
            } else {
Emit("            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(source.T_RequiredEntityMemberName_);");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            _T_NullableBinaryMemberName_ = source.T_NullableBinaryMemberName_;");
            } else {
Emit("            _T_RequiredBinaryMemberName_ = source.T_RequiredBinaryMemberName_;");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("        }");
Emit("");
Emit("        public T_EntityName_(IT_EntityName_ source) : base(_header, source)");
Emit("        {");
Emit("            _readonlyLocalBlock = _writableLocalBlock = _writableTotalBlock.Slice(BlockOffset, BlockLength);");
            foreach(var member in entity.Members) {
            using var _ = NewScope(member);
            switch(member.Kind) {
            case MemberKind.Scalar:
Emit("            this.T_ScalarMemberName_ = source.T_ScalarMemberName_;");
            break;
            case MemberKind.Vector:
Emit("            this.T_VectorMemberName_ = source.T_VectorMemberName_;");
            break;
            case MemberKind.Entity:
            if (member.IsNullable) {
Emit("            _T_NullableEntityMemberName_ = source.T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(source.T_NullableEntityMemberName_);");
            } else {
Emit("            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(source.T_RequiredEntityMemberName_);");
            }
            break;
            case MemberKind.Binary:
            if (member.IsNullable) {
Emit("            _T_NullableBinaryMemberName_ = source.T_NullableBinaryMemberName_;");
            } else {
Emit("            _T_RequiredBinaryMemberName_ = source.T_RequiredBinaryMemberName_;");
            }
            break;
            default:
            Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
            break;
            } // switch
            }
Emit("        }");
Emit("");
Emit("        protected T_EntityName_(BlockHeader header, ReadOnlyMemory<byte> buffer) : base(header, buffer)");
Emit("        {");
Emit("            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("            _writableLocalBlock = Memory<byte>.Empty;");
Emit("        }");
Emit("        public T_EntityName_(ReadOnlyMemory<byte> buffer) : base(_header, buffer)");
Emit("        {");
Emit("            _readonlyLocalBlock = _readonlyTotalBlock.Slice(BlockOffset, BlockLength);");
Emit("            _writableLocalBlock = Memory<byte>.Empty;");
Emit("        }");
Emit("");
        if(false) {
Emit("        //private const int T_FieldOffset_ = 64;");
Emit("        private const int T_ScalarFieldOffset_ = 0;");
Emit("        private const int T_VectorFieldOffset_ = 32;");
Emit("        private const int T_NullableEntityFieldOffset_ = 64;");
Emit("        private const int T_RequiredEntityFieldOffset_ = 128;");
Emit("        private const int T_NullableBinaryFieldOffset_ = 192;");
Emit("        private const int T_RequiredBinaryFieldOffset_ = 256;");
Emit("        private const int T_FieldLength_ = 8;");
Emit("        private const bool T_IsBigEndian_ = false;");
Emit("        private const int T_ArrayLength_ = 4;");
        }
        foreach(var member in entity.Members) {
        using var _ = NewScope(member);
        switch(member.Kind) {
        case MemberKind.Scalar:
        if(member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        public T_MemberType_ T_ScalarMemberName_");
Emit("        {");
Emit("            get => Codec_T_MemberType__T_MemberBELE_.ReadFromSpan(_readonlyLocalBlock.Slice(T_ScalarFieldOffset_, T_FieldLength_).Span);");
Emit("            set => Codec_T_MemberType__T_MemberBELE_.WriteToSpan(_writableLocalBlock.Slice(T_ScalarFieldOffset_, T_FieldLength_).Span, IfNotFrozen(value));");
Emit("        }");
        break;
        case MemberKind.Vector:
        if(member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        public ReadOnlyMemory<T_MemberType_> T_VectorMemberName_");
Emit("        {");
Emit("            get");
Emit("            {");
Emit("                var sourceSpan = _readonlyLocalBlock.Slice(T_VectorFieldOffset_, T_FieldLength_ * T_ArrayLength_).Span;");
                if(member.FieldLength == 1) {
Emit("                return MemoryMarshal.Cast<byte, T_MemberType_>(sourceSpan).ToArray(); // todo alloc!");
                } else {
Emit("                if (BitConverter.IsLittleEndian != T_IsBigEndian_)");
Emit("                {");
Emit("                    // endian match");
Emit("                    return MemoryMarshal.Cast<byte, T_MemberType_>(sourceSpan).ToArray(); // todo alloc!");
Emit("                }");
Emit("                else");
Emit("                {");
Emit("                    // endian mismatch - decode each element");
Emit("                    var target = new T_MemberType_[T_ArrayLength_]; // todo alloc!");
Emit("                    Span<T_MemberType_> targetSpan = target.AsSpan();");
Emit("                    for (int i = 0; i < T_ArrayLength_; i++)");
Emit("                    {");
Emit("                        var elementSpan = sourceSpan.Slice(T_FieldLength_ * i, T_FieldLength_);");
Emit("                        targetSpan[i] = Codec_T_MemberType__T_MemberBELE_.ReadFromSpan(elementSpan);");
Emit("                    }");
Emit("                    return target;");
Emit("                }");
                }
Emit("            }");
Emit("");
Emit("            set");
Emit("            {");
Emit("                ThrowIfFrozen();");
Emit("                var targetSpan = _writableLocalBlock.Slice(T_VectorFieldOffset_, T_FieldLength_ * T_ArrayLength_).Span;");
Emit("                targetSpan.Clear();");
                if(member.FieldLength == 1) {
Emit("                value.Span.CopyTo(MemoryMarshal.Cast<byte, T_MemberType_>(targetSpan));");
                } else {
Emit("                if (BitConverter.IsLittleEndian != T_IsBigEndian_)");
Emit("                {");
Emit("                    // endian match");
Emit("                    value.Span.CopyTo(MemoryMarshal.Cast<byte, T_MemberType_>(targetSpan));");
Emit("                }");
Emit("                else");
Emit("                {");
Emit("                    // endian mismatch - encode each element");
Emit("                    var sourceSpan = value.Span;");
Emit("                    for (int i = 0; i < sourceSpan.Length; i++)");
Emit("                    {");
Emit("                        var elementSpan = targetSpan.Slice(T_FieldLength_ * i, T_FieldLength_);");
Emit("                        Codec_T_MemberType__T_MemberBELE_.WriteToSpan(elementSpan, sourceSpan[i]);");
Emit("                    }");
Emit("                }");
                }
Emit("            }");
Emit("        }");
        break;
        case MemberKind.Entity:
        if (member.IsNullable) {
Emit("        private async ValueTask T_NullableEntityMemberName__Pack(IDataStore dataStore)");
Emit("        {");
Emit("            BlobIdV1 blobId = default;");
Emit("            if (_T_NullableEntityMemberName_ is not null)");
Emit("            {");
Emit("                await _T_NullableEntityMemberName_.Pack(dataStore);");
Emit("                var buffer = _T_NullableEntityMemberName_.GetBuffer();");
Emit("                var blob = BlobData.UnsafeWrap(buffer);");
Emit("                blobId = await dataStore.PutBlob(blob);");
Emit("            }");
Emit("            Codec_BlobId_NE.WriteToSpan(_writableLocalBlock.Slice(T_NullableEntityFieldOffset_, 64).Span, blobId);");
Emit("        }");
Emit("        private async ValueTask T_NullableEntityMemberName__Unpack(IDataStore dataStore, int depth)");
Emit("        {");
Emit("            _T_NullableEntityMemberName_ = null;");
Emit("            BlobIdV1 blobId = Codec_BlobId_NE.ReadFromSpan(_readonlyLocalBlock.Slice(T_NullableEntityFieldOffset_, 64).Span);");
Emit("            if (!blobId.IsEmpty)");
Emit("            {");
Emit("                BlobData? blob = await dataStore.GetBlob(blobId);");
Emit("                if (blob is null) throw new InvalidDataException($\"Blob not found: {blobId}\");");
Emit("                _T_NullableEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(blob.Value.Memory);");
Emit("                await _T_NullableEntityMemberName_.Unpack(dataStore, depth - 1);");
Emit("            }");
Emit("        }");
Emit("        private T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_? _T_NullableEntityMemberName_;");
        if(member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        public T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_? T_NullableEntityMemberName_");
Emit("        {");
Emit("            get => IfUnpacked(_T_NullableEntityMemberName_);");
Emit("            set => _T_NullableEntityMemberName_ = IfNotFrozen(value);");
Emit("        }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeName_? IT_EntityName_.T_NullableEntityMemberName_");
Emit("        {");
Emit("            get => IfUnpacked(_T_NullableEntityMemberName_);");
Emit("            set => _T_NullableEntityMemberName_ = IfNotFrozen(value is null ? null : T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(value));");
Emit("        }");
        } else {
Emit("        private async ValueTask T_RequiredEntityMemberName__Pack(IDataStore dataStore)");
Emit("        {");
Emit("            BlobIdV1 blobId = default;");
Emit("            if (_T_RequiredEntityMemberName_ is null)");
Emit("            {");
Emit("                _T_RequiredEntityMemberName_ = await CreateEmpty<T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_>(dataStore);");
Emit("            }");
Emit("            else");
Emit("            {");
Emit("                await _T_RequiredEntityMemberName_.Pack(dataStore);");
Emit("                var buffer = _T_RequiredEntityMemberName_.GetBuffer();");
Emit("                var blob = BlobData.UnsafeWrap(buffer);");
Emit("                blobId = await dataStore.PutBlob(blob);");
Emit("            }");
Emit("            Codec_BlobId_NE.WriteToSpan(_writableLocalBlock.Slice(T_RequiredEntityFieldOffset_, 64).Span, blobId);");
Emit("        }");
Emit("        private async ValueTask T_RequiredEntityMemberName__Unpack(IDataStore dataStore, int depth)");
Emit("        {");
Emit("            BlobIdV1 blobId = Codec_BlobId_NE.ReadFromSpan(_readonlyLocalBlock.Slice(T_RequiredEntityFieldOffset_, 64).Span);");
Emit("            if (blobId.IsEmpty)");
Emit("            {");
Emit("                _T_RequiredEntityMemberName_ = await CreateEmpty<T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_>(dataStore);");
Emit("            }");
Emit("            else");
Emit("            {");
Emit("                BlobData? blob = await dataStore.GetBlob(blobId);");
Emit("                if (blob is null) throw new InvalidDataException($\"Blob not found: {blobId}\");");
Emit("                _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(blob.Value.Memory);");
Emit("                await _T_RequiredEntityMemberName_.Unpack(dataStore, depth - 1);");
Emit("            }");
Emit("        }");
Emit("        private T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_? _T_RequiredEntityMemberName_ = null;");
        if(member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        public T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_ T_RequiredEntityMemberName_");
Emit("        {");
Emit("            get => IfNotNull(IfUnpacked(_T_RequiredEntityMemberName_));");
Emit("            set => _T_RequiredEntityMemberName_ = IfNotFrozen(value);");
Emit("        }");
Emit("        T_MemberTypeNameSpace_.IT_MemberTypeName_ IT_EntityName_.T_RequiredEntityMemberName_");
Emit("        {");
Emit("            get => IfNotNull(IfUnpacked(_T_RequiredEntityMemberName_));");
Emit("            set => _T_RequiredEntityMemberName_ = IfNotFrozen(T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeName_.CreateFrom(value));");
Emit("        }");
        }
        break;
        case MemberKind.Binary:
        if (member.IsNullable) {
Emit("        private async ValueTask T_NullableBinaryMemberName__Pack(IDataStore dataStore)");
Emit("        {");
Emit("            BlobIdV1 blobId = default;");
Emit("            if (_T_NullableBinaryMemberName_ is not null)");
Emit("            {");
Emit("                var buffer = _T_NullableBinaryMemberName_.Memory;");
Emit("                var blob = BlobData.UnsafeWrap(buffer);");
Emit("                blobId = await dataStore.PutBlob(blob);");
Emit("            }");
Emit("            Codec_BlobId_NE.WriteToSpan(_writableLocalBlock.Slice(T_NullableBinaryFieldOffset_, 64).Span, blobId);");
Emit("        }");
Emit("        private async ValueTask T_NullableBinaryMemberName__Unpack(IDataStore dataStore, int depth)");
Emit("        {");
Emit("            _T_NullableBinaryMemberName_ = null;");
Emit("            BlobIdV1 blobId = Codec_BlobId_NE.ReadFromSpan(_readonlyLocalBlock.Slice(T_NullableBinaryFieldOffset_, 64).Span);");
Emit("            if (!blobId.IsEmpty)");
Emit("            {");
Emit("                BlobData? blob = await dataStore.GetBlob(blobId);");
Emit("                if (blob is null) throw new InvalidDataException($\"Blob not found: {blobId}\");");
Emit("                _T_NullableBinaryMemberName_ = Octets.UnsafeWrap(blob.Value.Memory);");
Emit("            }");
Emit("        }");
Emit("        private Octets? _T_NullableBinaryMemberName_;");
        if(member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        public Octets? T_NullableBinaryMemberName_");
Emit("        {");
Emit("            get => IfUnpacked(_T_NullableBinaryMemberName_);");
Emit("            set => _T_NullableBinaryMemberName_ = IfNotFrozen(value);");
Emit("        }");
        } else {
Emit("        private async ValueTask T_RequiredBinaryMemberName__Pack(IDataStore dataStore)");
Emit("        {");
Emit("            BlobIdV1 blobId = default;");
Emit("            var buffer = _T_RequiredBinaryMemberName_.Memory;");
Emit("            var blob = BlobData.UnsafeWrap(buffer);");
Emit("            blobId = await dataStore.PutBlob(blob);");
Emit("            Codec_BlobId_NE.WriteToSpan(_writableLocalBlock.Slice(T_RequiredBinaryFieldOffset_, 64).Span, blobId);");
Emit("        }");
Emit("        private async ValueTask T_RequiredBinaryMemberName__Unpack(IDataStore dataStore, int depth)");
Emit("        {");
Emit("            _T_RequiredBinaryMemberName_ = Octets.Empty;");
Emit("            BlobIdV1 blobId = Codec_BlobId_NE.ReadFromSpan(_readonlyLocalBlock.Slice(T_RequiredBinaryFieldOffset_, 64).Span);");
Emit("            if (!blobId.IsEmpty)");
Emit("            {");
Emit("                BlobData? blob = await dataStore.GetBlob(blobId);");
Emit("                if (blob is null) throw new InvalidDataException($\"Blob not found: {blobId}\");");
Emit("                _T_RequiredBinaryMemberName_ = Octets.UnsafeWrap(blob.Value.Memory);");
Emit("            }");
Emit("        }");
Emit("        private Octets _T_RequiredBinaryMemberName_ = Octets.Empty;");
        if(member.IsObsolete) {
Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
        }
Emit("        public Octets T_RequiredBinaryMemberName_");
Emit("        {");
Emit("            get => IfUnpacked(_T_RequiredBinaryMemberName_);");
Emit("            set => _T_RequiredBinaryMemberName_ = IfNotFrozen(value);");
Emit("        }");
        }
        break;
        default:
        Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
        break;
        } // switch
Emit("");
        }
Emit("");
Emit("        public bool Equals(T_EntityName_? other)");
Emit("        {");
Emit("            if (ReferenceEquals(this, other)) return true;");
Emit("            if (other is null) return false;");
Emit("            if (!_readonlyTotalBlock.Span.SequenceEqual(other._readonlyTotalBlock.Span)) return false;");
Emit("            return true;");
Emit("        }");
Emit("        public override bool Equals(object? obj) => obj is T_EntityName_ other && Equals(other);");
Emit("        public override int GetHashCode() => base.GetHashCode();");
Emit("        public static bool operator ==(T_EntityName_? left, T_EntityName_? right) => left is not null ? left.Equals(right) : (right is null);");
Emit("        public static bool operator !=(T_EntityName_? left, T_EntityName_? right) => left is not null ? !left.Equals(right) : (right is not null);");
Emit("");
Emit("    }");
Emit("}");
    }
}
